{"results": [["pycodestyle", "E128", 71, 24, "continuation line under-indented for visual indent", "                        jitter_direction[1]*(jitter_direction[1]>0),\n"], ["pycodestyle", "E128", 72, 24, "continuation line under-indented for visual indent", "                        -jitter_direction[0]*(jitter_direction[0]<0),\n"], ["pycodestyle", "E128", 73, 24, "continuation line under-indented for visual indent", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E128", 76, 4, "continuation line under-indented for visual indent", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E225", 68, 35, "missing whitespace around operator", "        if not (jitter_direction[0]==jitter_direction[1]==0): ## ensure 0,0 displacement never happens\n"], ["pycodestyle", "E225", 68, 56, "missing whitespace around operator", "        if not (jitter_direction[0]==jitter_direction[1]==0): ## ensure 0,0 displacement never happens\n"], ["pycodestyle", "E225", 70, 80, "missing whitespace around operator", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E225", 71, 64, "missing whitespace around operator", "                        jitter_direction[1]*(jitter_direction[1]>0),\n"], ["pycodestyle", "E225", 72, 65, "missing whitespace around operator", "                        -jitter_direction[0]*(jitter_direction[0]<0),\n"], ["pycodestyle", "E225", 73, 65, "missing whitespace around operator", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E225", 75, 61, "missing whitespace around operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E225", 75, 111, "missing whitespace around operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E225", 76, 45, "missing whitespace around operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E225", 76, 95, "missing whitespace around operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 65, 41, "missing whitespace around arithmetic operator", "    x,y = (torch.tensor(image.shape[1:3])*max_pixel_displacement_perc).type(torch.int)\n"], ["pycodestyle", "E226", 70, 59, "missing whitespace around arithmetic operator", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E226", 71, 43, "missing whitespace around arithmetic operator", "                        jitter_direction[1]*(jitter_direction[1]>0),\n"], ["pycodestyle", "E226", 72, 44, "missing whitespace around arithmetic operator", "                        -jitter_direction[0]*(jitter_direction[0]<0),\n"], ["pycodestyle", "E226", 73, 44, "missing whitespace around arithmetic operator", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E226", 75, 40, "missing whitespace around arithmetic operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E226", 75, 70, "missing whitespace around arithmetic operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E226", 75, 90, "missing whitespace around arithmetic operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E226", 76, 24, "missing whitespace around arithmetic operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 76, 54, "missing whitespace around arithmetic operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 76, 74, "missing whitespace around arithmetic operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 77, 16, "missing whitespace around arithmetic operator", "    return image-ii.unsqueeze(-1)\n"], ["pycodestyle", "E231", 65, 5, "missing whitespace after ','", "    x,y = (torch.tensor(image.shape[1:3])*max_pixel_displacement_perc).type(torch.int)\n"], ["pycodestyle", "E231", 67, 46, "missing whitespace after ','", "        jitter_direction = random.randrange(-x,x), random.randrange(-y,y)\n"], ["pycodestyle", "E231", 67, 70, "missing whitespace after ','", "        jitter_direction = random.randrange(-x,x), random.randrange(-y,y)\n"], ["pycodestyle", "E251", 48, 58, "unexpected spaces around keyword / parameter equals", "def Image_Jitter(image: Image, max_pixel_displacement_perc = 0.01) -> Image:\n"], ["pycodestyle", "E251", 48, 60, "unexpected spaces around keyword / parameter equals", "def Image_Jitter(image: Image, max_pixel_displacement_perc = 0.01) -> Image:\n"], ["pycodestyle", "E251", 70, 36, "unexpected spaces around keyword / parameter equals", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E251", 70, 38, "unexpected spaces around keyword / parameter equals", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E261", 68, 61, "at least two spaces before inline comment", "        if not (jitter_direction[0]==jitter_direction[1]==0): ## ensure 0,0 displacement never happens\n"], ["pycodestyle", "E262", 68, 62, "inline comment should start with '# '", "        if not (jitter_direction[0]==jitter_direction[1]==0): ## ensure 0,0 displacement never happens\n"], ["pycodestyle", "E501", 65, 80, "line too long (86 > 80 characters)", "    x,y = (torch.tensor(image.shape[1:3])*max_pixel_displacement_perc).type(torch.int)\n"], ["pycodestyle", "E501", 68, 80, "line too long (102 > 80 characters)", "        if not (jitter_direction[0]==jitter_direction[1]==0): ## ensure 0,0 displacement never happens\n"], ["pycodestyle", "E501", 70, 80, "line too long (84 > 80 characters)", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E501", 73, 80, "line too long (87 > 80 characters)", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E501", 75, 80, "line too long (115 > 80 characters)", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E501", 76, 80, "line too long (99 > 80 characters)", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["flake8-bandit", "S311", 67, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        jitter_direction = random.randrange(-x,x), random.randrange(-y,y)\n"], ["flake8-bandit", "S311", 67, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        jitter_direction = random.randrange(-x,x), random.randrange(-y,y)\n"], ["pycodestyle", "W291", 49, 67, "trailing whitespace", "    \"\"\"take an image and return the diff w.r.t its random jittered self  \n\n    Parameters\n    ----------\n    image : Image \n        Input image\n    max_pixel_displacement_perc : float\n        max pixel displacement percentage calculated along the largest dimension\n        \n\n    Returns\n    -------\n    Image\n        \n    \"\"\"\n"], ["pycodestyle", "W291", 53, 17, "trailing whitespace", "    \"\"\"take an image and return the diff w.r.t its random jittered self  \n\n    Parameters\n    ----------\n    image : Image \n        Input image\n    max_pixel_displacement_perc : float\n        max pixel displacement percentage calculated along the largest dimension\n        \n\n    Returns\n    -------\n    Image\n        \n    \"\"\"\n"], ["pycodestyle", "W291", 75, 115, "trailing whitespace", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "W293", 57, 0, "blank line contains whitespace", "    \"\"\"take an image and return the diff w.r.t its random jittered self  \n\n    Parameters\n    ----------\n    image : Image \n        Input image\n    max_pixel_displacement_perc : float\n        max pixel displacement percentage calculated along the largest dimension\n        \n\n    Returns\n    -------\n    Image\n        \n    \"\"\"\n"], ["pycodestyle", "W293", 62, 0, "blank line contains whitespace", "    \"\"\"take an image and return the diff w.r.t its random jittered self  \n\n    Parameters\n    ----------\n    image : Image \n        Input image\n    max_pixel_displacement_perc : float\n        max pixel displacement percentage calculated along the largest dimension\n        \n\n    Returns\n    -------\n    Image\n        \n    \"\"\"\n"]], "digest": "ada8dcc1d1fd4468712e09387c342759"}