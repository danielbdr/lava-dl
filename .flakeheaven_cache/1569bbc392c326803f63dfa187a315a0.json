{"results": [["pycodestyle", "E265", 149, 8, "block comment should start with '# '", "        #jitter for mimicking DVS\n"], ["pycodestyle", "E302", 34, 0, "expected 2 blank lines, found 0", "def quantize_global(image, k):\n"], ["pycodestyle", "E302", 42, 0, "expected 2 blank lines, found 1", "class _COCO(Dataset):\n"], ["pycodestyle", "E303", 33, 0, "too many blank lines (3)", "from sklearn.cluster import MiniBatchKMeans\n"], ["pycodestyle", "E501", 109, 80, "line too long (104 > 80 characters)", "        \"\"\"MSCOCO (COCO) dataset module. For details on the\n        dataset, refer to: https://cocodataset.org.\n\n        Parameters\n        ----------\n        root : str, optional\n            Root folder where the dataset has been downloaded, by default './'\n        size : Tuple[Height, Width], optional\n            Desired spatial dimension of the frame, by default (448, 448)\n        train : bool, optional\n            Use training set. If false, testing set is used. By default False.\n        augment_prob : float, optional\n            Augmentation probability of the frames and bounding boxes,\n            by default 0.0.\n        image_jitter : bool, optional\n            image jitter, recreating similar conditions for DVS like motion image encoding of frame diff\n            by default False.\n        \"\"\"\n"], ["flake8-bandit", "S311", 134, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S311", 138, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S311", 141, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S311", 144, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S404", 3, 0, "Consider possible security implications associated with the subprocess module.", "import subprocess\n"], ["flake8-bandit", "S603", 25, 0, "subprocess call - check for execution of untrusted input.", "        subprocess.check_call([sys.executable,\n"], ["flake8-bandit", "S603", 27, 0, "subprocess call - check for execution of untrusted input.", "    subprocess.check_call([sys.executable, '-m', 'pip', 'install',\n"], ["pycodestyle", "W293", 152, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 161, 0, "blank line contains whitespace", "   \n"], ["pycodestyle", "W391", 163, 0, "blank line at end of file", "\n"], ["pycodestyle", "W503", 50, 28, "line break before binary operator", "                            + f'instances_{image_set}2017.json')\n"]], "digest": "686120f8996c415de6413fefdb7a353c"}