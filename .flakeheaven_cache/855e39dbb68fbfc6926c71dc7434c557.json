{"results": [["pycodestyle", "E111", 25, 2, "indentation is not a multiple of 4", "  \"\"\"\n  Input process to convert flattened images to binary spikes.\n  \"\"\"\n"], ["pycodestyle", "E111", 28, 2, "indentation is not a multiple of 4", "  def __init__(self, img_shape, n_tsteps, curr_img_id, v_thr=1):\n"], ["pycodestyle", "E111", 44, 2, "indentation is not a multiple of 4", "  \"\"\"\n  Python implementation for the above `InpImgToSpk` process.\n  \"\"\"\n"], ["pycodestyle", "E111", 47, 2, "indentation is not a multiple of 4", "  spk_out: PyOutPort = LavaPyType(PyOutPort.VEC_DENSE, bool, precision=1)\n"], ["pycodestyle", "E111", 48, 2, "indentation is not a multiple of 4", "  label_out: PyOutPort = LavaPyType(PyOutPort.VEC_DENSE, np.int32, precision=32)\n"], ["pycodestyle", "E111", 50, 2, "indentation is not a multiple of 4", "  curr_img_id: int = LavaPyType(int, int, precision=32)\n"], ["pycodestyle", "E111", 51, 2, "indentation is not a multiple of 4", "  n_ts: int = LavaPyType(int, int, precision=32)\n"], ["pycodestyle", "E111", 52, 2, "indentation is not a multiple of 4", "  inp_img: np.ndarray = LavaPyType(np.ndarray, float)\n"], ["pycodestyle", "E111", 53, 2, "indentation is not a multiple of 4", "  ground_truth_label: int = LavaPyType(int, int, precision=32)\n"], ["pycodestyle", "E111", 54, 2, "indentation is not a multiple of 4", "  v: np.ndarray = LavaPyType(np.ndarray, float)\n"], ["pycodestyle", "E111", 55, 2, "indentation is not a multiple of 4", "  vth: float = LavaPyType(float, float)\n"], ["pycodestyle", "E111", 57, 2, "indentation is not a multiple of 4", "  def __init__(self, proc_params):\n"], ["pycodestyle", "E111", 63, 2, "indentation is not a multiple of 4", "  def post_guard(self):\n"], ["pycodestyle", "E111", 72, 6, "indentation is not a multiple of 4", "      return True\n"], ["pycodestyle", "E111", 76, 2, "indentation is not a multiple of 4", "  def run_post_mgmt(self):\n"], ["pycodestyle", "E111", 88, 2, "indentation is not a multiple of 4", "  def run_spk(self):\n"], ["pycodestyle", "E111", 94, 5, "indentation is not a multiple of 4", "     self.inp_img = np.zeros(self.inp_img.shape, dtype=float)\n"], ["pycodestyle", "E111", 95, 5, "indentation is not a multiple of 4", "     self.v = np.zeros(self.v.shape, dtype=float)\n"], ["pycodestyle", "E111", 105, 2, "indentation is not a multiple of 4", "  \"\"\"\n  Output process to collect output neuron spikes and infer predicted class.\n  \"\"\"\n"], ["pycodestyle", "E111", 108, 2, "indentation is not a multiple of 4", "  def __init__(self, n_tsteps, num_test_imgs, n_cls_shape=(10, )):\n"], ["pycodestyle", "E111", 121, 2, "indentation is not a multiple of 4", "  spikes_in: PyInPort = LavaPyType(PyInPort.VEC_DENSE, bool, precision=1)\n"], ["pycodestyle", "E111", 122, 2, "indentation is not a multiple of 4", "  label_in: PyInPort = LavaPyType(PyInPort.VEC_DENSE, int, precision=32)\n"], ["pycodestyle", "E111", 123, 2, "indentation is not a multiple of 4", "  spikes_accum: np.ndarray = LavaPyType(np.ndarray, np.int32, precision=32)\n"], ["pycodestyle", "E111", 124, 2, "indentation is not a multiple of 4", "  n_ts: int = LavaPyType(int, int, precision=32)\n"], ["pycodestyle", "E111", 125, 2, "indentation is not a multiple of 4", "  pred_labels: np.ndarray = LavaPyType(np.ndarray, int, precision=32)\n"], ["pycodestyle", "E111", 126, 2, "indentation is not a multiple of 4", "  true_labels: np.ndarray = LavaPyType(np.ndarray, int, precision=32)\n"], ["pycodestyle", "E111", 128, 2, "indentation is not a multiple of 4", "  def __init__(self, proc_params):\n"], ["pycodestyle", "E111", 132, 2, "indentation is not a multiple of 4", "  def post_guard(self):\n"], ["pycodestyle", "E111", 137, 6, "indentation is not a multiple of 4", "      return True\n"], ["pycodestyle", "E111", 141, 2, "indentation is not a multiple of 4", "  def run_post_mgmt(self):\n"], ["pycodestyle", "E111", 153, 2, "indentation is not a multiple of 4", "  def run_spk(self):\n"], ["pycodestyle", "E111", 195, 2, "indentation is not a multiple of 4", "  \"\"\"\n  Returns the run-time config corresponding to the `backend`.\n\n  Args:\n    backend <str>: Either \"L2Sim\" or \"L2Hw\" for Loihi2SimCfg or Loihi2HwCfg.\n  \"\"\"\n"], ["pycodestyle", "E111", 201, 2, "indentation is not a multiple of 4", "  assert backend in [\"L2Sim\", \"L2Hw\"]\n"], ["pycodestyle", "E111", 203, 2, "indentation is not a multiple of 4", "  if backend == \"L2Sim\": # Run on the Loihi-2 Simulation Hardware on CPU.\n"], ["pycodestyle", "E111", 213, 2, "indentation is not a multiple of 4", "  elif backend == \"L2Hw\": # Run on the Loihi-2 Physical Hardware on INRC.\n"], ["pycodestyle", "E111", 223, 2, "indentation is not a multiple of 4", "  return run_config\n"], ["pycodestyle", "E111", 227, 2, "indentation is not a multiple of 4", "  \"\"\"\n  Args:\n    backend <str>: \"L2Sim\" for deployment on CPU, \"L2Hw\" for deployment on \n                   Loihi-2 Hardware.\n    is_log <bool>: Log the execution steps on Loihi-2 Hardware if True.\n  \"\"\"\n"], ["pycodestyle", "E111", 233, 2, "indentation is not a multiple of 4", "  assert backend in [\"L2Sim\", \"L2Hw\"]\n"], ["pycodestyle", "E111", 234, 2, "indentation is not a multiple of 4", "  run_config = get_run_config(backend=backend)\n"], ["pycodestyle", "E111", 235, 2, "indentation is not a multiple of 4", "  if is_log and backend==\"L2Hw\":\n"], ["pycodestyle", "E111", 238, 2, "indentation is not a multiple of 4", "  for _ in range(num_test_imgs):\n"], ["pycodestyle", "E111", 242, 2, "indentation is not a multiple of 4", "  ground_truths = spk_to_cls.true_labels.get().astype(np.int32)\n"], ["pycodestyle", "E111", 243, 2, "indentation is not a multiple of 4", "  predtd_clsses = spk_to_cls.pred_labels.get().astype(np.int32)\n"], ["pycodestyle", "E111", 245, 2, "indentation is not a multiple of 4", "  img_to_spk.stop()\n"], ["pycodestyle", "E111", 246, 2, "indentation is not a multiple of 4", "  print(\"Accuracy on Loihi {0}: \".format(\n"], ["pycodestyle", "E121", 240, 6, "continuation line under-indented for hanging indent", "      condition=RunSteps(num_steps=n_tsteps), run_cfg=run_config\n"], ["pycodestyle", "E123", 173, 4, "closing bracket does not match indentation of opening bracket's line", "    )\n"], ["pycodestyle", "E123", 211, 12, "closing bracket does not match indentation of opening bracket's line", "            }\n"], ["pycodestyle", "E123", 212, 8, "closing bracket does not match indentation of opening bracket's line", "        )\n"], ["pycodestyle", "E123", 221, 12, "closing bracket does not match indentation of opening bracket's line", "            }\n"], ["pycodestyle", "E123", 222, 8, "closing bracket does not match indentation of opening bracket's line", "        )\n"], ["pycodestyle", "E225", 235, 23, "missing whitespace around operator", "  if is_log and backend==\"L2Hw\":\n"], ["pycodestyle", "E225", 247, 31, "missing whitespace around operator", "        \"Simulation\" if backend==\"L2Sim\" else \"Board\"),\n"], ["pycodestyle", "E226", 82, 22, "missing whitespace around arithmetic operator", "    self.inp_img = img/255\n"], ["pycodestyle", "E226", 97, 17, "missing whitespace around arithmetic operator", "    J = self.gain*self.inp_img + self.bias\n"], ["pycodestyle", "E261", 71, 39, "at least two spaces before inline comment", "    if self.time_step % self.n_ts == 1: # n_ts steps passed, one image processed.\n"], ["pycodestyle", "E261", 110, 46, "at least two spaces before inline comment", "    self.spikes_in = InPort(shape=n_cls_shape) # Receives output spikes.\n"], ["pycodestyle", "E261", 111, 39, "at least two spaces before inline comment", "    self.label_in = InPort(shape=(1, )) # Receives ground truth labels.\n"], ["pycodestyle", "E261", 112, 46, "at least two spaces before inline comment", "    self.spikes_accum = Var(shape=n_cls_shape) # Accum. spikes for prediction.\n"], ["pycodestyle", "E261", 113, 47, "at least two spaces before inline comment", "    self.n_ts = Var(shape=(1, ), init=n_tsteps) # Image presentation time.\n"], ["pycodestyle", "E261", 164, 13, "at least two spaces before inline comment", "n_tsteps = 32 # Since reset_interval on Loihi-2 Hardware has to be a power of 2.\n"], ["pycodestyle", "E261", 167, 18, "at least two spaces before inline comment", "num_test_imgs = 25 # Set 10000 for Loihi2SimCfg (--takes some time to execute).\n"], ["pycodestyle", "E261", 170, 45, "at least two spaces before inline comment", "    net_config=\"./trained_mnist_network.net\", # Trained network path.\n"], ["pycodestyle", "E261", 171, 28, "at least two spaces before inline comment", "    reset_interval=n_tsteps, # Presentation time-steps of each test-image.\n"], ["pycodestyle", "E261", 172, 18, "at least two spaces before inline comment", "    reset_offset=1 # Phase shift / offset time-step to reset this network.\n"], ["pycodestyle", "E261", 203, 24, "at least two spaces before inline comment", "  if backend == \"L2Sim\": # Run on the Loihi-2 Simulation Hardware on CPU.\n"], ["pycodestyle", "E261", 205, 30, "at least two spaces before inline comment", "        select_tag=\"fixed_pt\", # To select fixed point implementation.\n"], ["pycodestyle", "E261", 213, 25, "at least two spaces before inline comment", "  elif backend == \"L2Hw\": # Run on the Loihi-2 Physical Hardware on INRC.\n"], ["pycodestyle", "E265", 163, 0, "block comment should start with '# '", "#n_tsteps = 20  \n"], ["pycodestyle", "E302", 24, 0, "expected 2 blank lines, found 1", "class InpImgToSpk(AbstractProcess):\n"], ["pycodestyle", "E302", 41, 0, "expected 2 blank lines, found 1", "@implements(proc=InpImgToSpk, protocol=LoihiProtocol)\n"], ["pycodestyle", "E302", 104, 0, "expected 2 blank lines, found 1", "class OutSpkToCls(AbstractProcess):\n"], ["pycodestyle", "E302", 118, 0, "expected 2 blank lines, found 1", "@implements(proc=OutSpkToCls, protocol=LoihiProtocol)\n"], ["pycodestyle", "E302", 194, 0, "expected 2 blank lines, found 1", "def get_run_config(backend):\n"], ["pycodestyle", "E302", 226, 0, "expected 2 blank lines, found 1", "def run_inference(backend, is_log=False):\n"], ["pycodestyle", "E305", 164, 0, "expected 2 blank lines after class or function definition, found 1", "n_tsteps = 32 # Since reset_interval on Loihi-2 Hardware has to be a power of 2.\n"], ["pycodestyle", "E305", 252, 0, "expected 2 blank lines after class or function definition, found 1", "run_inference(\"L2Hw\", is_log=False)\n"], ["pycodestyle", "E501", 71, 80, "line too long (81 > 80 characters)", "    if self.time_step % self.n_ts == 1: # n_ts steps passed, one image processed.\n"], ["flake8-bandit", "S101", 201, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "  assert backend in [\"L2Sim\", \"L2Hw\"]\n"], ["flake8-bandit", "S101", 233, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "  assert backend in [\"L2Sim\", \"L2Hw\"]\n"], ["pycodestyle", "W291", 163, 14, "trailing whitespace", "#n_tsteps = 20  \n"], ["pycodestyle", "W291", 229, 74, "trailing whitespace", "  \"\"\"\n  Args:\n    backend <str>: \"L2Sim\" for deployment on CPU, \"L2Hw\" for deployment on \n                   Loihi-2 Hardware.\n    is_log <bool>: Log the execution steps on Loihi-2 Hardware if True.\n  \"\"\"\n"], ["pycodestyle", "W293", 237, 0, "blank line contains whitespace", "  \n"]], "digest": "1b61aa6e0612468d66dcb81bac49eae2"}