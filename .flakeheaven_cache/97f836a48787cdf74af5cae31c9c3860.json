{"results": [["pycodestyle", "E262", 50, 77, "inline comment should start with '# '", "                                input_std=np.array([0.229, 0.224, 0.225]))   #                     & std\n"], ["pycodestyle", "E302", 93, 0, "expected 2 blank lines, found 1", "def output_visualizer(annotated_frame, map_score, frame_idx):\n"], ["pycodestyle", "E305", 99, 0, "expected 2 blank lines after class or function definition, found 1", "yolo_monitor = YOLOMonitor(viz_fx=output_visualizer, class_list=test_set.classes)\n"], ["pycodestyle", "E501", 29, 80, "line too long (83 > 80 characters)", "    from lava.magma.compiler.subcompilers.nc.ncproc_compiler import CompilerOptions\n"], ["pycodestyle", "E501", 45, 80, "line too long (123 > 80 characters)", "                                      spike_exp=4,    # This sets the decimal/fraction precision of spike message to 4 bits\n"], ["pycodestyle", "E501", 46, 80, "line too long (96 > 80 characters)", "                                      num_steps=100)  # Number of frames to perform inference on\n"], ["pycodestyle", "E501", 49, 80, "line too long (103 > 80 characters)", "pre_args = slayer.utils.dotdict(input_mean=np.array([0.485, 0.456, 0.406]),  # Input normalization mean\n"], ["pycodestyle", "E501", 50, 80, "line too long (104 > 80 characters)", "                                input_std=np.array([0.229, 0.224, 0.225]))   #                     & std\n"], ["pycodestyle", "E501", 51, 80, "line too long (100 > 80 characters)", "post_args = slayer.utils.dotdict(anchors=np.array([(0.28, 0.22),  # YOLO head's anchor preset scales\n"], ["pycodestyle", "E501", 57, 80, "line too long (115 > 80 characters)", "                        skip_layers=1,  # First layer does delta encoding. We will only send it's sparsified output\n"], ["pycodestyle", "E501", 58, 80, "line too long (103 > 80 characters)", "                        input_message_bits=16,  # This means the network takes 16bit graded spike input\n"], ["pycodestyle", "E501", 61, 80, "line too long (109 > 80 characters)", "print(f'\\nNetwork Architecture ({model_args.model}):'); print('=' * (24 + len(model_args.model))); print(net)\n"], ["pycodestyle", "E501", 67, 80, "line too long (92 > 80 characters)", "data_gen = DataGenerator(dataset=test_set, mean=pre_args.input_mean, std=pre_args.input_std)\n"], ["pycodestyle", "E501", 70, 80, "line too long (103 > 80 characters)", "quantize = netx.modules.Quantize(exp=6)  # convert to fixed point representation with 6 bit of fraction\n"], ["pycodestyle", "E501", 73, 80, "line too long (86 > 80 characters)", "                                  vth=net.net_config['layer'][0]['neuron']['vThMant'],\n"], ["pycodestyle", "E501", 74, 80, "line too long (89 > 80 characters)", "                                  spike_exp=0 if inference_args.loihi else net.spike_exp,\n"], ["pycodestyle", "E501", 90, 80, "line too long (89 > 80 characters)", "yolo_predictor = YOLOPredictor(anchors=post_args.anchors, clamp_max=model_args.clamp_max)\n"], ["pycodestyle", "E501", 99, 80, "line too long (81 > 80 characters)", "yolo_monitor = YOLOMonitor(viz_fx=output_visualizer, class_list=test_set.classes)\n"], ["pycodestyle", "E501", 122, 80, "line too long (94 > 80 characters)", "    exception_proc_model_map = {io.encoder.DeltaEncoder: io.encoder.PyDeltaEncoderModelSparse}\n"], ["pycodestyle", "E501", 125, 80, "line too long (93 > 80 characters)", "    exception_proc_model_map = {io.encoder.DeltaEncoder: io.encoder.PyDeltaEncoderModelDense}\n"], ["pycodestyle", "E501", 147, 80, "line too long (82 > 80 characters)", "        gt_bbox = obd.bbox.utils.tensor_from_annotation(gt_ann).cpu().data.numpy()\n"], ["pycodestyle", "E702", 61, 54, "multiple statements on one line (semicolon)", "print(f'\\nNetwork Architecture ({model_args.model}):'); print('=' * (24 + len(model_args.model))); print(net)\n"], ["pycodestyle", "E702", 61, 97, "multiple statements on one line (semicolon)", "print(f'\\nNetwork Architecture ({model_args.model}):'); print('=' * (24 + len(model_args.model))); print(net)\n"], ["pycodestyle", "W293", 98, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 137, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 140, 0, "blank line contains whitespace", "    \n"]], "digest": "3629a55a88a038badae7c8970d7a8afa"}