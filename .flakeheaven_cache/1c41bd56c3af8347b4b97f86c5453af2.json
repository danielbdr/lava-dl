{"results": [["pycodestyle", "E121", 32, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 36, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 43, 12, "continuation line under-indented for hanging indent", "            ])\n"], ["pycodestyle", "E121", 95, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 104, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E126", 27, 16, "continuation line over-indented for hanging indent", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E126", 34, 16, "continuation line over-indented for hanging indent", "                **neuron_params, \n"], ["pycodestyle", "E126", 39, 16, "continuation line over-indented for hanging indent", "                bootstrap.block.cuba.Input(neuron_params, weight=1, bias=0), # enable affine transform at input\n"], ["pycodestyle", "E126", 82, 8, "continuation line over-indented for hanging indent", "        root='data/',\n"], ["pycodestyle", "E126", 98, 8, "continuation line over-indented for hanging indent", "        root='data/',\n"], ["pycodestyle", "E201", 128, 52, "whitespace after '('", "        stats.training.correct_samples += torch.sum( prediction == label ).data.item()\n"], ["pycodestyle", "E201", 149, 51, "whitespace after '('", "        stats.testing.correct_samples += torch.sum( prediction == label ).data.item()\n"], ["pycodestyle", "E202", 128, 72, "whitespace before ')'", "        stats.training.correct_samples += torch.sum( prediction == label ).data.item()\n"], ["pycodestyle", "E202", 149, 71, "whitespace before ')'", "        stats.testing.correct_samples += torch.sum( prediction == label ).data.item()\n"], ["pycodestyle", "E203", 27, 31, "whitespace before ':'", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E203", 28, 31, "whitespace before ':'", "                'current_decay' : 1, # this must be 1 to use batchnorm\n"], ["pycodestyle", "E203", 29, 31, "whitespace before ':'", "                'voltage_decay' : 0.03,\n"], ["pycodestyle", "E203", 30, 31, "whitespace before ':'", "                'tau_grad'      : 1,\n"], ["pycodestyle", "E203", 31, 31, "whitespace before ':'", "                'scale_grad'    : 1,\n"], ["pycodestyle", "E203", 107, 45, "whitespace before ','", "test_loader  = DataLoader(dataset=testing_set , batch_size=32, shuffle=True)\n"], ["pycodestyle", "E221", 107, 11, "multiple spaces before operator", "test_loader  = DataLoader(dataset=testing_set , batch_size=32, shuffle=True)\n"], ["pycodestyle", "E226", 40, 65, "missing whitespace around arithmetic operator", "                bootstrap.block.cuba.Dense(neuron_params_norm, 28*28, 512, weight_norm=True, weight_scale=2),\n"], ["pycodestyle", "E226", 155, 23, "missing whitespace around arithmetic operator", "        print('\\r', ' '*len(f'\\r[Epoch {epoch:2d}/{epochs}] {stats}'))\n"], ["pycodestyle", "E226", 176, 12, "missing whitespace around arithmetic operator", "    img = (2*input[i].reshape(28, 28).cpu().data.numpy()-1) * 255\n"], ["pycodestyle", "E226", 176, 56, "missing whitespace around arithmetic operator", "    img = (2*input[i].reshape(28, 28).cpu().data.numpy()-1) * 255\n"], ["pycodestyle", "E261", 28, 36, "at least two spaces before inline comment", "                'current_decay' : 1, # this must be 1 to use batchnorm\n"], ["pycodestyle", "E261", 39, 76, "at least two spaces before inline comment", "                bootstrap.block.cuba.Input(neuron_params, weight=1, bias=0), # enable affine transform at input\n"], ["pycodestyle", "E302", 21, 0, "expected 2 blank lines, found 1", "class Network(torch.nn.Module):\n"], ["pycodestyle", "E305", 70, 0, "expected 2 blank lines after class or function definition, found 1", "trained_folder = 'Trained'\n"], ["pycodestyle", "E401", 3, 9, "multiple imports on one line", "import os, sys\n"], ["pycodestyle", "E501", 39, 80, "line too long (111 > 80 characters)", "                bootstrap.block.cuba.Input(neuron_params, weight=1, bias=0), # enable affine transform at input\n"], ["pycodestyle", "E501", 40, 80, "line too long (109 > 80 characters)", "                bootstrap.block.cuba.Dense(neuron_params_norm, 28*28, 512, weight_norm=True, weight_scale=2),\n"], ["pycodestyle", "E501", 41, 80, "line too long (107 > 80 characters)", "                bootstrap.block.cuba.Dense(neuron_params_norm, 512, 512, weight_norm=True, weight_scale=2),\n"], ["pycodestyle", "E501", 42, 80, "line too long (102 > 80 characters)", "                bootstrap.block.cuba.Affine(neuron_params, 512, 10, weight_norm=True, weight_scale=2),\n"], ["pycodestyle", "E501", 128, 80, "line too long (86 > 80 characters)", "        stats.training.correct_samples += torch.sum( prediction == label ).data.item()\n"], ["pycodestyle", "E501", 141, 80, "line too long (84 > 80 characters)", "            output = net.forward(input, mode=scheduler.mode(epoch, i, net.training))\n"], ["pycodestyle", "E501", 149, 80, "line too long (85 > 80 characters)", "        stats.testing.correct_samples += torch.sum( prediction == label ).data.item()\n"], ["pycodestyle", "E501", 178, 80, "line too long (90 > 80 characters)", "    out_event = slayer.io.tensor_to_event(output[i].cpu().data.numpy().reshape(1, 10, -1))\n"], ["pycodestyle", "E501", 183, 80, "line too long (90 > 80 characters)", "img_td = lambda gif: f'<td> <img src=\"{gif}\" alt=\"Drawing\" style=\"height: 150px;\"/> </td>'\n"], ["pycodestyle", "E731", 183, 0, "do not assign a lambda expression, use a def", "img_td = lambda gif: f'<td> <img src=\"{gif}\" alt=\"Drawing\" style=\"height: 150px;\"/> </td>'\n"], ["pycodestyle", "W291", 34, 32, "trailing whitespace", "                **neuron_params, \n"], ["pycodestyle", "W291", 64, 47, "trailing whitespace", "        simulation['tSample'] = self.time_steps        \n"], ["pycodestyle", "W291", 74, 29, "trailing whitespace", "device = torch.device('cuda') \n"], ["pycodestyle", "W291", 86, 27, "trailing whitespace", "                degrees=10, \n"], ["pycodestyle", "W293", 37, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 162, 0, "blank line contains whitespace", "            \n"]], "digest": "eb0afc182aecada2b209742e7e043f0c"}