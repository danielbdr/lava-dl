{"results": [["pycodestyle", "E225", 220, 22, "missing whitespace around operator", "                if idx<len(images)-1: ### (0) \n"], ["pycodestyle", "E226", 219, 42, "missing whitespace around arithmetic operator", "                images[idx] = (images[idx]*prcs).int()//prcs   ##(2) scale to 4bit                \n"], ["pycodestyle", "E226", 219, 54, "missing whitespace around arithmetic operator", "                images[idx] = (images[idx]*prcs).int()//prcs   ##(2) scale to 4bit                \n"], ["pycodestyle", "E226", 220, 34, "missing whitespace around arithmetic operator", "                if idx<len(images)-1: ### (0) \n"], ["pycodestyle", "E226", 221, 45, "missing whitespace around arithmetic operator", "                    images[idx] = images[idx]-images[idx+1]\n"], ["pycodestyle", "E226", 221, 56, "missing whitespace around arithmetic operator", "                    images[idx] = images[idx]-images[idx+1]\n"], ["pycodestyle", "E261", 207, 29, "at least two spaces before inline comment", "        if self.image_jitter: ##(1) greay scale instead of color -- moving to 1Ch reduction of 3x            \n"], ["pycodestyle", "E261", 216, 22, "at least two spaces before inline comment", "            n_bits = 4 # temporary local var\n"], ["pycodestyle", "E261", 220, 37, "at least two spaces before inline comment", "                if idx<len(images)-1: ### (0) \n"], ["pycodestyle", "E262", 207, 30, "inline comment should start with '# '", "        if self.image_jitter: ##(1) greay scale instead of color -- moving to 1Ch reduction of 3x            \n"], ["pycodestyle", "E262", 219, 63, "inline comment should start with '# '", "                images[idx] = (images[idx]*prcs).int()//prcs   ##(2) scale to 4bit                \n"], ["pycodestyle", "E262", 220, 38, "inline comment should start with '# '", "                if idx<len(images)-1: ### (0) \n"], ["pycodestyle", "E265", 213, 8, "block comment should start with '# '", "        #jitter for mimicking DVS input\n"], ["pycodestyle", "E265", 215, 12, "block comment should start with '# '", "            #set # of bits for image diff\n"], ["pycodestyle", "E501", 148, 80, "line too long (104 > 80 characters)", "        \"\"\"Berkley Deep Drive (BDD100K) dataset module. For details on the\n        dataset, refer to: https://bdd-data.berkeley.edu/.\n\n        Parameters\n        ----------\n        root : str, optional\n            Root folder where the dataset has been downloaded, by default './'\n        dataset : str, optional\n            Sub class of BDD100K dataset. By default 'track' which refers to\n            MOT2020.\n        size : Tuple[Height, Width], optional\n            Desired spatial dimension of the frame, by default (448, 448)\n        train : bool, optional\n            Use training set. If false, testing set is used. By default False.\n        seq_len : int, optional\n            Number of sequential frames to process at a time, by default 32\n        randomize_seq : bool, optional\n            Randomize the start of frame sequence. If false, the first seq_len\n            of the sample is returned, by default False.\n        augment_prob : float, optional\n            Augmentation probability of the frames and bounding boxes,\n            by default 0.0.\n        image_jitter : bool, optional\n            image jitter, recreating similar conditions for DVS like motion image encoding of frame diff\n            by default False.\n        \"\"\"\n"], ["pycodestyle", "E501", 207, 80, "line too long (97 > 80 characters)", "        if self.image_jitter: ##(1) greay scale instead of color -- moving to 1Ch reduction of 3x            \n"], ["pycodestyle", "E501", 211, 80, "line too long (81 > 80 characters)", "        images = [torch.unsqueeze(self.img_transform(img), -1) for img in images]\n"], ["pycodestyle", "E501", 219, 80, "line too long (82 > 80 characters)", "                images[idx] = (images[idx]*prcs).int()//prcs   ##(2) scale to 4bit                \n"], ["pycodestyle", "W291", 207, 97, "trailing whitespace", "        if self.image_jitter: ##(1) greay scale instead of color -- moving to 1Ch reduction of 3x            \n"], ["pycodestyle", "W291", 218, 42, "trailing whitespace", "            for idx in range(len(images)):               \n"], ["pycodestyle", "W291", 219, 82, "trailing whitespace", "                images[idx] = (images[idx]*prcs).int()//prcs   ##(2) scale to 4bit                \n"], ["pycodestyle", "W291", 220, 45, "trailing whitespace", "                if idx<len(images)-1: ### (0) \n"], ["pycodestyle", "W293", 212, 0, "blank line contains whitespace", "        \n"]], "digest": "c1a94b57757757689eb54347aceffd39"}