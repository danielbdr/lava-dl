{"results": [["pycodestyle", "E203", 53, 27, "whitespace before ':'", "            'threshold'     : threshold,   # delta unit threshold\n"], ["pycodestyle", "E203", 54, 27, "whitespace before ':'", "            'tau_grad'      : tau_grad,    # delta unit surrogate gradient relaxation parameter\n"], ["pycodestyle", "E203", 55, 27, "whitespace before ':'", "            'scale_grad'    : scale_grad,  # delta unit surrogate gradient scale parameter\n"], ["pycodestyle", "E203", 56, 27, "whitespace before ':'", "            'requires_grad' : False,       # trainable threshold\n"], ["pycodestyle", "E203", 57, 27, "whitespace before ':'", "            'shared_param'  : True,        # layer wise threshold\n"], ["pycodestyle", "E203", 61, 27, "whitespace before ':'", "            'activation'    : F.relu,      # activation function\n"], ["pycodestyle", "E203", 249, 23, "whitespace before ':'", "        model_keys = {k : False for k in saved_model.keys()}\n"], ["pycodestyle", "E221", 66, 26, "multiple spaces before operator", "        self.normalize_std  = torch.tensor([0.229, 0.224, 0.225]).reshape([1, 3, 1, 1, 1])\n"], ["pycodestyle", "E241", 84, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,   3,  16, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E241", 84, 61, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,   3,  16, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E241", 85, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  16,  32, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E241", 85, 61, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  16,  32, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E241", 86, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  32,  64, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E241", 86, 61, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  32,  64, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E241", 87, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  64, 128, 3, padding=1, stride=2, weight_scale=3, **block_kwargs),\n"], ["pycodestyle", "E241", 92, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  256,  256, 3, padding=1, stride=2, **block_kwargs),\n"], ["pycodestyle", "E241", 92, 62, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  256,  256, 3, padding=1, stride=2, **block_kwargs),\n"], ["pycodestyle", "E241", 93, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  256,  512, 3, padding=1, stride=1, **block_kwargs),\n"], ["pycodestyle", "E241", 93, 62, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  256,  512, 3, padding=1, stride=1, **block_kwargs),\n"], ["pycodestyle", "E241", 94, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  512, 1024, 3, padding=1, stride=1, **block_kwargs),\n"], ["pycodestyle", "E241", 95, 62, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 1024,  256, 1, padding=0, stride=1, **block_kwargs),\n"], ["pycodestyle", "E501", 54, 80, "line too long (95 > 80 characters)", "            'tau_grad'      : tau_grad,    # delta unit surrogate gradient relaxation parameter\n"], ["pycodestyle", "E501", 55, 80, "line too long (90 > 80 characters)", "            'scale_grad'    : scale_grad,  # delta unit surrogate gradient scale parameter\n"], ["pycodestyle", "E501", 65, 80, "line too long (90 > 80 characters)", "        self.normalize_mean = torch.tensor([0.485, 0.456, 0.406]).reshape([1, 3, 1, 1, 1])\n"], ["pycodestyle", "E501", 66, 80, "line too long (90 > 80 characters)", "        self.normalize_std  = torch.tensor([0.229, 0.224, 0.225]).reshape([1, 3, 1, 1, 1])\n"], ["pycodestyle", "E501", 81, 80, "line too long (87 > 80 characters)", "        block_kwargs = dict(weight_norm=True, delay_shift=False, pre_hook_fx=quantizer)\n"], ["pycodestyle", "E501", 82, 80, "line too long (85 > 80 characters)", "        neuron_kwargs = {**sdnn_params, 'norm': slayer.neuron.norm.MeanOnlyBatchNorm}\n"], ["pycodestyle", "E501", 84, 80, "line too long (123 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,   3,  16, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E501", 85, 80, "line too long (123 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  16,  32, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E501", 86, 80, "line too long (123 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  32,  64, 3, padding=1, stride=2, weight_scale=1, **block_kwargs),\n"], ["pycodestyle", "E501", 87, 80, "line too long (123 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  64, 128, 3, padding=1, stride=2, weight_scale=3, **block_kwargs),\n"], ["pycodestyle", "E501", 88, 80, "line too long (123 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 128, 256, 3, padding=1, stride=1, weight_scale=3, **block_kwargs),\n"], ["pycodestyle", "E501", 92, 80, "line too long (109 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  256,  256, 3, padding=1, stride=2, **block_kwargs),\n"], ["pycodestyle", "E501", 93, 80, "line too long (109 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  256,  512, 3, padding=1, stride=1, **block_kwargs),\n"], ["pycodestyle", "E501", 94, 80, "line too long (109 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  512, 1024, 3, padding=1, stride=1, **block_kwargs),\n"], ["pycodestyle", "E501", 95, 80, "line too long (109 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 1024,  256, 1, padding=0, stride=1, **block_kwargs),\n"], ["pycodestyle", "E501", 99, 80, "line too long (107 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 256, 512, 3, padding=1, stride=1, **block_kwargs),\n"], ["pycodestyle", "E501", 100, 80, "line too long (96 > 80 characters)", "            slayer.synapse.Conv(512, self.num_output, 1, padding=0, stride=1, **synapse_kwargs),\n"], ["pycodestyle", "E501", 105, 80, "line too long (107 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 256, 128, 1, padding=0, stride=1, **block_kwargs),\n"], ["pycodestyle", "E501", 106, 80, "line too long (98 > 80 characters)", "            slayer.block.sigma_delta.Unpool(sdnn_params, kernel_size=2, stride=2, **block_kwargs),\n"], ["pycodestyle", "E501", 110, 80, "line too long (107 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 384, 256, 3, padding=1, stride=1, **block_kwargs),\n"], ["pycodestyle", "E501", 111, 80, "line too long (96 > 80 characters)", "            slayer.synapse.Conv(256, self.num_output, 1, padding=0, stride=1, **synapse_kwargs),\n"], ["pycodestyle", "E501", 252, 80, "line too long (106 > 80 characters)", "        self.input_blocks[0].neuron.bias.data = saved_model[f'input_blocks.0.neuron.bias'].data.to(device)\n"], ["pycodestyle", "E501", 253, 80, "line too long (128 > 80 characters)", "        self.input_blocks[0].neuron.delta.threshold.data = saved_model[f'input_blocks.0.neuron.delta.threshold'].data.to(device)\n"], ["pycodestyle", "E501", 259, 80, "line too long (105 > 80 characters)", "            self.backend_blocks[i].neuron.bias.data = saved_model[f'backend_blocks.{i}.neuron.bias'].data\n"], ["pycodestyle", "E501", 260, 80, "line too long (131 > 80 characters)", "            self.backend_blocks[i].neuron.norm.running_mean.data = saved_model[f'backend_blocks.{i}.neuron.norm.running_mean'].data\n"], ["pycodestyle", "E501", 261, 80, "line too long (127 > 80 characters)", "            self.backend_blocks[i].neuron.delta.threshold.data = saved_model[f'backend_blocks.{i}.neuron.delta.threshold'].data\n"], ["pycodestyle", "E501", 262, 80, "line too long (115 > 80 characters)", "            self.backend_blocks[i].synapse.weight_g.data = saved_model[f'backend_blocks.{i}.synapse.weight_g'].data\n"], ["pycodestyle", "E501", 263, 80, "line too long (115 > 80 characters)", "            self.backend_blocks[i].synapse.weight_v.data = saved_model[f'backend_blocks.{i}.synapse.weight_v'].data\n"], ["pycodestyle", "E501", 271, 80, "line too long (103 > 80 characters)", "            self.head1_backend[i].neuron.bias.data = saved_model[f'head1_backend.{i}.neuron.bias'].data\n"], ["pycodestyle", "E501", 272, 80, "line too long (129 > 80 characters)", "            self.head1_backend[i].neuron.norm.running_mean.data = saved_model[f'head1_backend.{i}.neuron.norm.running_mean'].data\n"], ["pycodestyle", "E501", 273, 80, "line too long (125 > 80 characters)", "            self.head1_backend[i].neuron.delta.threshold.data = saved_model[f'head1_backend.{i}.neuron.delta.threshold'].data\n"], ["pycodestyle", "E501", 274, 80, "line too long (113 > 80 characters)", "            self.head1_backend[i].synapse.weight_g.data = saved_model[f'head1_backend.{i}.synapse.weight_g'].data\n"], ["pycodestyle", "E501", 275, 80, "line too long (113 > 80 characters)", "            self.head1_backend[i].synapse.weight_v.data = saved_model[f'head1_backend.{i}.synapse.weight_v'].data\n"], ["pycodestyle", "E501", 283, 80, "line too long (103 > 80 characters)", "            self.head2_backend[i].neuron.bias.data = saved_model[f'head2_backend.{i}.neuron.bias'].data\n"], ["pycodestyle", "E501", 284, 80, "line too long (125 > 80 characters)", "            self.head2_backend[i].neuron.delta.threshold.data = saved_model[f'head2_backend.{i}.neuron.delta.threshold'].data\n"], ["pycodestyle", "E501", 285, 80, "line too long (113 > 80 characters)", "            self.head2_backend[i].synapse.weight_g.data = saved_model[f'head2_backend.{i}.synapse.weight_g'].data\n"], ["pycodestyle", "E501", 286, 80, "line too long (113 > 80 characters)", "            self.head2_backend[i].synapse.weight_v.data = saved_model[f'head2_backend.{i}.synapse.weight_v'].data\n"], ["pycodestyle", "E501", 292, 80, "line too long (83 > 80 characters)", "            if f'head2_backend.{i}.neuron.norm.running_mean' in saved_model.keys():\n"], ["pycodestyle", "E501", 294, 80, "line too long (133 > 80 characters)", "                self.head2_backend[i].neuron.norm.running_mean.data = saved_model[f'head2_backend.{i}.neuron.norm.running_mean'].data\n"], ["pycodestyle", "E501", 298, 80, "line too long (97 > 80 characters)", "        self.head1_blocks[i].neuron.bias.data = saved_model[f'head1_blocks.{i}.neuron.bias'].data\n"], ["pycodestyle", "E501", 299, 80, "line too long (123 > 80 characters)", "        self.head1_blocks[i].neuron.norm.running_mean.data = saved_model[f'head1_blocks.{i}.neuron.norm.running_mean'].data\n"], ["pycodestyle", "E501", 300, 80, "line too long (119 > 80 characters)", "        self.head1_blocks[i].neuron.delta.threshold.data = saved_model[f'head1_blocks.{i}.neuron.delta.threshold'].data\n"], ["pycodestyle", "E501", 301, 80, "line too long (107 > 80 characters)", "        self.head1_blocks[i].synapse.weight_g.data = saved_model[f'head1_blocks.{i}.synapse.weight_g'].data\n"], ["pycodestyle", "E501", 302, 80, "line too long (107 > 80 characters)", "        self.head1_blocks[i].synapse.weight_v.data = saved_model[f'head1_blocks.{i}.synapse.weight_v'].data\n"], ["pycodestyle", "E501", 309, 80, "line too long (97 > 80 characters)", "        self.head2_blocks[i].neuron.bias.data = saved_model[f'head2_blocks.{i}.neuron.bias'].data\n"], ["pycodestyle", "E501", 310, 80, "line too long (123 > 80 characters)", "        self.head2_blocks[i].neuron.norm.running_mean.data = saved_model[f'head2_blocks.{i}.neuron.norm.running_mean'].data\n"], ["pycodestyle", "E501", 311, 80, "line too long (119 > 80 characters)", "        self.head2_blocks[i].neuron.delta.threshold.data = saved_model[f'head2_blocks.{i}.neuron.delta.threshold'].data\n"], ["pycodestyle", "E501", 312, 80, "line too long (107 > 80 characters)", "        self.head2_blocks[i].synapse.weight_g.data = saved_model[f'head2_blocks.{i}.synapse.weight_g'].data\n"], ["pycodestyle", "E501", 313, 80, "line too long (107 > 80 characters)", "        self.head2_blocks[i].synapse.weight_v.data = saved_model[f'head2_blocks.{i}.synapse.weight_v'].data\n"], ["pycodestyle", "E501", 320, 80, "line too long (102 > 80 characters)", "        if self.head1_blocks[1].weight.data.shape == saved_model[f'head1_blocks.1.weight'].data.shape:\n"], ["pycodestyle", "E501", 321, 80, "line too long (89 > 80 characters)", "            self.head1_blocks[1].weight.data = saved_model[f'head1_blocks.1.weight'].data\n"], ["pycodestyle", "E501", 322, 80, "line too long (89 > 80 characters)", "            self.head2_blocks[1].weight.data = saved_model[f'head2_blocks.1.weight'].data\n"], ["pycodestyle", "W503", 222, 20, "line break before binary operator", "                    and b.synapse.weight.requires_grad]\n"]], "digest": "ddcd56386bd8fefd76ad18ad24f5f080"}