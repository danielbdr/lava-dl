{"results": [["pycodestyle", "E121", 82, 12, "continuation line under-indented for hanging indent", "            )\n"], ["pycodestyle", "E126", 78, 16, "continuation line over-indented for hanging indent", "                counts[l-1]\n"], ["pycodestyle", "E225", 112, 12, "missing whitespace around operator", "        if l==0:\n"], ["pycodestyle", "E226", 33, 35, "missing whitespace around arithmetic operator", "            param_group['lr'] /= 10/3\n"], ["pycodestyle", "E226", 78, 24, "missing whitespace around arithmetic operator", "                counts[l-1]\n"], ["pycodestyle", "E226", 84, 37, "missing whitespace around arithmetic operator", "        ann_synops.append(conv_synops*np.prod(net.blocks[l-1].shape)/counts[l-1])\n"], ["pycodestyle", "E226", 84, 58, "missing whitespace around arithmetic operator", "        ann_synops.append(conv_synops*np.prod(net.blocks[l-1].shape)/counts[l-1])\n"], ["pycodestyle", "E226", 84, 68, "missing whitespace around arithmetic operator", "        ann_synops.append(conv_synops*np.prod(net.blocks[l-1].shape)/counts[l-1])\n"], ["pycodestyle", "E226", 84, 77, "missing whitespace around arithmetic operator", "        ann_synops.append(conv_synops*np.prod(net.blocks[l-1].shape)/counts[l-1])\n"], ["pycodestyle", "E226", 87, 20, "missing whitespace around arithmetic operator", "    for l in range(l+1, len(net.blocks)):\n"], ["pycodestyle", "E226", 88, 28, "missing whitespace around arithmetic operator", "        fc_synops = counts[l-2] * net.blocks[l].synapse.out_channels\n"], ["pycodestyle", "E226", 90, 35, "missing whitespace around arithmetic operator", "        ann_synops.append(fc_synops*np.prod(net.blocks[l-1].shape)/counts[l-2])\n"], ["pycodestyle", "E226", 90, 56, "missing whitespace around arithmetic operator", "        ann_synops.append(fc_synops*np.prod(net.blocks[l-1].shape)/counts[l-2])\n"], ["pycodestyle", "E226", 90, 66, "missing whitespace around arithmetic operator", "        ann_synops.append(fc_synops*np.prod(net.blocks[l-1].shape)/counts[l-2])\n"], ["pycodestyle", "E226", 90, 75, "missing whitespace around arithmetic operator", "        ann_synops.append(fc_synops*np.prod(net.blocks[l-1].shape)/counts[l-2])\n"], ["pycodestyle", "E226", 101, 18, "missing whitespace around arithmetic operator", "    print('|', ' '*23,                 '|          SDNN           |           ANN           |')\n"], ["pycodestyle", "E226", 103, 18, "missing whitespace around arithmetic operator", "    print('|', ' '*7, f'|     Shape     |  Events  |    Synops    | Activations|    MACs    |')\n"], ["pycodestyle", "E241", 101, 22, "multiple spaces after ','", "    print('|', ' '*23,                 '|          SDNN           |           ANN           |')\n"], ["pycodestyle", "E261", 49, 106, "at least two spaces before inline comment", "        self.stats.training.loss_sum += (loss - self.lam * event_loss).cpu().data.item() * output.shape[0] # save only the mean square value\n"], ["pycodestyle", "E261", 64, 109, "at least two spaces before inline comment", "            self.stats.testing.loss_sum += (loss - self.lam * event_loss).cpu().data.item() * output.shape[0] # save only the mean square value\n"], ["pycodestyle", "E261", 77, 23, "at least two spaces before inline comment", "        conv_synops = ( # ignoring padding\n"], ["pycodestyle", "E302", 22, 0, "expected 2 blank lines, found 1", "class Assistant:\n"], ["pycodestyle", "E302", 68, 0, "expected 2 blank lines, found 1", "def compare_ops(net, counts, mse):\n"], ["pycodestyle", "E401", 14, 10, "multiple imports on one line", "import sys, os\n"], ["pycodestyle", "E501", 42, 80, "line too long (91 > 80 characters)", "        loss = F.mse_loss(output.flatten(), ground_truth.flatten()) + self.lam * event_loss\n"], ["pycodestyle", "E501", 49, 80, "line too long (140 > 80 characters)", "        self.stats.training.loss_sum += (loss - self.lam * event_loss).cpu().data.item() * output.shape[0] # save only the mean square value\n"], ["pycodestyle", "E501", 61, 80, "line too long (95 > 80 characters)", "            loss = F.mse_loss(output.flatten(), ground_truth.flatten()) + self.lam * event_loss\n"], ["pycodestyle", "E501", 64, 80, "line too long (143 > 80 characters)", "            self.stats.testing.loss_sum += (loss - self.lam * event_loss).cpu().data.item() * output.shape[0] # save only the mean square value\n"], ["pycodestyle", "E501", 84, 80, "line too long (81 > 80 characters)", "        ann_synops.append(conv_synops*np.prod(net.blocks[l-1].shape)/counts[l-1])\n"], ["pycodestyle", "E501", 101, 80, "line too long (95 > 80 characters)", "    print('|', ' '*23,                 '|          SDNN           |           ANN           |')\n"], ["pycodestyle", "E501", 103, 80, "line too long (95 > 80 characters)", "    print('|', ' '*7, f'|     Shape     |  Events  |    Synops    | Activations|    MACs    |')\n"], ["pycodestyle", "E501", 115, 80, "line too long (103 > 80 characters)", "            print(f'{sdnn_synops[l-1]:12.2f} | {np.prod(shapes[l]):10.0f} | {ann_synops[l-1]:10.0f} |')\n"], ["pycodestyle", "E501", 117, 80, "line too long (135 > 80 characters)", "    print(f'|  Total  | {\" \"*13} | {total_events:8.2f} | {total_synops:12.2f} | {total_ann_activs:10.0f} | {total_ann_synops:10.0f} |')\n"], ["pycodestyle", "E701", 107, 30, "multiple statements on one line (colon)", "        if len(shapes[l]) == 3: z, y, x = shapes[l]\n"], ["pycodestyle", "E741", 74, 8, "ambiguous variable name 'l'", "    for l in range(1, len(net.blocks)):\n"], ["pycodestyle", "E741", 87, 8, "ambiguous variable name 'l'", "    for l in range(l+1, len(net.blocks)):\n"], ["pycodestyle", "E741", 105, 8, "ambiguous variable name 'l'", "    for l in range(len(counts)):\n"], ["pycodestyle", "E741", 112, 11, "ambiguous variable name 'l'", "        if l==0:\n"], ["pycodestyle", "W291", 2, 1, "trailing whitespace", "# \n"], ["pycodestyle", "W291", 4, 60, "trailing whitespace", "# materials, and your use of them is governed by the express \n"], ["pycodestyle", "W291", 6, 64, "trailing whitespace", "# the License provides otherwise, you may not use, modify, copy, \n"], ["pycodestyle", "W291", 9, 1, "trailing whitespace", "# \n"], ["pycodestyle", "W291", 11, 61, "trailing whitespace", "# no express or implied warranties, other than those that are \n"], ["pycodestyle", "W291", 31, 55, "trailing whitespace", "        for param_group in self.optimizer.param_groups:    \n"], ["pycodestyle", "W293", 34, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 37, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 52, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 55, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 86, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W503", 79, 16, "line break before binary operator", "                * net.blocks[l].synapse.out_channels\n"], ["pycodestyle", "W503", 80, 16, "line break before binary operator", "                * np.prod(net.blocks[l].synapse.kernel_size)\n"], ["pycodestyle", "W503", 81, 16, "line break before binary operator", "                / np.prod(net.blocks[l].synapse.stride)\n"]], "digest": "95ccd4317529abb21764cfb319cac390"}