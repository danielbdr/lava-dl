{"results": [["pycodestyle", "E127", 275, 40, "continuation line over-indented for visual indent", "                                        loss_distr[loss_idx].item(),\n"], ["pycodestyle", "E127", 276, 40, "continuation line over-indented for visual indent", "                                        len(loss_tracker[loss_key]) - 1)\n"], ["pycodestyle", "E127", 360, 28, "continuation line over-indented for visual indent", "                            transforms.PILToTensor()(marked_images),\n"], ["pycodestyle", "E127", 361, 28, "continuation line over-indented for visual indent", "                            epoch)\n"], ["pycodestyle", "E241", 23, 29, "multiple spaces after ','", "    parser.add_argument('-b',   type=int, default=32,  help='batch size for dataloader')\n"], ["pycodestyle", "E241", 23, 53, "multiple spaces after ','", "    parser.add_argument('-b',   type=int, default=32,  help='batch size for dataloader')\n"], ["pycodestyle", "E241", 29, 34, "multiple spaces after ','", "    parser.add_argument('-sp_lam',   type=float, default=0.01, help='sparsity loss mixture ratio')\n"], ["pycodestyle", "E241", 30, 35, "multiple spaces after ','", "    parser.add_argument('-sp_rate',  type=float, default=0.01, help='minimum rate for sparsity penalization')\n"], ["pycodestyle", "E241", 32, 30, "multiple spaces after ','", "    parser.add_argument('-lr',  type=float, default=0.0001, help='initial learning rate')\n"], ["pycodestyle", "E241", 33, 30, "multiple spaces after ','", "    parser.add_argument('-wd',  type=float, default=1e-5,   help='optimizer weight decay')\n"], ["pycodestyle", "E241", 33, 57, "multiple spaces after ','", "    parser.add_argument('-wd',  type=float, default=1e-5,   help='optimizer weight decay')\n"], ["pycodestyle", "E241", 34, 57, "multiple spaces after ','", "    parser.add_argument('-lrf', type=float, default=0.01,   help='learning rate reduction factor for lr scheduler')\n"], ["pycodestyle", "E241", 36, 37, "multiple spaces after ','", "    parser.add_argument('-threshold',  type=float, default=0.1, help='neuron threshold')\n"], ["pycodestyle", "E241", 37, 36, "multiple spaces after ','", "    parser.add_argument('-tau_grad',   type=float, default=0.1, help='surrogate gradient time constant')\n"], ["pycodestyle", "E241", 39, 32, "multiple spaces after ','", "    parser.add_argument('-clip',       type=float, default=10, help='gradient clipping limit')\n"], ["pycodestyle", "E241", 45, 40, "multiple spaces after ','", "    parser.add_argument('-lambda_coord',    type=float, default=1.0, help='YOLO coordinate loss lambda')\n"], ["pycodestyle", "E241", 46, 40, "multiple spaces after ','", "    parser.add_argument('-lambda_noobj',    type=float, default=2.0, help='YOLO no-object loss lambda')\n"], ["pycodestyle", "E241", 47, 38, "multiple spaces after ','", "    parser.add_argument('-lambda_obj',      type=float, default=2.0, help='YOLO object loss lambda')\n"], ["pycodestyle", "E241", 48, 38, "multiple spaces after ','", "    parser.add_argument('-lambda_cls',      type=float, default=4.0, help='YOLO class loss lambda')\n"], ["pycodestyle", "E241", 49, 38, "multiple spaces after ','", "    parser.add_argument('-lambda_iou',      type=float, default=2.0, help='YOLO iou loss lambda')\n"], ["pycodestyle", "E241", 50, 37, "multiple spaces after ','", "    parser.add_argument('-alpha_iou',       type=float, default=0.8, help='YOLO loss object target iou mixture factor')\n"], ["pycodestyle", "E241", 52, 38, "multiple spaces after ','", "    parser.add_argument('-track_iter',      type=int,  default=1000, help='YOLO loss tracking interval')\n"], ["pycodestyle", "E241", 52, 53, "multiple spaces after ','", "    parser.add_argument('-track_iter',      type=int,  default=1000, help='YOLO loss tracking interval')\n"], ["pycodestyle", "E241", 54, 31, "multiple spaces after ','", "    parser.add_argument('-exp',  type=str, default='',   help='experiment differentiater string')\n"], ["pycodestyle", "E241", 54, 54, "multiple spaces after ','", "    parser.add_argument('-exp',  type=str, default='',   help='experiment differentiater string')\n"], ["pycodestyle", "E241", 57, 33, "multiple spaces after ','", "    parser.add_argument('-epoch',  type=int, default=200, help='number of epochs to run')\n"], ["pycodestyle", "E241", 58, 56, "multiple spaces after ','", "    parser.add_argument('-warmup', type=int, default=10,  help='number of epochs to warmup')\n"], ["pycodestyle", "E241", 60, 35, "multiple spaces after ','", "    parser.add_argument('-dataset',     type=str,   default='BDD100K', help='dataset to use [BDD100K]')\n"], ["pycodestyle", "E241", 60, 49, "multiple spaces after ','", "    parser.add_argument('-dataset',     type=str,   default='BDD100K', help='dataset to use [BDD100K]')\n"], ["pycodestyle", "E241", 61, 32, "multiple spaces after ','", "    parser.add_argument('-path',        type=str,   default='data/bdd100k', help='dataset path')\n"], ["pycodestyle", "E241", 61, 49, "multiple spaces after ','", "    parser.add_argument('-path',        type=str,   default='data/bdd100k', help='dataset path')\n"], ["pycodestyle", "E241", 62, 38, "multiple spaces after ','", "    parser.add_argument('-output_dir',  type=str,   default='.', help='directory in which to put log folders')\n"], ["pycodestyle", "E241", 62, 49, "multiple spaces after ','", "    parser.add_argument('-output_dir',  type=str,   default='.', help='directory in which to put log folders')\n"], ["pycodestyle", "E241", 63, 49, "multiple spaces after ','", "    parser.add_argument('-num_workers', type=int,   default=16, help='number of dataloader workers')\n"], ["pycodestyle", "E241", 64, 36, "multiple spaces after ','", "    parser.add_argument('-aug_prob',    type=float, default=0.2, help='training augmentation probability')\n"], ["pycodestyle", "E241", 65, 37, "multiple spaces after ','", "    parser.add_argument('-clamp_max',   type=float, default=5.0, help='exponential clamp in height/width calculation')\n"], ["pycodestyle", "E501", 22, 80, "line too long (93 > 80 characters)", "    parser.add_argument('-gpu', type=int, default=[0], help='which gpu(s) to use', nargs='+')\n"], ["pycodestyle", "E501", 23, 80, "line too long (88 > 80 characters)", "    parser.add_argument('-b',   type=int, default=32,  help='batch size for dataloader')\n"], ["pycodestyle", "E501", 24, 80, "line too long (103 > 80 characters)", "    parser.add_argument('-verbose', default=False, action='store_true', help='lots of debug printouts')\n"], ["pycodestyle", "E501", 26, 80, "line too long (92 > 80 characters)", "    parser.add_argument('-model', type=str, default='tiny_yolov3_str', help='network model')\n"], ["pycodestyle", "E501", 28, 80, "line too long (101 > 80 characters)", "    parser.add_argument('-sparsity', action='store_true', default=False, help='enable sparsity loss')\n"], ["pycodestyle", "E501", 29, 80, "line too long (98 > 80 characters)", "    parser.add_argument('-sp_lam',   type=float, default=0.01, help='sparsity loss mixture ratio')\n"], ["pycodestyle", "E501", 30, 80, "line too long (109 > 80 characters)", "    parser.add_argument('-sp_rate',  type=float, default=0.01, help='minimum rate for sparsity penalization')\n"], ["pycodestyle", "E501", 32, 80, "line too long (89 > 80 characters)", "    parser.add_argument('-lr',  type=float, default=0.0001, help='initial learning rate')\n"], ["pycodestyle", "E501", 33, 80, "line too long (90 > 80 characters)", "    parser.add_argument('-wd',  type=float, default=1e-5,   help='optimizer weight decay')\n"], ["pycodestyle", "E501", 34, 80, "line too long (115 > 80 characters)", "    parser.add_argument('-lrf', type=float, default=0.01,   help='learning rate reduction factor for lr scheduler')\n"], ["pycodestyle", "E501", 36, 80, "line too long (88 > 80 characters)", "    parser.add_argument('-threshold',  type=float, default=0.1, help='neuron threshold')\n"], ["pycodestyle", "E501", 37, 80, "line too long (104 > 80 characters)", "    parser.add_argument('-tau_grad',   type=float, default=0.1, help='surrogate gradient time constant')\n"], ["pycodestyle", "E501", 38, 80, "line too long (96 > 80 characters)", "    parser.add_argument('-scale_grad', type=float, default=0.2, help='surrogate gradient scale')\n"], ["pycodestyle", "E501", 39, 80, "line too long (94 > 80 characters)", "    parser.add_argument('-clip',       type=float, default=10, help='gradient clipping limit')\n"], ["pycodestyle", "E501", 43, 80, "line too long (114 > 80 characters)", "    parser.add_argument('-tgt_iou_thr', type=float, default=0.5, help='ignore iou threshold in target generation')\n"], ["pycodestyle", "E501", 45, 80, "line too long (104 > 80 characters)", "    parser.add_argument('-lambda_coord',    type=float, default=1.0, help='YOLO coordinate loss lambda')\n"], ["pycodestyle", "E501", 46, 80, "line too long (103 > 80 characters)", "    parser.add_argument('-lambda_noobj',    type=float, default=2.0, help='YOLO no-object loss lambda')\n"], ["pycodestyle", "E501", 47, 80, "line too long (100 > 80 characters)", "    parser.add_argument('-lambda_obj',      type=float, default=2.0, help='YOLO object loss lambda')\n"], ["pycodestyle", "E501", 48, 80, "line too long (99 > 80 characters)", "    parser.add_argument('-lambda_cls',      type=float, default=4.0, help='YOLO class loss lambda')\n"], ["pycodestyle", "E501", 49, 80, "line too long (97 > 80 characters)", "    parser.add_argument('-lambda_iou',      type=float, default=2.0, help='YOLO iou loss lambda')\n"], ["pycodestyle", "E501", 50, 80, "line too long (119 > 80 characters)", "    parser.add_argument('-alpha_iou',       type=float, default=0.8, help='YOLO loss object target iou mixture factor')\n"], ["pycodestyle", "E501", 51, 80, "line too long (117 > 80 characters)", "    parser.add_argument('-label_smoothing', type=float, default=0.1, help='YOLO class cross entropy label smoothing')\n"], ["pycodestyle", "E501", 52, 80, "line too long (104 > 80 characters)", "    parser.add_argument('-track_iter',      type=int,  default=1000, help='YOLO loss tracking interval')\n"], ["pycodestyle", "E501", 54, 80, "line too long (97 > 80 characters)", "    parser.add_argument('-exp',  type=str, default='',   help='experiment differentiater string')\n"], ["pycodestyle", "E501", 55, 80, "line too long (94 > 80 characters)", "    parser.add_argument('-seed', type=int, default=None, help='random seed of the experiment')\n"], ["pycodestyle", "E501", 57, 80, "line too long (89 > 80 characters)", "    parser.add_argument('-epoch',  type=int, default=200, help='number of epochs to run')\n"], ["pycodestyle", "E501", 58, 80, "line too long (92 > 80 characters)", "    parser.add_argument('-warmup', type=int, default=10,  help='number of epochs to warmup')\n"], ["pycodestyle", "E501", 60, 80, "line too long (103 > 80 characters)", "    parser.add_argument('-dataset',     type=str,   default='BDD100K', help='dataset to use [BDD100K]')\n"], ["pycodestyle", "E501", 61, 80, "line too long (96 > 80 characters)", "    parser.add_argument('-path',        type=str,   default='data/bdd100k', help='dataset path')\n"], ["pycodestyle", "E501", 62, 80, "line too long (110 > 80 characters)", "    parser.add_argument('-output_dir',  type=str,   default='.', help='directory in which to put log folders')\n"], ["pycodestyle", "E501", 63, 80, "line too long (100 > 80 characters)", "    parser.add_argument('-num_workers', type=int,   default=16, help='number of dataloader workers')\n"], ["pycodestyle", "E501", 64, 80, "line too long (106 > 80 characters)", "    parser.add_argument('-aug_prob',    type=float, default=0.2, help='training augmentation probability')\n"], ["pycodestyle", "E501", 65, 80, "line too long (118 > 80 characters)", "    parser.add_argument('-clamp_max',   type=float, default=5.0, help='exponential clamp in height/width calculation')\n"], ["pycodestyle", "E501", 69, 80, "line too long (81 > 80 characters)", "    identifier = f'{args.model}_' + args.exp if len(args.exp) > 0 else args.model\n"], ["pycodestyle", "E501", 113, 80, "line too long (85 > 80 characters)", "                                            num_classes=classes_output[args.dataset],\n"], ["pycodestyle", "E501", 114, 80, "line too long (81 > 80 characters)", "                                            clamp_max=args.clamp_max).to(device),\n"], ["pycodestyle", "E501", 128, 80, "line too long (98 > 80 characters)", "            saved_model = slayer.obd.models.__path__[0] + '/Trained_' + args.model + '/network.pt'\n"], ["pycodestyle", "W293", 101, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W503", 143, 16, "line break before binary operator", "                * ((1 + np.cos(x * np.pi / args.epoch)) / 2)\n"], ["pycodestyle", "W503", 144, 16, "line break before binary operator", "                * (1 - args.lrf)\n"], ["pycodestyle", "W503", 145, 16, "line break before binary operator", "                + args.lrf)\n"], ["pycodestyle", "W503", 261, 28, "line break before binary operator", "                            + ', '.join([f'{c.item():.2f}'\n"], ["pycodestyle", "W503", 310, 32, "line break before binary operator", "                                + ', '.join([f'{c.item():.2f}'\n"]], "digest": "c2c937feed62f9fce25448c1f5da9e6a"}