{"results": [["pycodestyle", "E127", 74, 40, "continuation line over-indented for visual indent", "                                        jitter_direction[1] *\n"], ["pycodestyle", "E127", 75, 40, "continuation line over-indented for visual indent", "                                        (jitter_direction[1] > 0),\n"], ["pycodestyle", "E127", 76, 40, "continuation line over-indented for visual indent", "                                        - jitter_direction[0] *\n"], ["pycodestyle", "E127", 78, 40, "continuation line over-indented for visual indent", "                                        - jitter_direction[1] * (jitter_direction[1] < 0)))(image.squeeze())\n"], ["pycodestyle", "E501", 73, 80, "line too long (86 > 80 characters)", "    image_s = transforms.Pad(padding=(jitter_direction[0] * (jitter_direction[0] > 0),\n"], ["pycodestyle", "E501", 78, 80, "line too long (108 > 80 characters)", "                                        - jitter_direction[1] * (jitter_direction[1] < 0)))(image.squeeze())\n"], ["pycodestyle", "E501", 80, 80, "line too long (125 > 80 characters)", "    ii = image_s[:, -jitter_direction[1] * (jitter_direction[1] < 0):SS[0] - jitter_direction[1] * (jitter_direction[1] < 0),\n"], ["pycodestyle", "E501", 81, 80, "line too long (126 > 80 characters)", "                    - jitter_direction[0] * (jitter_direction[0] < 0):SS[1] - jitter_direction[0] * (jitter_direction[0] < 0)]\n"], ["flake8-bandit", "S311", 69, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        jitter_direction = random.randrange(-x, x), random.randrange(-y, y)\n"], ["flake8-bandit", "S311", 69, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        jitter_direction = random.randrange(-x, x), random.randrange(-y, y)\n"], ["pycodestyle", "W291", 50, 75, "trailing whitespace", "    \"\"\"Subtracts a randmly jittered PIL image by itself.\n    SLP: This method implement the Saccadic Like Perception (SLP) by mimicking\n    on static images the response of the retinal ganglion cells that return \n    contours of the moving objects w.r.t. the observer. It is meant as a \n    training utility when intending to train on DVS like camera data. \n\n    Parameters\n    ----------\n    image : Image\n        Input image.\n    max_pixel_displacement_perc: float\n        percentage of random jittering in the x and y image dimensions\n\n    Returns\n    -------\n    Image\n        Flipped image.\n    \"\"\"\n"], ["pycodestyle", "W291", 51, 72, "trailing whitespace", "    \"\"\"Subtracts a randmly jittered PIL image by itself.\n    SLP: This method implement the Saccadic Like Perception (SLP) by mimicking\n    on static images the response of the retinal ganglion cells that return \n    contours of the moving objects w.r.t. the observer. It is meant as a \n    training utility when intending to train on DVS like camera data. \n\n    Parameters\n    ----------\n    image : Image\n        Input image.\n    max_pixel_displacement_perc: float\n        percentage of random jittering in the x and y image dimensions\n\n    Returns\n    -------\n    Image\n        Flipped image.\n    \"\"\"\n"], ["pycodestyle", "W291", 52, 69, "trailing whitespace", "    \"\"\"Subtracts a randmly jittered PIL image by itself.\n    SLP: This method implement the Saccadic Like Perception (SLP) by mimicking\n    on static images the response of the retinal ganglion cells that return \n    contours of the moving objects w.r.t. the observer. It is meant as a \n    training utility when intending to train on DVS like camera data. \n\n    Parameters\n    ----------\n    image : Image\n        Input image.\n    max_pixel_displacement_perc: float\n        percentage of random jittering in the x and y image dimensions\n\n    Returns\n    -------\n    Image\n        Flipped image.\n    \"\"\"\n"], ["pycodestyle", "W504", 66, 43, "line break after binary operator", "    x, y = (torch.tensor(image.shape[1:3]) *\n"], ["pycodestyle", "W504", 74, 60, "line break after binary operator", "                                        jitter_direction[1] *\n"], ["pycodestyle", "W504", 76, 62, "line break after binary operator", "                                        - jitter_direction[0] *\n"]], "digest": "85f6067c6c01fc0609630fcb78ec463b"}