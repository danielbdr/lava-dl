{"results": [["pycodestyle", "E226", 21, 81, "missing whitespace around arithmetic operator", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-base / scale, base-2 / scale)\n"], ["pycodestyle", "E226", 23, 81, "missing whitespace around arithmetic operator", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-base / scale, base-2 / scale) * scale\n"], ["pycodestyle", "E251", 6, 26, "unexpected spaces around keyword / parameter equals", "def quantize_8bit(x, scale = (1 << 6), descale=False):\n"], ["pycodestyle", "E251", 6, 28, "unexpected spaces around keyword / parameter equals", "def quantize_8bit(x, scale = (1 << 6), descale=False):\n"], ["pycodestyle", "E251", 12, 26, "unexpected spaces around keyword / parameter equals", "def quantize_5bit(x, scale = (1 << 6), descale=False):\n"], ["pycodestyle", "E251", 12, 28, "unexpected spaces around keyword / parameter equals", "def quantize_5bit(x, scale = (1 << 6), descale=False):\n"], ["pycodestyle", "E251", 18, 26, "unexpected spaces around keyword / parameter equals", "def quantize_Nbit(x, scale = (1 << 6), descale=False, N=8):\n"], ["pycodestyle", "E251", 18, 28, "unexpected spaces around keyword / parameter equals", "def quantize_Nbit(x, scale = (1 << 6), descale=False, N=8):\n"], ["pycodestyle", "E302", 12, 0, "expected 2 blank lines, found 1", "def quantize_5bit(x, scale = (1 << 6), descale=False):\n"], ["pycodestyle", "E302", 18, 0, "expected 2 blank lines, found 1", "def quantize_Nbit(x, scale = (1 << 6), descale=False, N=8):\n"], ["pycodestyle", "E302", 25, 0, "expected 2 blank lines, found 1", "def event_rate(x):\n"], ["pycodestyle", "E302", 31, 0, "expected 2 blank lines, found 1", "class SparsityMonitor:\n"], ["pycodestyle", "E501", 8, 80, "line too long (88 > 80 characters)", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-256 / scale, 254 / scale)\n"], ["pycodestyle", "E501", 10, 80, "line too long (96 > 80 characters)", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-256 / scale, 254 / scale) * scale\n"], ["pycodestyle", "E501", 14, 80, "line too long (86 > 80 characters)", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-32 / scale, 30 / scale)\n"], ["pycodestyle", "E501", 16, 80, "line too long (94 > 80 characters)", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-32 / scale, 30 / scale) * scale\n"], ["pycodestyle", "E501", 21, 80, "line too long (92 > 80 characters)", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-base / scale, base-2 / scale)\n"], ["pycodestyle", "E501", 23, 80, "line too long (100 > 80 characters)", "        return slayer.utils.quantize(x, step=2 / scale).clamp(-base / scale, base-2 / scale) * scale\n"], ["pycodestyle", "E501", 46, 80, "line too long (81 > 80 characters)", "        self.loss_list.append(F.mse_loss(F.relu(mean_event_rate - self.max_rate),\n"]], "digest": "e1f23ecc392808e1e55afb20bda1ba02"}