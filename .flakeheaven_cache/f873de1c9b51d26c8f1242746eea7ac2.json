{"results": [["pycodestyle", "E121", 112, 12, "continuation line under-indented for hanging indent", "            )\n"], ["pycodestyle", "E121", 130, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 150, 12, "continuation line under-indented for hanging indent", "            ])\n"], ["pycodestyle", "E121", 198, 8, "continuation line under-indented for hanging indent", "        )\n"], ["pycodestyle", "E121", 203, 8, "continuation line under-indented for hanging indent", "        ).to(device)\n"], ["pycodestyle", "E121", 210, 8, "continuation line under-indented for hanging indent", "        )\n"], ["pycodestyle", "E121", 220, 16, "continuation line under-indented for hanging indent", "                ]\n"], ["pycodestyle", "E121", 228, 16, "continuation line under-indented for hanging indent", "                ]\n"], ["pycodestyle", "E126", 110, 16, "continuation line over-indented for hanging indent", "                torch.zeros(2, 34, 34, self.num_time_bins),\n"], ["pycodestyle", "E126", 124, 16, "continuation line over-indented for hanging indent", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E126", 138, 16, "continuation line over-indented for hanging indent", "                slayer.block.cuba.Dense(\n"], ["pycodestyle", "E126", 197, 12, "continuation line over-indented for hanging indent", "            dataset=training_set, batch_size=32, shuffle=True\n"], ["pycodestyle", "E126", 202, 12, "continuation line over-indented for hanging indent", "            true_rate=0.2, false_rate=0.03, reduction='sum'\n"], ["pycodestyle", "E126", 208, 12, "continuation line over-indented for hanging indent", "            net, error, optimizer, stats,\n"], ["pycodestyle", "E126", 218, 20, "continuation line over-indented for hanging indent", "                    'Event rate : ' +\n"], ["pycodestyle", "E126", 226, 20, "continuation line over-indented for hanging indent", "                    'Event rate : ' +\n"], ["pycodestyle", "E203", 124, 31, "whitespace before ':'", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E203", 125, 31, "whitespace before ':'", "                'current_decay' : 0.25,\n"], ["pycodestyle", "E203", 126, 31, "whitespace before ':'", "                'voltage_decay' : 0.03,\n"], ["pycodestyle", "E203", 127, 31, "whitespace before ':'", "                'tau_grad'      : 0.03,\n"], ["pycodestyle", "E203", 128, 31, "whitespace before ':'", "                'scale_grad'    : 3,\n"], ["pycodestyle", "E203", 129, 31, "whitespace before ':'", "                'requires_grad' : False,\n"], ["pycodestyle", "E226", 20, 33, "missing whitespace around arithmetic operator", "    xjitter = np.random.randint(2*x_shift) - x_shift\n"], ["pycodestyle", "E226", 21, 33, "missing whitespace around arithmetic operator", "    yjitter = np.random.randint(2*y_shift) - y_shift\n"], ["pycodestyle", "E226", 75, 27, "missing whitespace around arithmetic operator", "            attribution_text = '''\nNMNIST dataset is freely available here:\nhttps://www.garrickorchard.com/datasets/n-mnist\n\n(c) Creative Commons:\n    Orchard, G.; Cohen, G.; Jayawant, A.; and Thakor, N.\n    \"Converting Static Image Datasets to Spiking Neuromorphic Datasets Using\n    Saccades\",\n    Frontiers in Neuroscience, vol.9, no.437, Oct. 2015\n            '''.replace(' '*12, '')\n"], ["pycodestyle", "E226", 100, 46, "missing whitespace around arithmetic operator", "        self.num_time_bins = int(sample_length/sampling_time)\n"], ["pycodestyle", "E226", 139, 42, "missing whitespace around arithmetic operator", "                    neuron_params_drop, 34*34*2, 512,\n"], ["pycodestyle", "E226", 139, 45, "missing whitespace around arithmetic operator", "                    neuron_params_drop, 34*34*2, 512,\n"], ["flake8-bandit", "S101", 92, 0, "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.", "            assert len(glob.glob(f'{data_path}/')) == 0, \\\n                f'Dataset does not exist. Either set download=True '\\\n                f'or download it from '\\\n                f'https://www.garrickorchard.com/datasets/n-mnist '\\\n                f'to {data_path}/'\n"], ["flake8-bandit", "S605", 85, 0, "Starting a process with a shell, possible injection detected, security issue.", "                os.system(f'wget {source} -P {self.path}/ -q --show-progress')\n"], ["pycodestyle", "W504", 218, 36, "line break after binary operator", "                    'Event rate : ' +\n"], ["pycodestyle", "W504", 226, 36, "line break after binary operator", "                    'Event rate : ' +\n"]], "digest": "253246436f97cb29bc8bbac02506bdc3"}