{"results": [["pycodestyle", "E121", 24, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 29, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 46, 12, "continuation line under-indented for hanging indent", "            ])\n"], ["pycodestyle", "E121", 110, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 119, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 145, 12, "continuation line under-indented for hanging indent", "            ).data.item()\n"], ["pycodestyle", "E121", 168, 16, "continuation line under-indented for hanging indent", "                )\n"], ["pycodestyle", "E121", 177, 12, "continuation line under-indented for hanging indent", "            ).data.item()\n"], ["pycodestyle", "E122", 154, 16, "continuation line missing indentation or outdented", "                [f'{c.item():.4f}' for c in count.flatten()]\n"], ["pycodestyle", "E122", 155, 12, "continuation line missing indentation or outdented", "            )]\n"], ["pycodestyle", "E122", 182, 16, "continuation line missing indentation or outdented", "                [f'{c.item():.4f}' for c in count.flatten()]\n"], ["pycodestyle", "E122", 183, 12, "continuation line missing indentation or outdented", "            )]\n"], ["pycodestyle", "E126", 19, 16, "continuation line over-indented for hanging indent", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E126", 26, 16, "continuation line over-indented for hanging indent", "                **neuron_params, \n"], ["pycodestyle", "E126", 32, 16, "continuation line over-indented for hanging indent", "                # enable affine transform at input\n"], ["pycodestyle", "E126", 97, 8, "continuation line over-indented for hanging indent", "        root='data/',\n"], ["pycodestyle", "E126", 113, 8, "continuation line over-indented for hanging indent", "        root='data/',\n"], ["pycodestyle", "E126", 144, 16, "continuation line over-indented for hanging indent", "                prediction == label\n"], ["pycodestyle", "E126", 153, 16, "continuation line over-indented for hanging indent", "                'Event rate : ' + ', '.join(\n"], ["pycodestyle", "E126", 166, 20, "continuation line over-indented for hanging indent", "                    input, \n"], ["pycodestyle", "E126", 176, 16, "continuation line over-indented for hanging indent", "                prediction == label\n"], ["pycodestyle", "E126", 181, 16, "continuation line over-indented for hanging indent", "                'Event rate : ' + ', '.join(\n"], ["pycodestyle", "E128", 69, 12, "continuation line under-indented for visual indent", "        grad = [b.synapse.grad_norm for b in self.blocks \\\n            if hasattr(b, 'synapse')]\n"], ["pycodestyle", "E203", 19, 31, "whitespace before ':'", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E203", 20, 31, "whitespace before ':'", "                'current_decay' : 1, # this must be 1 to use batchnorm\n"], ["pycodestyle", "E203", 21, 31, "whitespace before ':'", "                'voltage_decay' : 0.03,\n"], ["pycodestyle", "E203", 22, 31, "whitespace before ':'", "                'tau_grad'      : 1,\n"], ["pycodestyle", "E203", 23, 31, "whitespace before ':'", "                'scale_grad'    : 1,\n"], ["pycodestyle", "E203", 122, 45, "whitespace before ','", "test_loader  = DataLoader(dataset=testing_set , batch_size=32, shuffle=True)\n"], ["pycodestyle", "E221", 122, 11, "multiple spaces before operator", "test_loader  = DataLoader(dataset=testing_set , batch_size=32, shuffle=True)\n"], ["pycodestyle", "E226", 35, 42, "missing whitespace around arithmetic operator", "                    neuron_params_drop, 28*28, 512, \n"], ["pycodestyle", "E261", 20, 36, "at least two spaces before inline comment", "                'current_decay' : 1, # this must be 1 to use batchnorm\n"], ["pycodestyle", "E305", 85, 0, "expected 2 blank lines after class or function definition, found 1", "trained_folder = 'Trained'\n"], ["pycodestyle", "E502", 68, 57, "the backslash is redundant between brackets", "        grad = [b.synapse.grad_norm for b in self.blocks \\\n            if hasattr(b, 'synapse')]\n"], ["pycodestyle", "W291", 26, 32, "trailing whitespace", "                **neuron_params, \n"], ["pycodestyle", "W291", 33, 76, "trailing whitespace", "                bootstrap.block.cuba.Input(neuron_params, weight=1, bias=0), \n"], ["pycodestyle", "W291", 35, 51, "trailing whitespace", "                    neuron_params_drop, 28*28, 512, \n"], ["pycodestyle", "W291", 39, 49, "trailing whitespace", "                    neuron_params_drop, 512, 512, \n"], ["pycodestyle", "W291", 43, 43, "trailing whitespace", "                    neuron_params, 512, 10, \n"], ["pycodestyle", "W291", 89, 29, "trailing whitespace", "device = torch.device('cuda') \n"], ["pycodestyle", "W291", 101, 27, "trailing whitespace", "                degrees=10, \n"], ["pycodestyle", "W291", 143, 52, "trailing whitespace", "        stats.training.correct_samples += torch.sum( \n"], ["pycodestyle", "W291", 166, 26, "trailing whitespace", "                    input, \n"], ["pycodestyle", "W293", 30, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W391", 195, 0, "blank line at end of file", "\n"]], "digest": "6ddff600a31273f770b4a6bdae1c1f95"}