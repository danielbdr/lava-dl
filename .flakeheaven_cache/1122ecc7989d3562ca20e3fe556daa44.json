{"results": [["pycodestyle", "E127", 102, 26, "continuation line over-indented for visual indent", "                          tau_grad=0.1,\n"], ["pycodestyle", "E127", 103, 26, "continuation line over-indented for visual indent", "                          scale_grad=0.2,\n"], ["pycodestyle", "E127", 104, 26, "continuation line over-indented for visual indent", "                          num_classes=80,\n"], ["pycodestyle", "E127", 105, 26, "continuation line over-indented for visual indent", "                          clamp_max=5).to(device)\n"], ["pycodestyle", "E127", 368, 34, "continuation line over-indented for visual indent", "                                  k, model[k], network_path[k])) for k in range(n_heads)]       \n"], ["pycodestyle", "E128", 73, 26, "continuation line under-indented for visual indent", "                          tau_grad=0.1,\n"], ["pycodestyle", "E128", 74, 26, "continuation line under-indented for visual indent", "                          scale_grad=0.2,\n"], ["pycodestyle", "E128", 75, 26, "continuation line under-indented for visual indent", "                          num_classes=80,\n"], ["pycodestyle", "E128", 76, 26, "continuation line under-indented for visual indent", "                          clamp_max=5).to(device)\n"], ["pycodestyle", "E128", 172, 26, "continuation line under-indented for visual indent", "                          tau_grad=0.1,\n"], ["pycodestyle", "E128", 173, 26, "continuation line under-indented for visual indent", "                          scale_grad=0.2,\n"], ["pycodestyle", "E128", 174, 26, "continuation line under-indented for visual indent", "                          num_classes=80,\n"], ["pycodestyle", "E128", 175, 26, "continuation line under-indented for visual indent", "                          clamp_max=5).to(device)\n"], ["pycodestyle", "E203", 61, 128, "whitespace before ','", "        print(*[(f'{mk}: {list(mv0.shape)} --> {list(mv.shape)}') for (mk, mv, mv0) in zip(MM.keys(), MM.values(), M0.values())] ,sep='\\n')    \n"], ["pycodestyle", "E225", 32, 20, "missing whitespace around operator", "    if pruningMethod=='random':\n"], ["pycodestyle", "E225", 35, 51, "missing whitespace around operator", "            S[0] = int(S[0]//pruningFactor) if S[0]>1 else S[0]\n"], ["pycodestyle", "E225", 36, 44, "missing whitespace around operator", "            MM[mk] = MM[mk][:S[0], ...] if k<len(MM)-1 else MM[mk]\n"], ["pycodestyle", "E225", 37, 28, "missing whitespace around operator", "            if len(mv.shape)>1:\n"], ["pycodestyle", "E225", 38, 55, "missing whitespace around operator", "                S[1] = int(S[1]//pruningFactor) if S[1]>3 else S[1]\n"], ["pycodestyle", "E225", 42, 56, "missing whitespace around operator", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E225", 47, 38, "missing whitespace around operator", "            pruned_index = sortArgNorm>=len(sortArgNorm)//pruningFactor\n"], ["pycodestyle", "E225", 48, 53, "missing whitespace around operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E225", 50, 29, "missing whitespace around operator", "                check = (S[0]>1)\n"], ["pycodestyle", "E225", 51, 32, "missing whitespace around operator", "                check = 0 if (kk==0 or kk == len(MM)-1 or 'head1_blocks.1.weight' in [*MM.keys()][kk]) else check\n"], ["pycodestyle", "E225", 54, 58, "missing whitespace around operator", "                    tmp = tmp[:,pruned_index_0, ...] if kk==iw and pruned_index_0 is not None else tmp\n"], ["pycodestyle", "E225", 64, 64, "missing whitespace around operator", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E225", 80, 59, "missing whitespace around operator", "    print(summary(module_short, (3, 448, 448))) if logLevel>1 else None\n"], ["pycodestyle", "E225", 109, 53, "missing whitespace around operator", "    print(summary(module, (3, 448, 448))) if logLevel>1 else None\n"], ["pycodestyle", "E225", 119, 21, "missing whitespace around operator", "        check = (S[0]>1)\n"], ["pycodestyle", "E225", 120, 23, "missing whitespace around operator", "        check = 0 if (k==0 or k == len(module_short.state_dict())-1 or param=='head1_blocks.1.weight') else check\n"], ["pycodestyle", "E225", 120, 76, "missing whitespace around operator", "        check = 0 if (k==0 or k == len(module_short.state_dict())-1 or param=='head1_blocks.1.weight') else check\n"], ["pycodestyle", "E225", 122, 85, "missing whitespace around operator", "        name = 'module_short.%s[%s].'%(tuple(name_blk[:2])) + \".\".join(name_blk[2::])+ \".data\" if k>0 else ''    \n"], ["pycodestyle", "E225", 122, 99, "missing whitespace around operator", "        name = 'module_short.%s[%s].'%(tuple(name_blk[:2])) + \".\".join(name_blk[2::])+ \".data\" if k>0 else ''    \n"], ["pycodestyle", "E225", 124, 24, "missing whitespace around operator", "        if pruningMethod=='random':\n"], ["pycodestyle", "E225", 125, 16, "missing whitespace around operator", "            if k==0:\n"], ["pycodestyle", "E225", 131, 21, "missing whitespace around operator", "            if len(S)>1 or (k == len(module_short.state_dict())-1):\n"], ["pycodestyle", "E225", 132, 66, "missing whitespace around operator", "                S[1] = S[1]//pruningFactor if (S[1]%pruningFactor)==0 else S[1]\n"], ["pycodestyle", "E225", 137, 56, "missing whitespace around operator", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E225", 142, 38, "missing whitespace around operator", "            pruned_index = sortArgNorm>=len(sortArgNorm)//pruningFactor\n"], ["pycodestyle", "E225", 143, 53, "missing whitespace around operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E225", 145, 29, "missing whitespace around operator", "                check = (S[0]>1)\n"], ["pycodestyle", "E225", 146, 32, "missing whitespace around operator", "                check = 0 if (kk==0 or kk == len(nameList)-1 or 'head1_blocks.1.weight' in nameList[kk]) else check\n"], ["pycodestyle", "E225", 149, 58, "missing whitespace around operator", "                    tmp = tmp[:,pruned_index_0, ...] if kk==iw and pruned_index_0 is not None else tmp\n"], ["pycodestyle", "E225", 163, 64, "missing whitespace around operator", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E225", 178, 59, "missing whitespace around operator", "    print(summary(module_short, (3, 448, 448))) if logLevel>1 else None\n"], ["pycodestyle", "E225", 193, 41, "missing whitespace around operator", "            a_.append(_a_[0] if type(_a_)==list else _a_)\n"], ["pycodestyle", "E225", 199, 76, "missing whitespace around operator", "    indx = [aa.split(' ')[-1][-13:-1] for aa in arg_list if aa.split(' ')[0]=='output_path']\n"], ["pycodestyle", "E225", 214, 49, "missing whitespace around operator", "    SEARCH_STR = '**/' + ('%s*/**/' if search_pos==1 else '') + ('*%s*/**/' if search_pos==0 else '') + ('*%s' if search_pos==-1 else '')\n"], ["pycodestyle", "E225", 214, 89, "missing whitespace around operator", "    SEARCH_STR = '**/' + ('%s*/**/' if search_pos==1 else '') + ('*%s*/**/' if search_pos==0 else '') + ('*%s' if search_pos==-1 else '')\n"], ["pycodestyle", "E225", 214, 124, "missing whitespace around operator", "    SEARCH_STR = '**/' + ('%s*/**/' if search_pos==1 else '') + ('*%s*/**/' if search_pos==0 else '') + ('*%s' if search_pos==-1 else '')\n"], ["pycodestyle", "E225", 218, 102, "missing whitespace around operator", "    print('ATTENTION: more than 1 entry for final search string pattern: %s'%seedStr) if len(G_extras)>2 else None\n"], ["pycodestyle", "E225", 219, 15, "missing whitespace around operator", "    if G_extras==[]:\n"], ["pycodestyle", "E225", 237, 25, "missing whitespace around operator", "    RL = [RL] if type(RL)!=list else RL      \n"], ["pycodestyle", "E225", 354, 14, "missing whitespace around operator", "    if n_heads>1:\n"], ["pycodestyle", "E225", 409, 19, "missing whitespace around operator", "        if len(RES)>1:\n"], ["pycodestyle", "E225", 410, 36, "missing whitespace around operator", "            if RES[-1][0]-RES[-2][0]<0:\n"], ["pycodestyle", "E225", 415, 14, "missing whitespace around operator", "    if n_heads<3: #no need to test combinations\n"], ["pycodestyle", "E225", 451, 23, "missing whitespace around operator", "            if len(RES)>1:\n"], ["pycodestyle", "E225", 452, 40, "missing whitespace around operator", "                if RES[-1][0]-RES[-2][0]<0:\n"], ["pycodestyle", "E226", 35, 27, "missing whitespace around arithmetic operator", "            S[0] = int(S[0]//pruningFactor) if S[0]>1 else S[0]\n"], ["pycodestyle", "E226", 36, 52, "missing whitespace around arithmetic operator", "            MM[mk] = MM[mk][:S[0], ...] if k<len(MM)-1 else MM[mk]\n"], ["pycodestyle", "E226", 38, 31, "missing whitespace around arithmetic operator", "                S[1] = int(S[1]//pruningFactor) if S[1]>3 else S[1]\n"], ["pycodestyle", "E226", 47, 56, "missing whitespace around arithmetic operator", "            pruned_index = sortArgNorm>=len(sortArgNorm)//pruningFactor\n"], ["pycodestyle", "E226", 48, 43, "missing whitespace around arithmetic operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E226", 48, 46, "missing whitespace around arithmetic operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E226", 48, 66, "missing whitespace around arithmetic operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E226", 51, 52, "missing whitespace around arithmetic operator", "                check = 0 if (kk==0 or kk == len(MM)-1 or 'head1_blocks.1.weight' in [*MM.keys()][kk]) else check\n"], ["pycodestyle", "E226", 120, 65, "missing whitespace around arithmetic operator", "        check = 0 if (k==0 or k == len(module_short.state_dict())-1 or param=='head1_blocks.1.weight') else check\n"], ["pycodestyle", "E226", 128, 27, "missing whitespace around arithmetic operator", "                S[0] = S[0]//pruningFactor\n"], ["pycodestyle", "E226", 131, 63, "missing whitespace around arithmetic operator", "            if len(S)>1 or (k == len(module_short.state_dict())-1):\n"], ["pycodestyle", "E226", 132, 27, "missing whitespace around arithmetic operator", "                S[1] = S[1]//pruningFactor if (S[1]%pruningFactor)==0 else S[1]\n"], ["pycodestyle", "E226", 142, 56, "missing whitespace around arithmetic operator", "            pruned_index = sortArgNorm>=len(sortArgNorm)//pruningFactor\n"], ["pycodestyle", "E226", 143, 43, "missing whitespace around arithmetic operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E226", 143, 46, "missing whitespace around arithmetic operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E226", 143, 66, "missing whitespace around arithmetic operator", "            for kk in range(index_weights[k-1]+1 if k>0 else 1, iw+1):\n"], ["pycodestyle", "E226", 146, 58, "missing whitespace around arithmetic operator", "                check = 0 if (kk==0 or kk == len(nameList)-1 or 'head1_blocks.1.weight' in nameList[kk]) else check\n"], ["pycodestyle", "E226", 304, 174, "missing whitespace around arithmetic operator", "        print(f'- Model %s on %s\\nMax Accuracy after {len(RL)-1}/{extractValue(\"epoch\", RLargs)} training epochs: train: %.2f | test: %.2f'%(path.split('/')[-1], dataset, 100*max(nums[\"train\"]), 100*max(nums[\"test\"])))    \n"], ["pycodestyle", "E226", 304, 198, "missing whitespace around arithmetic operator", "        print(f'- Model %s on %s\\nMax Accuracy after {len(RL)-1}/{extractValue(\"epoch\", RLargs)} training epochs: train: %.2f | test: %.2f'%(path.split('/')[-1], dataset, 100*max(nums[\"train\"]), 100*max(nums[\"test\"])))    \n"], ["pycodestyle", "E226", 306, 72, "missing whitespace around arithmetic operator", "        print('- Full network path: %s'%'/'.join(dataAT.split('/')[:-1])+'/network.pt')\n"], ["pycodestyle", "E226", 327, 22, "missing whitespace around arithmetic operator", "            print(*[(l+': '+a) for l,a in zip(loaded_models[::-1], accuracy[::-1])], sep=' \\-->\\n')              \n"], ["pycodestyle", "E226", 327, 27, "missing whitespace around arithmetic operator", "            print(*[(l+': '+a) for l,a in zip(loaded_models[::-1], accuracy[::-1])], sep=' \\-->\\n')              \n"], ["pycodestyle", "E226", 329, 43, "missing whitespace around arithmetic operator", "    return '/'.join(dataAT.split('/')[:-1])+'/network.pt', model, RLargs, (Collection if verbose else None)\n"], ["pycodestyle", "E226", 367, 45, "missing whitespace around arithmetic operator", "        [print(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E226", 367, 49, "missing whitespace around arithmetic operator", "        [print(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E226", 369, 49, "missing whitespace around arithmetic operator", "        [os.system(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E226", 369, 53, "missing whitespace around arithmetic operator", "        [os.system(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E226", 410, 25, "missing whitespace around arithmetic operator", "            if RES[-1][0]-RES[-2][0]<0:\n"], ["pycodestyle", "E226", 452, 29, "missing whitespace around arithmetic operator", "                if RES[-1][0]-RES[-2][0]<0:\n"], ["pycodestyle", "E228", 64, 97, "missing whitespace around modulo operator", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E228", 122, 37, "missing whitespace around modulo operator", "        name = 'module_short.%s[%s].'%(tuple(name_blk[:2])) + \".\".join(name_blk[2::])+ \".data\" if k>0 else ''    \n"], ["pycodestyle", "E228", 130, 31, "missing whitespace around modulo operator", "                exec('%s = tmp'%name)\n"], ["pycodestyle", "E228", 132, 51, "missing whitespace around modulo operator", "                S[1] = S[1]//pruningFactor if (S[1]%pruningFactor)==0 else S[1]\n"], ["pycodestyle", "E228", 134, 31, "missing whitespace around modulo operator", "                exec('%s = tmp'%name)\n"], ["pycodestyle", "E228", 150, 35, "missing whitespace around modulo operator", "                    exec('%s = tmp'%nameList[kk])\n"], ["pycodestyle", "E228", 154, 23, "missing whitespace around modulo operator", "        exec('%s = tmp'%nameList[-1])\n"], ["pycodestyle", "E228", 163, 97, "missing whitespace around modulo operator", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E228", 216, 30, "missing whitespace around modulo operator", "    G_extras = glob(SEARCH_STR%seedStr, recursive=True)\n"], ["pycodestyle", "E228", 218, 76, "missing whitespace around modulo operator", "    print('ATTENTION: more than 1 entry for final search string pattern: %s'%seedStr) if len(G_extras)>2 else None\n"], ["pycodestyle", "E228", 232, 58, "missing whitespace around modulo operator", "                    o = os.system(\"rm %s/ -fr 2>/dev/null\"%g)\n"], ["pycodestyle", "E228", 260, 28, "missing whitespace around modulo operator", "    paramsAT = \"%s/args.txt\"%path    \n"], ["pycodestyle", "E228", 261, 28, "missing whitespace around modulo operator", "    dataAT = \"%s/AP@0.5.txt\"%path\n"], ["pycodestyle", "E228", 279, 85, "missing whitespace around modulo operator", "        print(f'*** Error: {type(error).__name__}\\n*** {path}: %s file is missing...'%('data' if file_opened else 'args'))\n"], ["pycodestyle", "E228", 304, 139, "missing whitespace around modulo operator", "        print(f'- Model %s on %s\\nMax Accuracy after {len(RL)-1}/{extractValue(\"epoch\", RLargs)} training epochs: train: %.2f | test: %.2f'%(path.split('/')[-1], dataset, 100*max(nums[\"train\"]), 100*max(nums[\"test\"])))    \n"], ["pycodestyle", "E228", 306, 39, "missing whitespace around modulo operator", "        print('- Full network path: %s'%'/'.join(dataAT.split('/')[:-1])+'/network.pt')\n"], ["pycodestyle", "E228", 367, 28, "missing whitespace around modulo operator", "        [print(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E228", 369, 32, "missing whitespace around modulo operator", "        [os.system(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E228", 374, 47, "missing whitespace around modulo operator", "    G = [glob(f'{args.output_dir}/%s/head{k}_*'%'_'.join(network_path[k].split('/')[-2].split('_')[1:])) for k in range(n_heads)]\n"], ["pycodestyle", "E231", 42, 77, "missing whitespace after ','", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E231", 42, 79, "missing whitespace after ','", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E231", 42, 81, "missing whitespace after ','", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E231", 45, 13, "missing whitespace after ','", "        for k,iw in enumerate(index_weights):\n"], ["pycodestyle", "E231", 53, 59, "missing whitespace after ','", "                    tmp = MM[[*MM.keys()][kk]][pruned_index,...]\n"], ["pycodestyle", "E231", 54, 31, "missing whitespace after ','", "                    tmp = tmp[:,pruned_index_0, ...] if kk==iw and pruned_index_0 is not None else tmp\n"], ["pycodestyle", "E231", 58, 53, "missing whitespace after ','", "        MM[[*MM.keys()][-1]] = MM[[*MM.keys()][-1]][:,pruned_index_0, ...]         \n"], ["pycodestyle", "E231", 61, 129, "missing whitespace after ','", "        print(*[(f'{mk}: {list(mv0.shape)} --> {list(mv.shape)}') for (mk, mv, mv0) in zip(MM.keys(), MM.values(), M0.values())] ,sep='\\n')    \n"], ["pycodestyle", "E231", 64, 112, "missing whitespace after ','", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E231", 129, 39, "missing whitespace after ','", "                tmp = eval(name)[0:S[0],...]\n"], ["pycodestyle", "E231", 133, 34, "missing whitespace after ','", "                tmp = eval(name)[:,0:S[1],...]        \n"], ["pycodestyle", "E231", 133, 41, "missing whitespace after ','", "                tmp = eval(name)[:,0:S[1],...]        \n"], ["pycodestyle", "E231", 137, 77, "missing whitespace after ','", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E231", 137, 79, "missing whitespace after ','", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E231", 137, 81, "missing whitespace after ','", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E231", 140, 13, "missing whitespace after ','", "        for k,iw in enumerate(index_weights):\n"], ["pycodestyle", "E231", 148, 57, "missing whitespace after ','", "                    tmp = eval(nameList[kk])[pruned_index,...]\n"], ["pycodestyle", "E231", 149, 31, "missing whitespace after ','", "                    tmp = tmp[:,pruned_index_0, ...] if kk==iw and pruned_index_0 is not None else tmp\n"], ["pycodestyle", "E231", 153, 34, "missing whitespace after ','", "        tmp = eval(nameList[-1])[:,pruned_index_0, ...] \n"], ["pycodestyle", "E231", 161, 35, "missing whitespace after ','", "            print(f'{k}: {param}: ',S0, '-->', S) \n"], ["pycodestyle", "E231", 163, 112, "missing whitespace after ','", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E231", 205, 33, "missing whitespace after ','", "        storeData.save(Collection,'trained_models_collection.pkl') if export_to_pkl else None\n"], ["pycodestyle", "E231", 225, 20, "missing whitespace after ','", "        yes = {'yes','y','Y'}\n"], ["pycodestyle", "E231", 225, 24, "missing whitespace after ','", "        yes = {'yes','y','Y'}\n"], ["pycodestyle", "E231", 245, 25, "missing whitespace after ','", "        st = st.replace(s,'')\n"], ["pycodestyle", "E231", 327, 36, "missing whitespace after ','", "            print(*[(l+': '+a) for l,a in zip(loaded_models[::-1], accuracy[::-1])], sep=' \\-->\\n')              \n"], ["pycodestyle", "E231", 396, 31, "missing whitespace after ','", "            det = [nms(pred[...,t], conf_threshold=conf_threshold) for t in range(T)]\n"], ["pycodestyle", "E231", 397, 35, "missing whitespace after ','", "            acc.append(accuracy(det,bb))\n"], ["pycodestyle", "E231", 419, 64, "missing whitespace after ','", "    Gperm_ind = [comb for comb in itertools.combinations(range(0,n_heads), 3)]\n"], ["pycodestyle", "E231", 420, 65, "missing whitespace after ','", "    Gperm_ind += [comb for comb in itertools.combinations(range(0,n_heads), 2)]\n"], ["pycodestyle", "E231", 439, 35, "missing whitespace after ','", "                det = [nms(pred[...,t], conf_threshold=conf_threshold) for t in range(T)]\n"], ["pycodestyle", "E231", 440, 39, "missing whitespace after ','", "                acc.append(accuracy(det,bb))\n"], ["pycodestyle", "E241", 340, 48, "multiple spaces after ','", "    parser.add_argument('-output_dir', type=str,   default=\"Combine_heads_KP\",    help=\"folder in which we store predictions+bboxes\")\n"], ["pycodestyle", "E241", 340, 78, "multiple spaces after ','", "    parser.add_argument('-output_dir', type=str,   default=\"Combine_heads_KP\",    help=\"folder in which we store predictions+bboxes\")\n"], ["pycodestyle", "E251", 18, 52, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 18, 54, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 18, 74, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 18, 76, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 18, 93, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 18, 95, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 18, 114, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 18, 116, "unexpected spaces around keyword / parameter equals", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 53, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 55, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 75, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 77, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 94, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 96, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 115, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 88, 117, "unexpected spaces around keyword / parameter equals", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E251", 182, 33, "unexpected spaces around keyword / parameter equals", "def toPanda(arg_list, update_flag = True, export_to_pkl = True, export_to_excel=False):\n"], ["pycodestyle", "E251", 182, 35, "unexpected spaces around keyword / parameter equals", "def toPanda(arg_list, update_flag = True, export_to_pkl = True, export_to_excel=False):\n"], ["pycodestyle", "E251", 182, 55, "unexpected spaces around keyword / parameter equals", "def toPanda(arg_list, update_flag = True, export_to_pkl = True, export_to_excel=False):\n"], ["pycodestyle", "E251", 182, 57, "unexpected spaces around keyword / parameter equals", "def toPanda(arg_list, update_flag = True, export_to_pkl = True, export_to_excel=False):\n"], ["pycodestyle", "E251", 210, 34, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 210, 36, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 210, 54, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 210, 56, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 210, 72, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 210, 74, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 210, 98, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 210, 100, "unexpected spaces around keyword / parameter equals", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 250, 61, "unexpected spaces around keyword / parameter equals", "def retrieve_info(seedStr, verbose=False, track_loaded_models = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 250, 63, "unexpected spaces around keyword / parameter equals", "def retrieve_info(seedStr, verbose=False, track_loaded_models = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 250, 87, "unexpected spaces around keyword / parameter equals", "def retrieve_info(seedStr, verbose=False, track_loaded_models = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 250, 89, "unexpected spaces around keyword / parameter equals", "def retrieve_info(seedStr, verbose=False, track_loaded_models = False, confirm_deletion = False):\n"], ["pycodestyle", "E251", 280, 42, "unexpected spaces around keyword / parameter equals", "        retrieve_path(seedStr, removePaths = True, confirm_deletion = confirm_deletion);\n"], ["pycodestyle", "E251", 280, 44, "unexpected spaces around keyword / parameter equals", "        retrieve_path(seedStr, removePaths = True, confirm_deletion = confirm_deletion);\n"], ["pycodestyle", "E251", 280, 67, "unexpected spaces around keyword / parameter equals", "        retrieve_path(seedStr, removePaths = True, confirm_deletion = confirm_deletion);\n"], ["pycodestyle", "E251", 280, 69, "unexpected spaces around keyword / parameter equals", "        retrieve_path(seedStr, removePaths = True, confirm_deletion = confirm_deletion);\n"], ["pycodestyle", "E251", 308, 17, "unexpected spaces around keyword / parameter equals", "              sep = ' | ')\n"], ["pycodestyle", "E251", 308, 19, "unexpected spaces around keyword / parameter equals", "              sep = ' | ')\n"], ["pycodestyle", "E261", 415, 17, "at least two spaces before inline comment", "    if n_heads<3: #no need to test combinations\n"], ["pycodestyle", "E262", 415, 18, "inline comment should start with '# '", "    if n_heads<3: #no need to test combinations\n"], ["pycodestyle", "E266", 16, 0, "too many leading '#' for block comment", "## improving the module by not importing models but just the saved weight tensors\n"], ["pycodestyle", "E266", 24, 4, "too many leading '#' for block comment", "    ### load (full) KP model network - examples below\n"], ["pycodestyle", "E266", 69, 4, "too many leading '#' for block comment", "    #### Check if loading works\n"], ["pycodestyle", "E266", 94, 4, "too many leading '#' for block comment", "    ### load (full) KP model network - examples below\n"], ["pycodestyle", "E266", 112, 4, "too many leading '#' for block comment", "    ## prunes to model and saves it\n"], ["pycodestyle", "E266", 168, 4, "too many leading '#' for block comment", "    #### Check if loading works\n"], ["pycodestyle", "E266", 211, 4, "too many leading '#' for block comment", "    ### search_pos = [1,0,-1] - beginning, middle, end of string\n"], ["pycodestyle", "E266", 373, 4, "too many leading '#' for block comment", "    ## loading head lists from dir                             \n"], ["pycodestyle", "E266", 414, 4, "too many leading '#' for block comment", "    #### routines checking for all possible combinations of heads\n"], ["pycodestyle", "E302", 18, 0, "expected 2 blank lines, found 3", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E302", 243, 0, "expected 2 blank lines, found 1", "def extractPath(st):\n"], ["pycodestyle", "E303", 16, 0, "too many blank lines (3)", "## improving the module by not importing models but just the saved weight tensors\n"], ["pycodestyle", "E303", 64, 4, "too many blank lines (2)", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E303", 88, 0, "too many blank lines (6)", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E303", 250, 0, "too many blank lines (3)", "def retrieve_info(seedStr, verbose=False, track_loaded_models = False, confirm_deletion = False):\n"], ["pycodestyle", "E303", 338, 0, "too many blank lines (8)", "if __name__ == '__main__':\n"], ["pycodestyle", "E303", 353, 4, "too many blank lines (2)", "    n_heads = len(args.search_str)\n"], ["pycodestyle", "E303", 373, 4, "too many blank lines (2)", "    ## loading head lists from dir                             \n"], ["pycodestyle", "E402", 7, 0, "module level import not at top of file", "from object_detection.boundingbox.utils import storeData, accuracy, non_maximum_suppression\n"], ["pycodestyle", "E402", 9, 0, "module level import not at top of file", "from glob import glob\n"], ["pycodestyle", "E402", 10, 0, "module level import not at top of file", "from tqdm import tqdm\n"], ["pycodestyle", "E402", 11, 0, "module level import not at top of file", "import numpy as np \n"], ["pycodestyle", "E402", 12, 0, "module level import not at top of file", "import torch\n"], ["pycodestyle", "E501", 7, 80, "line too long (91 > 80 characters)", "from object_detection.boundingbox.utils import storeData, accuracy, non_maximum_suppression\n"], ["pycodestyle", "E501", 16, 80, "line too long (81 > 80 characters)", "## improving the module by not importing models but just the saved weight tensors\n"], ["pycodestyle", "E501", 18, 80, "line too long (120 > 80 characters)", "def networkPruning(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E501", 19, 80, "line too long (126 > 80 characters)", "    # loads model from saved_net_path and saves it into saved_to_net_path after pruning it by pruningLevel using pruningMethod\n"], ["pycodestyle", "E501", 21, 80, "line too long (108 > 80 characters)", "    # saved_to_net_path by default saves the pruned model to saved_net_path directory + '/halfed/network.pt'\n"], ["pycodestyle", "E501", 30, 80, "line too long (84 > 80 characters)", "    # print(*[(mk, mv.shape) for (mk, mv) in zip(MM.keys(), MM.values())] ,sep='\\n')    \n"], ["pycodestyle", "E501", 31, 80, "line too long (192 > 80 characters)", "    # print(*[(mk, mv.shape, (mv.shape[0]//2 if mv.shape[0]>1 else None, mv.shape[1]//2 if len(mv.shape)>1 and mv.shape[1]>3 else None)) for (mk, mv) in zip(MM.keys(), MM.values())] ,sep='\\n')\n"], ["pycodestyle", "E501", 42, 80, "line too long (85 > 80 characters)", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E501", 51, 80, "line too long (113 > 80 characters)", "                check = 0 if (kk==0 or kk == len(MM)-1 or 'head1_blocks.1.weight' in [*MM.keys()][kk]) else check\n"], ["pycodestyle", "E501", 54, 80, "line too long (102 > 80 characters)", "                    tmp = tmp[:,pruned_index_0, ...] if kk==iw and pruned_index_0 is not None else tmp\n"], ["pycodestyle", "E501", 61, 80, "line too long (139 > 80 characters)", "        print(*[(f'{mk}: {list(mv0.shape)} --> {list(mv.shape)}') for (mk, mv, mv0) in zip(MM.keys(), MM.values(), M0.values())] ,sep='\\n')    \n"], ["pycodestyle", "E501", 64, 80, "line too long (175 > 80 characters)", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E501", 88, 80, "line too long (121 > 80 characters)", "def networkPruning_(saved_net_path, saved_to_net_path = None, pruningFactor = 2, pruningMethod = \"random\", logLevel = 0):\n"], ["pycodestyle", "E501", 89, 80, "line too long (126 > 80 characters)", "    # loads model from saved_net_path and saves it into saved_to_net_path after pruning it by pruningLevel using pruningMethod\n"], ["pycodestyle", "E501", 91, 80, "line too long (108 > 80 characters)", "    # saved_to_net_path by default saves the pruned model to saved_net_path directory + '/halfed/network.pt'\n"], ["pycodestyle", "E501", 95, 80, "line too long (86 > 80 characters)", "    # saved_net_path = 'single_head_KP/Trained_DVS_FULL_KP_H1_202402201716/network.pt'\n"], ["pycodestyle", "E501", 96, 80, "line too long (86 > 80 characters)", "    # saved_net_path = 'single_head_KP/Trained_DVS_FULL_KP_H1_202402201714/network.pt'   \n"], ["pycodestyle", "E501", 120, 80, "line too long (113 > 80 characters)", "        check = 0 if (k==0 or k == len(module_short.state_dict())-1 or param=='head1_blocks.1.weight') else check\n"], ["pycodestyle", "E501", 122, 80, "line too long (109 > 80 characters)", "        name = 'module_short.%s[%s].'%(tuple(name_blk[:2])) + \".\".join(name_blk[2::])+ \".data\" if k>0 else ''    \n"], ["pycodestyle", "E501", 137, 80, "line too long (85 > 80 characters)", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E501", 146, 80, "line too long (115 > 80 characters)", "                check = 0 if (kk==0 or kk == len(nameList)-1 or 'head1_blocks.1.weight' in nameList[kk]) else check\n"], ["pycodestyle", "E501", 149, 80, "line too long (102 > 80 characters)", "                    tmp = tmp[:,pruned_index_0, ...] if kk==iw and pruned_index_0 is not None else tmp\n"], ["pycodestyle", "E501", 163, 80, "line too long (175 > 80 characters)", "    saved_to_net_path = '/'.join(saved_net_path.split('/')[:-1])+ '/%s_pruning_by%.1f/network.pt'%(pruningMethod,pruningFactor) if not saved_to_net_path else saved_to_net_path\n"], ["pycodestyle", "E501", 182, 80, "line too long (87 > 80 characters)", "def toPanda(arg_list, update_flag = True, export_to_pkl = True, export_to_excel=False):\n"], ["pycodestyle", "E501", 199, 80, "line too long (92 > 80 characters)", "    indx = [aa.split(' ')[-1][-13:-1] for aa in arg_list if aa.split(' ')[0]=='output_path']\n"], ["pycodestyle", "E501", 203, 80, "line too long (98 > 80 characters)", "        Collection = Collection.drop(index=indx) if indx in list(Collection.index) else Collection\n"], ["pycodestyle", "E501", 205, 80, "line too long (93 > 80 characters)", "        storeData.save(Collection,'trained_models_collection.pkl') if export_to_pkl else None\n"], ["pycodestyle", "E501", 206, 80, "line too long (90 > 80 characters)", "        Collection.to_excel(\"trained_models_collection.xlsx\") if export_to_excel else None\n"], ["pycodestyle", "E501", 210, 80, "line too long (108 > 80 characters)", "def retrieve_path(seedStr, verbose = False, search_pos = -1, removePaths = False, confirm_deletion = False):\n"], ["pycodestyle", "E501", 212, 80, "line too long (97 > 80 characters)", "    # ORIGIN_PATH = \"/home/dbendaya/work/ContinualLearning/tinyYolov3_lava/YOLOsdnn/tinyYOLOv3s/\"\n"], ["pycodestyle", "E501", 213, 80, "line too long (153 > 80 characters)", "    # SEARCH_STR = ORIGIN_PATH + '**/' + ('%s*/**/' if search_pos==1 else '') + ('*%s*/**/' if search_pos==0 else '') + ('*%s' if search_pos==-1 else '')\n"], ["pycodestyle", "E501", 214, 80, "line too long (137 > 80 characters)", "    SEARCH_STR = '**/' + ('%s*/**/' if search_pos==1 else '') + ('*%s*/**/' if search_pos==0 else '') + ('*%s' if search_pos==-1 else '')\n"], ["pycodestyle", "E501", 218, 80, "line too long (114 > 80 characters)", "    print('ATTENTION: more than 1 entry for final search string pattern: %s'%seedStr) if len(G_extras)>2 else None\n"], ["pycodestyle", "E501", 220, 80, "line too long (93 > 80 characters)", "        print('FAILED: Trained folder not found or wrong search string') if verbose else None\n"], ["pycodestyle", "E501", 222, 80, "line too long (94 > 80 characters)", "    print(f'\\nPattern {seedStr} can be found here:', *G_extras, sep='\\n') if verbose else None\n"], ["pycodestyle", "E501", 250, 80, "line too long (97 > 80 characters)", "def retrieve_info(seedStr, verbose=False, track_loaded_models = False, confirm_deletion = False):\n"], ["pycodestyle", "E501", 279, 80, "line too long (122 > 80 characters)", "        print(f'*** Error: {type(error).__name__}\\n*** {path}: %s file is missing...'%('data' if file_opened else 'args'))\n"], ["pycodestyle", "E501", 280, 80, "line too long (88 > 80 characters)", "        retrieve_path(seedStr, removePaths = True, confirm_deletion = confirm_deletion);\n"], ["pycodestyle", "E501", 302, 80, "line too long (106 > 80 characters)", "        args2print = {'DVSlike', 'Heads', 'b', 'load', 'model', 'lr', 'aug_prob', 'sparsity', 'threshold'}\n"], ["pycodestyle", "E501", 304, 80, "line too long (218 > 80 characters)", "        print(f'- Model %s on %s\\nMax Accuracy after {len(RL)-1}/{extractValue(\"epoch\", RLargs)} training epochs: train: %.2f | test: %.2f'%(path.split('/')[-1], dataset, 100*max(nums[\"train\"]), 100*max(nums[\"test\"])))    \n"], ["pycodestyle", "E501", 306, 80, "line too long (87 > 80 characters)", "        print('- Full network path: %s'%'/'.join(dataAT.split('/')[:-1])+'/network.pt')\n"], ["pycodestyle", "E501", 307, 80, "line too long (87 > 80 characters)", "        print('- Args: ', *[a[:-1] for a in RLargs if a.split(' : ')[0] in args2print], \n"], ["pycodestyle", "E501", 311, 80, "line too long (92 > 80 characters)", "            loaded_models.append(os.path.dirname(extractPath(extractValue('load', RLargs))))\n"], ["pycodestyle", "E501", 319, 80, "line too long (101 > 80 characters)", "                    loaded_models.append(os.path.dirname(extractPath(extractValue('load', RLargs_))))\n"], ["pycodestyle", "E501", 320, 80, "line too long (364 > 80 characters)", "                    accuracy.append(f\"on {extractValue('dataset', RLargs_)}(dvs={extractValue('DVSlike', RLargs_)},lr={extractValue('lr', RLargs_)},aug={extractValue('aug_prob', RLargs_)})-acc:{'%.2f'%float(extractValue('train_', RLargs_))}/{'%.2f'%float(extractValue('test_', RLargs_))} @ epoch:{extractValue('Epochs', RLargs_)}/{extractValue('epoch', RLargs_)}\") \n"], ["pycodestyle", "E501", 325, 80, "line too long (106 > 80 characters)", "            # accuracy, loaded_models = accuracy, loaded_models[:-1] if RLargs_ != None else loaded_models\n"], ["pycodestyle", "E501", 327, 80, "line too long (99 > 80 characters)", "            print(*[(l+': '+a) for l,a in zip(loaded_models[::-1], accuracy[::-1])], sep=' \\-->\\n')              \n"], ["pycodestyle", "E501", 329, 80, "line too long (107 > 80 characters)", "    return '/'.join(dataAT.split('/')[:-1])+'/network.pt', model, RLargs, (Collection if verbose else None)\n"], ["pycodestyle", "E501", 340, 80, "line too long (133 > 80 characters)", "    parser.add_argument('-output_dir', type=str,   default=\"Combine_heads_KP\",    help=\"folder in which we store predictions+bboxes\")\n"], ["pycodestyle", "E501", 341, 80, "line too long (81 > 80 characters)", "    parser.add_argument('-models', type=str, default='Full', help='[Full, Half]')\n"], ["pycodestyle", "E501", 345, 80, "line too long (128 > 80 characters)", "    parser.add_argument('-search_str', type=str, default=[], help='search strings based on last patterns on the run', nargs='+')\n"], ["pycodestyle", "E501", 346, 80, "line too long (95 > 80 characters)", "    parser.add_argument('-inference', default=False, action='store_true', help='run inference')\n"], ["pycodestyle", "E501", 347, 80, "line too long (91 > 80 characters)", "    parser.add_argument('-y', default=False, action='store_true', help='confirm deletions')\n"], ["pycodestyle", "E501", 360, 80, "line too long (93 > 80 characters)", "            # args.models = 'Half' if ('short' in model[k] or 'half' in model[k]) else 'Full'\n"], ["pycodestyle", "E501", 365, 80, "line too long (185 > 80 characters)", "        run_inference = f'python train_sdnn_base.py -b {args.b} -dataset {args.dataset} -gpu {args.gpu} -num_workers {args.num_workers} -output_dir %s -strID head%d_ -model %s -load %s'\n"], ["pycodestyle", "E501", 367, 80, "line too long (106 > 80 characters)", "        [print(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E501", 368, 80, "line too long (89 > 80 characters)", "                                  k, model[k], network_path[k])) for k in range(n_heads)]       \n"], ["pycodestyle", "E501", 369, 80, "line too long (110 > 80 characters)", "        [os.system(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "E501", 370, 80, "line too long (89 > 80 characters)", "                                  k, model[k], network_path[k])) for k in range(n_heads)]\n"], ["pycodestyle", "E501", 374, 80, "line too long (129 > 80 characters)", "    G = [glob(f'{args.output_dir}/%s/head{k}_*'%'_'.join(network_path[k].split('/')[-2].split('_')[1:])) for k in range(n_heads)]\n"], ["pycodestyle", "E501", 396, 80, "line too long (85 > 80 characters)", "            det = [nms(pred[...,t], conf_threshold=conf_threshold) for t in range(T)]\n"], ["pycodestyle", "E501", 411, 80, "line too long (125 > 80 characters)", "                print(f'Exiting\\nBest Accuracy:{RES[-2+(bnds[0]>bnds[1])][0]}mAP @ threshold={RES[-2+(bnds[0]>bnds[1])][1]}')\n"], ["pycodestyle", "E501", 439, 80, "line too long (89 > 80 characters)", "                det = [nms(pred[...,t], conf_threshold=conf_threshold) for t in range(T)]\n"], ["pycodestyle", "E501", 453, 80, "line too long (129 > 80 characters)", "                    print(f'Exiting\\nBest Accuracy:{RES[-2+(bnds[0]>bnds[1])][0]}mAP @ threshold={RES[-2+(bnds[0]>bnds[1])][1]}')\n"], ["pycodestyle", "E703", 189, 11, "statement ends with a semicolon", "    a_ = []; \n"], ["pycodestyle", "E703", 280, 87, "statement ends with a semicolon", "        retrieve_path(seedStr, removePaths = True, confirm_deletion = confirm_deletion);\n"], ["pycodestyle", "E711", 317, 27, "comparison to None should be 'if cond is not None:'", "                if RLargs_ != None:\n"], ["pycodestyle", "E722", 186, 4, "do not use bare 'except'", "    except:\n"], ["pycodestyle", "E722", 194, 8, "do not use bare 'except'", "        except:\n"], ["pycodestyle", "E731", 42, 8, "do not assign a lambda expression, use a def", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E731", 137, 8, "do not assign a lambda expression, use a def", "        nrm = lambda x: torch.norm(x, 1 if pruningMethod=='L1' else 2, dim=(1,2,3,4))\n"], ["pycodestyle", "E741", 327, 35, "ambiguous variable name 'l'", "            print(*[(l+': '+a) for l,a in zip(loaded_models[::-1], accuracy[::-1])], sep=' \\-->\\n')              \n"], ["flake8-bandit", "S102", 130, 0, "Use of exec detected.", "                exec('%s = tmp'%name)\n"], ["flake8-bandit", "S102", 134, 0, "Use of exec detected.", "                exec('%s = tmp'%name)\n"], ["flake8-bandit", "S102", 150, 0, "Use of exec detected.", "                    exec('%s = tmp'%nameList[kk])\n"], ["flake8-bandit", "S102", 154, 0, "Use of exec detected.", "        exec('%s = tmp'%nameList[-1])\n"], ["flake8-bandit", "S301", 114, 0, "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.", "    module_short = pickle.loads(pickle.dumps(module))    \n"], ["flake8-bandit", "S307", 129, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "                tmp = eval(name)[0:S[0],...]\n"], ["flake8-bandit", "S307", 133, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "                tmp = eval(name)[:,0:S[1],...]        \n"], ["flake8-bandit", "S307", 141, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "            sortArgNorm = torch.argsort(nrm(eval(nameList[iw])))\n"], ["flake8-bandit", "S307", 144, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "                S = list(eval(nameList[kk]).size())        \n"], ["flake8-bandit", "S307", 148, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "                    tmp = eval(nameList[kk])[pruned_index,...]\n"], ["flake8-bandit", "S307", 153, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "        tmp = eval(nameList[-1])[:,pruned_index_0, ...] \n"], ["flake8-bandit", "S307", 192, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "            _a_ = eval(aa.split(' ')[-1][:-1])\n"], ["flake8-bandit", "S403", 113, 0, "Consider possible security implications associated with pickle module.", "    import pickle\n"], ["flake8-bandit", "S605", 232, 0, "Starting a process with a shell, possible injection detected, security issue.", "                    o = os.system(\"rm %s/ -fr 2>/dev/null\"%g)\n"], ["flake8-bandit", "S605", 369, 0, "Starting a process with a shell, possible injection detected, security issue.", "        [os.system(run_inference%(args.output_dir+'/'+'_'.join(network_path[k].split('/')[-2].split('_')[1:]),\n"], ["pycodestyle", "W291", 5, 12, "trailing whitespace", "        '.']     \n"], ["pycodestyle", "W291", 11, 18, "trailing whitespace", "import numpy as np \n"], ["pycodestyle", "W291", 20, 44, "trailing whitespace", "    # pruningMethod = {\"random\", 'L1', 'l2'} \n"], ["pycodestyle", "W291", 30, 84, "trailing whitespace", "    # print(*[(mk, mv.shape) for (mk, mv) in zip(MM.keys(), MM.values())] ,sep='\\n')    \n"], ["pycodestyle", "W291", 49, 53, "trailing whitespace", "                S = list(MM[[*MM.keys()][kk]].size())        \n"], ["pycodestyle", "W291", 58, 74, "trailing whitespace", "        MM[[*MM.keys()][-1]] = MM[[*MM.keys()][-1]][:,pruned_index_0, ...]         \n"], ["pycodestyle", "W291", 60, 16, "trailing whitespace", "    if logLevel:    \n"], ["pycodestyle", "W291", 61, 139, "trailing whitespace", "        print(*[(f'{mk}: {list(mv0.shape)} --> {list(mv.shape)}') for (mk, mv, mv0) in zip(MM.keys(), MM.values(), M0.values())] ,sep='\\n')    \n"], ["pycodestyle", "W291", 90, 44, "trailing whitespace", "    # pruningMethod = {\"random\", 'L1', 'l2'} \n"], ["pycodestyle", "W291", 96, 86, "trailing whitespace", "    # saved_net_path = 'single_head_KP/Trained_DVS_FULL_KP_H1_202402201714/network.pt'   \n"], ["pycodestyle", "W291", 114, 53, "trailing whitespace", "    module_short = pickle.loads(pickle.dumps(module))    \n"], ["pycodestyle", "W291", 117, 57, "trailing whitespace", "    for k, param in enumerate(module_short.state_dict()):    \n"], ["pycodestyle", "W291", 122, 109, "trailing whitespace", "        name = 'module_short.%s[%s].'%(tuple(name_blk[:2])) + \".\".join(name_blk[2::])+ \".data\" if k>0 else ''    \n"], ["pycodestyle", "W291", 133, 46, "trailing whitespace", "                tmp = eval(name)[:,0:S[1],...]        \n"], ["pycodestyle", "W291", 144, 51, "trailing whitespace", "                S = list(eval(nameList[kk]).size())        \n"], ["pycodestyle", "W291", 153, 55, "trailing whitespace", "        tmp = eval(nameList[-1])[:,pruned_index_0, ...] \n"], ["pycodestyle", "W291", 157, 16, "trailing whitespace", "    if logLevel:    \n"], ["pycodestyle", "W291", 158, 61, "trailing whitespace", "        for k, param in enumerate(module_short.state_dict()):  \n"], ["pycodestyle", "W291", 161, 49, "trailing whitespace", "            print(f'{k}: {param}: ',S0, '-->', S) \n"], ["pycodestyle", "W291", 189, 12, "trailing whitespace", "    a_ = []; \n"], ["pycodestyle", "W291", 224, 19, "trailing whitespace", "    if removePaths: \n"], ["pycodestyle", "W291", 226, 32, "trailing whitespace", "        if not confirm_deletion:            \n"], ["pycodestyle", "W291", 237, 39, "trailing whitespace", "    RL = [RL] if type(RL)!=list else RL      \n"], ["pycodestyle", "W291", 253, 19, "trailing whitespace", "        return None    \n"], ["pycodestyle", "W291", 260, 33, "trailing whitespace", "    paramsAT = \"%s/args.txt\"%path    \n"], ["pycodestyle", "W291", 268, 79, "trailing whitespace", "                    model = rl.split(':')[1][1:-1].split('[')[-1].split(']')[0]     \n"], ["pycodestyle", "W291", 270, 47, "trailing whitespace", "                    lr = rl.split(':')[1][1:-1]     \n"], ["pycodestyle", "W291", 272, 53, "trailing whitespace", "                    aug_prob = rl.split(':')[1][1:-1]     \n"], ["pycodestyle", "W291", 274, 52, "trailing whitespace", "                    dataset = rl.split(':')[1][1:-1]                    \n"], ["pycodestyle", "W291", 282, 19, "trailing whitespace", "        return None  \n"], ["pycodestyle", "W291", 300, 44, "trailing whitespace", "    RLargs.append(f'output_path : {path}\\n')   \n"], ["pycodestyle", "W291", 301, 15, "trailing whitespace", "    if verbose:        \n"], ["pycodestyle", "W291", 304, 218, "trailing whitespace", "        print(f'- Model %s on %s\\nMax Accuracy after {len(RL)-1}/{extractValue(\"epoch\", RLargs)} training epochs: train: %.2f | test: %.2f'%(path.split('/')[-1], dataset, 100*max(nums[\"train\"]), 100*max(nums[\"test\"])))    \n"], ["pycodestyle", "W291", 307, 87, "trailing whitespace", "        print('- Args: ', *[a[:-1] for a in RLargs if a.split(' : ')[0] in args2print], \n"], ["pycodestyle", "W291", 320, 364, "trailing whitespace", "                    accuracy.append(f\"on {extractValue('dataset', RLargs_)}(dvs={extractValue('DVSlike', RLargs_)},lr={extractValue('lr', RLargs_)},aug={extractValue('aug_prob', RLargs_)})-acc:{'%.2f'%float(extractValue('train_', RLargs_))}/{'%.2f'%float(extractValue('test_', RLargs_))} @ epoch:{extractValue('Epochs', RLargs_)}/{extractValue('epoch', RLargs_)}\") \n"], ["pycodestyle", "W291", 322, 21, "trailing whitespace", "                else: \n"], ["pycodestyle", "W291", 327, 99, "trailing whitespace", "            print(*[(l+': '+a) for l,a in zip(loaded_models[::-1], accuracy[::-1])], sep=' \\-->\\n')              \n"], ["pycodestyle", "W291", 339, 38, "trailing whitespace", "    parser = argparse.ArgumentParser()    \n"], ["pycodestyle", "W291", 368, 89, "trailing whitespace", "                                  k, model[k], network_path[k])) for k in range(n_heads)]       \n"], ["pycodestyle", "W291", 373, 34, "trailing whitespace", "    ## loading head lists from dir                             \n"], ["pycodestyle", "W291", 380, 58, "trailing whitespace", "    pbar = tqdm(zip(*G), desc='loading heads predictions')    \n"], ["pycodestyle", "W291", 381, 16, "trailing whitespace", "    predTot = []    \n"], ["pycodestyle", "W291", 401, 22, "trailing whitespace", "    bnds = [0.2, 0.55]    \n"], ["pycodestyle", "W291", 421, 24, "trailing whitespace", "    for kG in Gperm_ind: \n"], ["pycodestyle", "W291", 423, 63, "trailing whitespace", "        pbar = tqdm(zip(*GG), desc='loading heads predictions')    \n"], ["pycodestyle", "W291", 424, 20, "trailing whitespace", "        predTot = []    \n"], ["pycodestyle", "W293", 23, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 29, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 68, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 93, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 99, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 108, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 135, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 167, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 188, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 196, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 201, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 247, 0, "blank line contains whitespace", "               \n"], ["pycodestyle", "W293", 283, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 328, 0, "blank line contains whitespace", "   \n"], ["pycodestyle", "W293", 352, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 371, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 377, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 390, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 399, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 417, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 433, 0, "blank line contains whitespace", "                       \n"], ["pycodestyle", "W293", 442, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 465, 0, "blank line contains whitespace", "                \n"], ["pycodestyle", "W293", 466, 0, "blank line contains whitespace", "                \n"], ["pycodestyle", "W293", 467, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 468, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W391", 471, 0, "blank line at end of file", "\n"], ["pycodestyle", "W605", 327, 91, "invalid escape sequence '\\-'", "            print(*[(l+': '+a) for l,a in zip(loaded_models[::-1], accuracy[::-1])], sep=' \\-->\\n')              \n"]], "digest": "88033c05dc030103be34342315fddf33"}