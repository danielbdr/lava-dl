{"results": [["pycodestyle", "E203", 55, 27, "whitespace before ':'", "            'threshold'     : threshold,   # delta unit threshold\n"], ["pycodestyle", "E203", 56, 27, "whitespace before ':'", "            'tau_grad'      : tau_grad,    # delta unit surrogate gradient relaxation parameter\n"], ["pycodestyle", "E203", 57, 27, "whitespace before ':'", "            'scale_grad'    : scale_grad,  # delta unit surrogate gradient scale parameter\n"], ["pycodestyle", "E203", 58, 27, "whitespace before ':'", "            'requires_grad' : False,       # trainable threshold\n"], ["pycodestyle", "E203", 59, 27, "whitespace before ':'", "            'shared_param'  : True,        # layer wise threshold\n"], ["pycodestyle", "E203", 63, 27, "whitespace before ':'", "            'activation'    : F.relu,      # activation function\n"], ["pycodestyle", "E203", 268, 23, "whitespace before ':'", "        model_keys = {k : False for k in saved_model.keys()}\n"], ["pycodestyle", "E221", 68, 26, "multiple spaces before operator", "        self.normalize_std  = torch.tensor([0.229, 0.224, 0.225]).reshape([1, 3, 1, 1, 1])\n"], ["pycodestyle", "E241", 96, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,   3,  16, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E241", 96, 61, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,   3,  16, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E241", 97, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  16,  32, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E241", 97, 61, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  16,  32, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E241", 98, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  32,  64, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E241", 98, 61, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  32,  64, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E241", 99, 56, "multiple spaces after ','", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  64, 128, 3, padding=1, stride=2, weight_scale=3, **block_8_kwargs),\n"], ["pycodestyle", "E501", 56, 80, "line too long (95 > 80 characters)", "            'tau_grad'      : tau_grad,    # delta unit surrogate gradient relaxation parameter\n"], ["pycodestyle", "E501", 57, 80, "line too long (90 > 80 characters)", "            'scale_grad'    : scale_grad,  # delta unit surrogate gradient scale parameter\n"], ["pycodestyle", "E501", 67, 80, "line too long (90 > 80 characters)", "        self.normalize_mean = torch.tensor([0.485, 0.456, 0.406]).reshape([1, 3, 1, 1, 1])\n"], ["pycodestyle", "E501", 68, 80, "line too long (90 > 80 characters)", "        self.normalize_std  = torch.tensor([0.229, 0.224, 0.225]).reshape([1, 3, 1, 1, 1])\n"], ["pycodestyle", "E501", 87, 80, "line too long (93 > 80 characters)", "        block_5_kwargs = dict(weight_norm=True, delay_shift=False, pre_hook_fx=quantize_5bit)\n"], ["pycodestyle", "E501", 88, 80, "line too long (93 > 80 characters)", "        block_8_kwargs = dict(weight_norm=True, delay_shift=False, pre_hook_fx=quantize_8bit)\n"], ["pycodestyle", "E501", 89, 80, "line too long (85 > 80 characters)", "        neuron_kwargs = {**sdnn_params, 'norm': slayer.neuron.norm.MeanOnlyBatchNorm}\n"], ["pycodestyle", "E501", 96, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,   3,  16, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E501", 97, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  16,  32, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E501", 98, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  32,  64, 3, padding=1, stride=2, weight_scale=1, **block_8_kwargs),\n"], ["pycodestyle", "E501", 99, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs,  64, 128, 3, padding=1, stride=2, weight_scale=3, **block_8_kwargs),\n"], ["pycodestyle", "E501", 100, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 128, 256, 3, padding=1, stride=1, weight_scale=3, **block_8_kwargs),\n"], ["pycodestyle", "E501", 101, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 256, 256, 3, padding=1, stride=2, weight_scale=3, **block_8_kwargs),\n"], ["pycodestyle", "E501", 102, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 256, 512, 3, padding=1, stride=1, weight_scale=3, **block_5_kwargs),\n"], ["pycodestyle", "E501", 103, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 512, 256, 1, padding=0, stride=1, weight_scale=3, **block_5_kwargs),\n"], ["pycodestyle", "E501", 104, 80, "line too long (125 > 80 characters)", "            slayer.block.sigma_delta.Conv(neuron_kwargs, 256, 512, 3, padding=1, stride=1, weight_scale=3, **block_5_kwargs),\n"], ["pycodestyle", "E501", 108, 80, "line too long (96 > 80 characters)", "            slayer.synapse.Conv(512, self.num_output, 1, padding=0, stride=1, **synapse_kwargs),\n"], ["pycodestyle", "E501", 271, 80, "line too long (106 > 80 characters)", "        self.input_blocks[0].neuron.bias.data = saved_model[f'input_blocks.0.neuron.bias'].data.to(device)\n"], ["pycodestyle", "E501", 272, 80, "line too long (128 > 80 characters)", "        self.input_blocks[0].neuron.delta.threshold.data = saved_model[f'input_blocks.0.neuron.delta.threshold'].data.to(device)\n"], ["pycodestyle", "E501", 278, 80, "line too long (89 > 80 characters)", "            self.blocks[i].neuron.bias.data = saved_model[f'blocks.{i}.neuron.bias'].data\n"], ["pycodestyle", "E501", 279, 80, "line too long (115 > 80 characters)", "            self.blocks[i].neuron.norm.running_mean.data = saved_model[f'blocks.{i}.neuron.norm.running_mean'].data\n"], ["pycodestyle", "E501", 280, 80, "line too long (111 > 80 characters)", "            self.blocks[i].neuron.delta.threshold.data = saved_model[f'blocks.{i}.neuron.delta.threshold'].data\n"], ["pycodestyle", "E501", 281, 80, "line too long (99 > 80 characters)", "            self.blocks[i].synapse.weight_g.data = saved_model[f'blocks.{i}.synapse.weight_g'].data\n"], ["pycodestyle", "E501", 282, 80, "line too long (99 > 80 characters)", "            self.blocks[i].synapse.weight_v.data = saved_model[f'blocks.{i}.synapse.weight_v'].data\n"], ["pycodestyle", "E501", 289, 80, "line too long (88 > 80 characters)", "        if self.heads[0].weight.data.shape == saved_model[f'heads.0.weight'].data.shape:\n"], ["pycodestyle", "W503", 245, 20, "line break before binary operator", "                    and b.synapse.weight.requires_grad]\n"]], "digest": "c43e5dc195fb7985edd06f7c8165a2a8"}