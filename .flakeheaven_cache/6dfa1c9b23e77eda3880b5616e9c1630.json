{"results": [["pycodestyle", "E201", 20, 26, "whitespace after '['", "                 anchors=[ [(0.28, 0.22), (0.38, 0.48), (0.90, 0.78)] ],\n"], ["pycodestyle", "E202", 20, 69, "whitespace before ']'", "                 anchors=[ [(0.28, 0.22), (0.38, 0.48), (0.90, 0.78)] ],\n"], ["pycodestyle", "E221", 43, 17, "multiple spaces before operator", "            count  += cnt            \n"], ["pycodestyle", "E226", 23, 25, "missing whitespace around arithmetic operator", "        anchors = anchors*args.combined_models\n"], ["pycodestyle", "E226", 46, 82, "missing whitespace around arithmetic operator", "            output = output.unsqueeze(0).view(input.shape[0], -1, self.num_classes+5, output.shape[-1])\n"], ["pycodestyle", "E228", 31, 63, "missing whitespace around modulo operator", "            exec('from models.sdnn_%s import Network as Head%d'%(h,k))\n"], ["pycodestyle", "E228", 32, 189, "missing whitespace around modulo operator", "            exec('self.Head%d = Head%d(threshold=args.threshold, tau_grad=args.tau_grad, scale_grad=args.scale_grad, num_classes=args.num_classes, clamp_max=args.clamp_max).to(self.device)'%(k,k))\n"], ["pycodestyle", "E231", 29, 13, "missing whitespace after ','", "        for k,h in enumerate(args.model):\n"], ["pycodestyle", "E231", 30, 19, "missing whitespace after ','", "            print(k,h)\n"], ["pycodestyle", "E231", 31, 66, "missing whitespace after ','", "            exec('from models.sdnn_%s import Network as Head%d'%(h,k))\n"], ["pycodestyle", "E231", 32, 192, "missing whitespace after ','", "            exec('self.Head%d = Head%d(threshold=args.threshold, tau_grad=args.tau_grad, scale_grad=args.scale_grad, num_classes=args.num_classes, clamp_max=args.clamp_max).to(self.device)'%(k,k))\n"], ["pycodestyle", "E231", 33, 26, "missing whitespace after ','", "            self.anchors[k,:,:] = eval(f'self.Head{k}.anchors')\n"], ["pycodestyle", "E231", 33, 28, "missing whitespace after ','", "            self.anchors[k,:,:] = eval(f'self.Head{k}.anchors')\n"], ["pycodestyle", "E252", 36, 62, "missing whitespace around parameter equals", "    def forward(self, input, sparsity_monitor: SparsityMonitor=None):        \n"], ["pycodestyle", "E252", 36, 63, "missing whitespace around parameter equals", "    def forward(self, input, sparsity_monitor: SparsityMonitor=None):        \n"], ["pycodestyle", "E266", 15, 0, "too many leading '#' for block comment", "#### sdnn_single_head_KP_combination_yolo model\n"], ["pycodestyle", "E266", 67, 4, "too many leading '#' for block comment", "    ############ EXTENSIONS FROM YOLOBase ##################        \n"], ["pycodestyle", "E302", 17, 0, "expected 2 blank lines, found 1", "class Network(YOLOBase):\n"], ["pycodestyle", "E303", 36, 4, "too many blank lines (2)", "    def forward(self, input, sparsity_monitor: SparsityMonitor=None):        \n"], ["pycodestyle", "E402", 10, 0, "module level import not at top of file", "from yolo_base import YOLOBase\n"], ["pycodestyle", "E402", 12, 0, "module level import not at top of file", "from object_detection.dataset.utils import storeData\n"], ["pycodestyle", "E402", 13, 0, "module level import not at top of file", "from .model_utils import quantize_8bit, quantize_5bit, event_rate, SparsityMonitor\n"], ["pycodestyle", "E501", 13, 80, "line too long (82 > 80 characters)", "from .model_utils import quantize_8bit, quantize_5bit, event_rate, SparsityMonitor\n"], ["pycodestyle", "E501", 24, 80, "line too long (97 > 80 characters)", "        super().__init__(num_classes=args.num_classes, anchors=anchors, clamp_max=args.clamp_max)\n"], ["pycodestyle", "E501", 32, 80, "line too long (196 > 80 characters)", "            exec('self.Head%d = Head%d(threshold=args.threshold, tau_grad=args.tau_grad, scale_grad=args.scale_grad, num_classes=args.num_classes, clamp_max=args.clamp_max).to(self.device)'%(k,k))\n"], ["pycodestyle", "E501", 46, 80, "line too long (103 > 80 characters)", "            output = output.unsqueeze(0).view(input.shape[0], -1, self.num_classes+5, output.shape[-1])\n"], ["flake8-bandit", "S102", 31, 0, "Use of exec detected.", "            exec('from models.sdnn_%s import Network as Head%d'%(h,k))\n"], ["flake8-bandit", "S102", 32, 0, "Use of exec detected.", "            exec('self.Head%d = Head%d(threshold=args.threshold, tau_grad=args.tau_grad, scale_grad=args.scale_grad, num_classes=args.num_classes, clamp_max=args.clamp_max).to(self.device)'%(k,k))\n"], ["flake8-bandit", "S307", 33, 0, "Use of possibly insecure function - consider using safer ast.literal_eval.", "            self.anchors[k,:,:] = eval(f'self.Head{k}.anchors')\n"], ["pycodestyle", "W291", 36, 69, "trailing whitespace", "    def forward(self, input, sparsity_monitor: SparsityMonitor=None):        \n"], ["pycodestyle", "W291", 43, 25, "trailing whitespace", "            count  += cnt            \n"], ["pycodestyle", "W291", 54, 46, "trailing whitespace", "            head_grad_flow += h.gradflow(path)      \n"], ["pycodestyle", "W291", 67, 60, "trailing whitespace", "    ############ EXTENSIONS FROM YOLOBase ##################        \n"], ["pycodestyle", "W291", 71, 36, "trailing whitespace", "        for head in self.children():       \n"], ["pycodestyle", "W293", 35, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 49, 0, "blank line contains whitespace", "            \n"], ["pycodestyle", "W293", 55, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 66, 0, "blank line contains whitespace", "            \n"], ["pycodestyle", "W391", 80, 0, "blank line at end of file", "\n"], ["pycodestyle", "W503", 75, 43, "line break before binary operator", "                                           or torch.isinf(param.grad).any())\n"]], "digest": "cf2e72f2487586d48a6f03e5e19c3223"}