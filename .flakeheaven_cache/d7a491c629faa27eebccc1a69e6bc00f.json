{"results": [["pycodestyle", "E121", 43, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 48, 12, "continuation line under-indented for hanging indent", "            ])\n"], ["pycodestyle", "E126", 39, 16, "continuation line over-indented for hanging indent", "                'threshold'     : 0.1,\n"], ["pycodestyle", "E126", 46, 16, "continuation line over-indented for hanging indent", "                slayer.block.cuba.Dense(neuron_params, 200, 256),\n"], ["pycodestyle", "E202", 20, 58, "whitespace before ')'", "        self.input  = slayer.io.read_1d_spikes('input.bs1' )\n"], ["pycodestyle", "E203", 39, 31, "whitespace before ':'", "                'threshold'     : 0.1,\n"], ["pycodestyle", "E203", 40, 31, "whitespace before ':'", "                'current_decay' : 1,\n"], ["pycodestyle", "E203", 41, 31, "whitespace before ':'", "                'voltage_decay' : 0.1,\n"], ["pycodestyle", "E203", 42, 31, "whitespace before ':'", "                'requires_grad' : True,     \n"], ["pycodestyle", "E221", 20, 18, "multiple spaces before operator", "        self.input  = slayer.io.read_1d_spikes('input.bs1' )\n"], ["pycodestyle", "E221", 77, 10, "multiple spaces before operator", "input_anim  = training_set.input.anim(plt.figure(figsize=(10, 10)))\n"], ["pycodestyle", "E261", 27, 76, "at least two spaces before inline comment", "            self.target.fill_tensor(torch.zeros(1, 1, 200, 2000)).squeeze(), # target\n"], ["pycodestyle", "E261", 31, 16, "at least two spaces before inline comment", "        return 1 # just one sample for this problem\n"], ["pycodestyle", "E261", 124, 54, "at least two spaces before inline comment", "    for i, (input, target) in enumerate(train_loader): # training loop\n"], ["pycodestyle", "E266", 80, 0, "too many leading '#' for block comment", "## This produces interactive animation\n"], ["pycodestyle", "E266", 84, 0, "too many leading '#' for block comment", "## Saving and loading gif for better animation in github\n"], ["pycodestyle", "E302", 17, 0, "expected 2 blank lines, found 1", "class OxfordDataset(Dataset):\n"], ["pycodestyle", "E302", 34, 0, "expected 2 blank lines, found 1", "class Network(torch.nn.Module):\n"], ["pycodestyle", "E305", 63, 0, "expected 2 blank lines after class or function definition, found 1", "trained_folder = 'Trained'\n"], ["pycodestyle", "E501", 26, 80, "line too long (84 > 80 characters)", "            self.input.fill_tensor(torch.zeros(1, 1, 200, 2000)).squeeze(),  # input\n"], ["pycodestyle", "E501", 27, 80, "line too long (85 > 80 characters)", "            self.target.fill_tensor(torch.zeros(1, 1, 200, 2000)).squeeze(), # target\n"], ["pycodestyle", "E501", 89, 80, "line too long (90 > 80 characters)", "gif_td = lambda gif: f'<td> <img src=\"{gif}\" alt=\"Drawing\" style=\"height: 400px;\"/> </td>'\n"], ["pycodestyle", "E501", 156, 80, "line too long (90 > 80 characters)", "plt.plot(training_set.target.t, training_set.target.x, '.', markersize=12, label='target')\n"], ["pycodestyle", "E701", 114, 11, "multiple statements on one line (colon)", "for a in ax: a.legend()\n"], ["pycodestyle", "E731", 89, 0, "do not assign a lambda expression, use a def", "gif_td = lambda gif: f'<td> <img src=\"{gif}\" alt=\"Drawing\" style=\"height: 400px;\"/> </td>'\n"], ["pycodestyle", "W291", 42, 39, "trailing whitespace", "                'requires_grad' : True,     \n"], ["pycodestyle", "W291", 67, 29, "trailing whitespace", "device = torch.device('cuda') \n"], ["pycodestyle", "W291", 100, 71, "trailing whitespace", "# the followng portion just illustrates the SpikeTime loss calculation. \n"], ["pycodestyle", "W293", 44, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 49, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 127, 0, "blank line contains whitespace", "    \n"]], "digest": "4b3e78e1d6eb83caa558e7e91053d01b"}