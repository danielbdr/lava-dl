{"results": [["pycodestyle", "W503", 43, 20, "line break before binary operator", "                    + '/adaptive_resonator.cu'\n"], ["pycodestyle", "W503", 234, 20, "line break before binary operator", "                    or torch.norm(imag[0, i] - _imag[0, i]) > 1e-6\n"], ["pycodestyle", "W503", 235, 20, "line break before binary operator", "                    or torch.norm(threshold[0, i] - _threshold[0, i]) > 1e-6\n"], ["pycodestyle", "W503", 236, 20, "line break before binary operator", "                    or torch.norm(refractory[0, i] - _refractory[0, i]) > 1e-6\n"], ["pycodestyle", "W503", 461, 12, "line break before binary operator", "            or torch.sum(torch.isnan(grad_imag_input[..., n])) > 0\n"], ["pycodestyle", "W503", 462, 12, "line break before binary operator", "            or torch.sum(torch.isinf(grad_real_input[..., n])) > 0\n"], ["pycodestyle", "W503", 463, 12, "line break before binary operator", "            or torch.sum(torch.isinf(grad_imag_input[..., n])) > 0\n"]], "digest": "8187bad3f14109e1b435eab558dfd63c"}