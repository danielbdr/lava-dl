{"results": [["pycodestyle", "E121", 33, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 40, 12, "continuation line under-indented for hanging indent", "            ])\n"], ["pycodestyle", "E126", 27, 16, "continuation line over-indented for hanging indent", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E126", 37, 16, "continuation line over-indented for hanging indent", "                slayer.block.cuba.Dense(neuron_params_drop, 34*34*2, 512, weight_norm=True, delay=True),\n"], ["pycodestyle", "E203", 27, 31, "whitespace before ':'", "                'threshold'     : 1.25,\n"], ["pycodestyle", "E203", 28, 31, "whitespace before ':'", "                'current_decay' : 0.25,\n"], ["pycodestyle", "E203", 29, 31, "whitespace before ':'", "                'voltage_decay' : 0.03,\n"], ["pycodestyle", "E203", 30, 31, "whitespace before ':'", "                'tau_grad'      : 0.03,\n"], ["pycodestyle", "E203", 31, 31, "whitespace before ':'", "                'scale_grad'    : 3,\n"], ["pycodestyle", "E203", 32, 31, "whitespace before ':'", "                'requires_grad' : True,     \n"], ["pycodestyle", "E203", 34, 56, "whitespace before ':'", "        neuron_params_drop = {**neuron_params, 'dropout' : slayer.neuron.Dropout(p=0.05),}\n"], ["pycodestyle", "E203", 80, 45, "whitespace before ','", "test_loader  = DataLoader(dataset=testing_set , batch_size=32, shuffle=True)\n"], ["pycodestyle", "E221", 77, 11, "multiple spaces before operator", "testing_set  = NMNISTDataset(train=False)\n"], ["pycodestyle", "E221", 80, 11, "multiple spaces before operator", "test_loader  = DataLoader(dataset=testing_set , batch_size=32, shuffle=True)\n"], ["pycodestyle", "E226", 37, 62, "missing whitespace around arithmetic operator", "                slayer.block.cuba.Dense(neuron_params_drop, 34*34*2, 512, weight_norm=True, delay=True),\n"], ["pycodestyle", "E226", 37, 65, "missing whitespace around arithmetic operator", "                slayer.block.cuba.Dense(neuron_params_drop, 34*34*2, 512, weight_norm=True, delay=True),\n"], ["pycodestyle", "E226", 117, 23, "missing whitespace around arithmetic operator", "        print('\\r', ' '*len(f'\\r[Epoch {epoch:2d}/{epochs}] {stats}'))\n"], ["pycodestyle", "E228", 116, 12, "missing whitespace around modulo operator", "    if epoch%20 == 19: # cleanup display\n"], ["pycodestyle", "E231", 34, 88, "missing whitespace after ','", "        neuron_params_drop = {**neuron_params, 'dropout' : slayer.neuron.Dropout(p=0.05),}\n"], ["pycodestyle", "E261", 108, 53, "at least two spaces before inline comment", "    for i, (input, label) in enumerate(train_loader): # training loop\n"], ["pycodestyle", "E261", 112, 52, "at least two spaces before inline comment", "    for i, (input, label) in enumerate(test_loader): # training loop\n"], ["pycodestyle", "E261", 116, 22, "at least two spaces before inline comment", "    if epoch%20 == 19: # cleanup display\n"], ["pycodestyle", "E302", 22, 0, "expected 2 blank lines, found 1", "class Network(torch.nn.Module):\n"], ["pycodestyle", "E305", 66, 0, "expected 2 blank lines after class or function definition, found 1", "trained_folder = 'Trained'\n"], ["pycodestyle", "E401", 3, 9, "multiple imports on one line", "import os, sys\n"], ["pycodestyle", "E501", 34, 80, "line too long (90 > 80 characters)", "        neuron_params_drop = {**neuron_params, 'dropout' : slayer.neuron.Dropout(p=0.05),}\n"], ["pycodestyle", "E501", 37, 80, "line too long (104 > 80 characters)", "                slayer.block.cuba.Dense(neuron_params_drop, 34*34*2, 512, weight_norm=True, delay=True),\n"], ["pycodestyle", "E501", 38, 80, "line too long (100 > 80 characters)", "                slayer.block.cuba.Dense(neuron_params_drop, 512, 512, weight_norm=True, delay=True),\n"], ["pycodestyle", "E501", 39, 80, "line too long (82 > 80 characters)", "                slayer.block.cuba.Dense(neuron_params, 512, 10, weight_norm=True),\n"], ["pycodestyle", "E501", 49, 80, "line too long (82 > 80 characters)", "        grad = [b.synapse.grad_norm for b in self.blocks if hasattr(b, 'synapse')]\n"], ["pycodestyle", "E501", 91, 80, "line too long (90 > 80 characters)", "gif_td = lambda gif: f'<td> <img src=\"{gif}\" alt=\"Drawing\" style=\"height: 250px;\"/> </td>'\n"], ["pycodestyle", "E501", 98, 80, "line too long (89 > 80 characters)", "error = slayer.loss.SpikeRate(true_rate=0.2, false_rate=0.03, reduction='sum').to(device)\n"], ["pycodestyle", "E501", 102, 80, "line too long (107 > 80 characters)", "assistant = slayer.utils.Assistant(net, error, optimizer, stats, classifier=slayer.classifier.Rate.predict)\n"], ["pycodestyle", "E501", 137, 80, "line too long (93 > 80 characters)", "    inp_event = slayer.io.tensor_to_event(input[i].cpu().data.numpy().reshape(2, 34, 34, -1))\n"], ["pycodestyle", "E501", 138, 80, "line too long (90 > 80 characters)", "    out_event = slayer.io.tensor_to_event(output[i].cpu().data.numpy().reshape(1, 10, -1))\n"], ["pycodestyle", "E731", 91, 0, "do not assign a lambda expression, use a def", "gif_td = lambda gif: f'<td> <img src=\"{gif}\" alt=\"Drawing\" style=\"height: 250px;\"/> </td>'\n"], ["pycodestyle", "W291", 32, 39, "trailing whitespace", "                'requires_grad' : True,     \n"], ["pycodestyle", "W291", 70, 29, "trailing whitespace", "device = torch.device('cuda') \n"], ["pycodestyle", "W293", 35, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 41, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 46, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 111, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 115, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 120, 0, "blank line contains whitespace", "    \n"]], "digest": "fadb1f5ca96070c75e4ed4b194a60db4"}