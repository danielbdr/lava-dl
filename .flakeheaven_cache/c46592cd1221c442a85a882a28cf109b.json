{"results": [["pycodestyle", "W503", 186, 16, "line break before binary operator", "                & (c_event < empty_tensor.shape[0])\n"], ["pycodestyle", "W503", 187, 16, "line break before binary operator", "                & (t_event < empty_tensor.shape[3])\n"], ["pycodestyle", "W503", 188, 16, "line break before binary operator", "                & (x_event >= 0)\n"], ["pycodestyle", "W503", 189, 16, "line break before binary operator", "                & (c_event >= 0)\n"], ["pycodestyle", "W503", 190, 16, "line break before binary operator", "                & (t_event >= 0)\n"], ["pycodestyle", "W503", 217, 16, "line break before binary operator", "                & (y_event < empty_tensor.shape[1])\n"], ["pycodestyle", "W503", 218, 16, "line break before binary operator", "                & (c_event < empty_tensor.shape[0])\n"], ["pycodestyle", "W503", 219, 16, "line break before binary operator", "                & (t_event < empty_tensor.shape[3])\n"], ["pycodestyle", "W503", 220, 16, "line break before binary operator", "                & (x_event >= 0)\n"], ["pycodestyle", "W503", 221, 16, "line break before binary operator", "                & (y_event >= 0)\n"], ["pycodestyle", "W503", 222, 16, "line break before binary operator", "                & (c_event >= 0)\n"], ["pycodestyle", "W503", 223, 16, "line break before binary operator", "                & (t_event >= 0)\n"], ["pycodestyle", "W503", 649, 8, "line break before binary operator", "        | (input_as_int[3::5] << 8)\n"], ["pycodestyle", "W503", 650, 8, "line break before binary operator", "        | (input_as_int[4::5])\n"], ["pycodestyle", "W503", 693, 8, "line break before binary operator", "        | (c_event.astype(int) << 7)\n"], ["pycodestyle", "W503", 736, 8, "line break before binary operator", "        | (input_as_int[3::5] << 8)\n"], ["pycodestyle", "W503", 737, 8, "line break before binary operator", "        | (input_as_int[4::5])\n"], ["pycodestyle", "W503", 783, 8, "line break before binary operator", "        | (c_event.astype(int) << 7)\n"]], "digest": "ee5ef2df8f022b8b86df2ea69931208b"}