{"results": [["pycodestyle", "E128", 36, 24, "continuation line under-indented for visual indent", "                        jitter_direction[1]*(jitter_direction[1]>0),\n"], ["pycodestyle", "E128", 37, 24, "continuation line under-indented for visual indent", "                        -jitter_direction[0]*(jitter_direction[0]<0),\n"], ["pycodestyle", "E128", 38, 24, "continuation line under-indented for visual indent", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E128", 41, 4, "continuation line under-indented for visual indent", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E225", 35, 80, "missing whitespace around operator", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E225", 36, 64, "missing whitespace around operator", "                        jitter_direction[1]*(jitter_direction[1]>0),\n"], ["pycodestyle", "E225", 37, 65, "missing whitespace around operator", "                        -jitter_direction[0]*(jitter_direction[0]<0),\n"], ["pycodestyle", "E225", 38, 65, "missing whitespace around operator", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E225", 40, 61, "missing whitespace around operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E225", 40, 111, "missing whitespace around operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E225", 41, 45, "missing whitespace around operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E225", 41, 95, "missing whitespace around operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 33, 41, "missing whitespace around arithmetic operator", "    x,y = (torch.tensor(image.shape[1:3])*max_pixel_displacement_perc).type(torch.int)\n"], ["pycodestyle", "E226", 35, 59, "missing whitespace around arithmetic operator", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E226", 36, 43, "missing whitespace around arithmetic operator", "                        jitter_direction[1]*(jitter_direction[1]>0),\n"], ["pycodestyle", "E226", 37, 44, "missing whitespace around arithmetic operator", "                        -jitter_direction[0]*(jitter_direction[0]<0),\n"], ["pycodestyle", "E226", 38, 44, "missing whitespace around arithmetic operator", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E226", 40, 40, "missing whitespace around arithmetic operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E226", 40, 70, "missing whitespace around arithmetic operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E226", 40, 90, "missing whitespace around arithmetic operator", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E226", 41, 24, "missing whitespace around arithmetic operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 41, 54, "missing whitespace around arithmetic operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 41, 74, "missing whitespace around arithmetic operator", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["pycodestyle", "E226", 42, 16, "missing whitespace around arithmetic operator", "    return image-ii.unsqueeze(-1)\n"], ["pycodestyle", "E231", 33, 5, "missing whitespace after ','", "    x,y = (torch.tensor(image.shape[1:3])*max_pixel_displacement_perc).type(torch.int)\n"], ["pycodestyle", "E231", 34, 42, "missing whitespace after ','", "    jitter_direction = random.randrange(-x,x), random.randrange(-y,y)    \n"], ["pycodestyle", "E231", 34, 66, "missing whitespace after ','", "    jitter_direction = random.randrange(-x,x), random.randrange(-y,y)    \n"], ["pycodestyle", "E251", 31, 51, "unexpected spaces around keyword / parameter equals", "def Image_Jitter(image, max_pixel_displacement_perc = 0.01):\n"], ["pycodestyle", "E251", 31, 53, "unexpected spaces around keyword / parameter equals", "def Image_Jitter(image, max_pixel_displacement_perc = 0.01):\n"], ["pycodestyle", "E251", 35, 36, "unexpected spaces around keyword / parameter equals", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E251", 35, 38, "unexpected spaces around keyword / parameter equals", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E265", 146, 8, "block comment should start with '# '", "        #jitter for mimicking DVS\n"], ["pycodestyle", "E302", 45, 0, "expected 2 blank lines, found 0", "def quantize_global(image, k):\n"], ["pycodestyle", "E302", 53, 0, "expected 2 blank lines, found 1", "class _COCO(Dataset):\n"], ["pycodestyle", "E303", 31, 0, "too many blank lines (3)", "def Image_Jitter(image, max_pixel_displacement_perc = 0.01):\n"], ["pycodestyle", "E305", 44, 0, "expected 2 blank lines after class or function definition, found 1", "from sklearn.cluster import MiniBatchKMeans\n"], ["pycodestyle", "E402", 44, 0, "module level import not at top of file", "from sklearn.cluster import MiniBatchKMeans\n"], ["pycodestyle", "E501", 33, 80, "line too long (86 > 80 characters)", "    x,y = (torch.tensor(image.shape[1:3])*max_pixel_displacement_perc).type(torch.int)\n"], ["pycodestyle", "E501", 35, 80, "line too long (84 > 80 characters)", "    image_s = transforms.Pad(padding = (jitter_direction[0]*(jitter_direction[0]>0),\n"], ["pycodestyle", "E501", 38, 80, "line too long (87 > 80 characters)", "                        -jitter_direction[1]*(jitter_direction[1]<0)))(image.squeeze())\n"], ["pycodestyle", "E501", 40, 80, "line too long (115 > 80 characters)", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "E501", 41, 80, "line too long (99 > 80 characters)", "    -jitter_direction[0]*(jitter_direction[0]<0):SS[1]-jitter_direction[0]*(jitter_direction[0]<0)]\n"], ["flake8-bandit", "S311", 34, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "    jitter_direction = random.randrange(-x,x), random.randrange(-y,y)    \n"], ["flake8-bandit", "S311", 34, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "    jitter_direction = random.randrange(-x,x), random.randrange(-y,y)    \n"], ["flake8-bandit", "S311", 127, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S311", 135, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S311", 138, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S311", 141, 0, "Standard pseudo-random generators are not suitable for security/cryptographic purposes.", "        if random.random() < self.augment_prob:\n"], ["flake8-bandit", "S404", 3, 0, "Consider possible security implications associated with the subprocess module.", "import subprocess\n"], ["flake8-bandit", "S603", 23, 0, "subprocess call - check for execution of untrusted input.", "        subprocess.check_call([sys.executable,\n"], ["flake8-bandit", "S603", 25, 0, "subprocess call - check for execution of untrusted input.", "    subprocess.check_call([sys.executable, '-m', 'pip', 'install',\n"], ["pycodestyle", "W291", 34, 69, "trailing whitespace", "    jitter_direction = random.randrange(-x,x), random.randrange(-y,y)    \n"], ["pycodestyle", "W291", 40, 115, "trailing whitespace", "    ii = image_s[:, -jitter_direction[1]*(jitter_direction[1]<0):SS[0]-jitter_direction[1]*(jitter_direction[1]<0), \n"], ["pycodestyle", "W293", 149, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 158, 0, "blank line contains whitespace", "   \n"], ["pycodestyle", "W391", 160, 0, "blank line at end of file", "\n"], ["pycodestyle", "W503", 61, 28, "line break before binary operator", "                            + f'instances_{image_set}2017.json')\n"]], "digest": "eec34a42b197e9e00572ce71782a06ea"}