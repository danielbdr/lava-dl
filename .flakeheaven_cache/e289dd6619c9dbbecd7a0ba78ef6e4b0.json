{"results": [["pycodestyle", "E121", 39, 12, "continuation line under-indented for hanging indent", "            }\n"], ["pycodestyle", "E121", 44, 12, "continuation line under-indented for hanging indent", "            ])\n"], ["pycodestyle", "E126", 35, 16, "continuation line over-indented for hanging indent", "                'threshold'     : 0.1,\n"], ["pycodestyle", "E126", 42, 16, "continuation line over-indented for hanging indent", "                slayer.block.cuba.Dense(neuron_params, 200, 256),\n"], ["pycodestyle", "E202", 17, 58, "whitespace before ')'", "        self.input  = slayer.io.read_1d_spikes('input.bs1' )\n"], ["pycodestyle", "E203", 35, 31, "whitespace before ':'", "                'threshold'     : 0.1,\n"], ["pycodestyle", "E203", 36, 31, "whitespace before ':'", "                'current_decay' : 1,\n"], ["pycodestyle", "E203", 37, 31, "whitespace before ':'", "                'voltage_decay' : 0.1,\n"], ["pycodestyle", "E203", 38, 31, "whitespace before ':'", "                'requires_grad' : True,     \n"], ["pycodestyle", "E221", 17, 18, "multiple spaces before operator", "        self.input  = slayer.io.read_1d_spikes('input.bs1' )\n"], ["pycodestyle", "E261", 24, 76, "at least two spaces before inline comment", "            self.target.fill_tensor(torch.zeros(1, 1, 200, 2000)).squeeze(), # target\n"], ["pycodestyle", "E261", 28, 16, "at least two spaces before inline comment", "        return 1 # just one sample for this problem\n"], ["pycodestyle", "E302", 14, 0, "expected 2 blank lines, found 1", "class OxfordDataset(Dataset):\n"], ["pycodestyle", "E302", 30, 0, "expected 2 blank lines, found 1", "class Network(torch.nn.Module):\n"], ["pycodestyle", "E305", 58, 0, "expected 2 blank lines after class or function definition, found 1", "if __name__ == '__main__':\n"], ["pycodestyle", "E501", 23, 80, "line too long (84 > 80 characters)", "            self.input.fill_tensor(torch.zeros(1, 1, 200, 2000)).squeeze(),  # input\n"], ["pycodestyle", "E501", 24, 80, "line too long (85 > 80 characters)", "            self.target.fill_tensor(torch.zeros(1, 1, 200, 2000)).squeeze(), # target\n"], ["pycodestyle", "E501", 74, 80, "line too long (83 > 80 characters)", "    net = slayer.auto.SequentialNetwork(trained_folder + '/network.net').to(device)\n"], ["pycodestyle", "W291", 38, 39, "trailing whitespace", "                'requires_grad' : True,     \n"], ["pycodestyle", "W291", 63, 33, "trailing whitespace", "    device = torch.device('cuda') \n"], ["pycodestyle", "W292", 79, 14, "no newline at end of file", "    plt.show()"], ["pycodestyle", "W293", 40, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 45, 0, "blank line contains whitespace", "    \n"]], "digest": "ed5000d1ff67e99416c57e87cf5ed630"}