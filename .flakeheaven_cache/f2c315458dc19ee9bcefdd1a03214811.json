{"results": [["pycodestyle", "E121", 38, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 75, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 104, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 115, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 125, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 135, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 142, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 216, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 225, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 233, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E121", 246, 4, "continuation line under-indented for hanging indent", "    )\n"], ["pycodestyle", "E126", 31, 8, "continuation line over-indented for hanging indent", "        y, \n"], ["pycodestyle", "E126", 67, 8, "continuation line over-indented for hanging indent", "        voltage,                      # dynamics state\n"], ["pycodestyle", "E126", 99, 8, "continuation line over-indented for hanging indent", "        re_input, im_input, \n"], ["pycodestyle", "E126", 108, 8, "continuation line over-indented for hanging indent", "        re, im, \n"], ["pycodestyle", "E126", 119, 8, "continuation line over-indented for hanging indent", "        re_input, im_input, \n"], ["pycodestyle", "E126", 130, 8, "continuation line over-indented for hanging indent", "        re_input, im_input, \n"], ["pycodestyle", "E126", 137, 8, "continuation line over-indented for hanging indent", "        re_0, im_0, \n"], ["pycodestyle", "E126", 211, 8, "continuation line over-indented for hanging indent", "        re_input, im_input, \n"], ["pycodestyle", "E126", 218, 8, "continuation line over-indented for hanging indent", "        adrf_re, adrf_im, \n"], ["pycodestyle", "E126", 227, 8, "continuation line over-indented for hanging indent", "        adrf_re, adrf_im, adrf_th + adrf_ref,\n"], ["pycodestyle", "E126", 237, 8, "continuation line over-indented for hanging indent", "        re_input, im_input, \n"], ["pycodestyle", "E225", 52, 18, "missing whitespace around operator", "ax[1].plot(time[sp>0], y[sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 52, 27, "missing whitespace around operator", "ax[1].plot(time[sp>0], y[sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 58, 23, "missing whitespace around operator", "ax[2].plot(time[voltage>second_order_th], voltage[voltage>second_order_th].cpu(), label='spike')\n"], ["pycodestyle", "E225", 58, 57, "missing whitespace around operator", "ax[2].plot(time[voltage>second_order_th], voltage[voltage>second_order_th].cpu(), label='spike')\n"], ["pycodestyle", "E225", 86, 29, "missing whitespace around operator", "ax[1].plot(time[(voltage-ref)>th], voltage[(voltage-ref)>th], '*', label='spike')\n"], ["pycodestyle", "E225", 86, 56, "missing whitespace around operator", "ax[1].plot(time[(voltage-ref)>th], voltage[(voltage-ref)>th], '*', label='spike')\n"], ["pycodestyle", "E225", 95, 17, "missing whitespace around operator", "phi = 2 * np.pi /25\n"], ["pycodestyle", "E225", 154, 18, "missing whitespace around operator", "ax[1].plot(time[sp>0], re[sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 154, 28, "missing whitespace around operator", "ax[1].plot(time[sp>0], re[sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 166, 20, "missing whitespace around operator", "ax[3].plot(time[sp_1>0], re_1[sp_1>0], '*', label='spike')\n"], ["pycodestyle", "E225", 166, 34, "missing whitespace around operator", "ax[3].plot(time[sp_1>0], re_1[sp_1>0], '*', label='spike')\n"], ["pycodestyle", "E225", 189, 16, "missing whitespace around operator", "ax[0].plot(re[sp>0], im[sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 189, 26, "missing whitespace around operator", "ax[0].plot(re[sp>0], im[sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 203, 20, "missing whitespace around operator", "ax[2].plot(re_1[sp_1>0], im_1[sp_1>0], '*', label='spike')\n"], ["pycodestyle", "E225", 203, 34, "missing whitespace around operator", "ax[2].plot(re_1[sp_1>0], im_1[sp_1>0], '*', label='spike')\n"], ["pycodestyle", "E225", 260, 23, "missing whitespace around operator", "ax[1].plot(time[adrf_sp>0], adrf_re[adrf_sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 260, 43, "missing whitespace around operator", "ax[1].plot(time[adrf_sp>0], adrf_re[adrf_sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 277, 21, "missing whitespace around operator", "ax[0].plot(adrf_re[sp>0], adrf_im[sp>0], '*', label='spike')\n"], ["pycodestyle", "E225", 277, 36, "missing whitespace around operator", "ax[0].plot(adrf_re[sp>0], adrf_im[sp>0], '*', label='spike')\n"], ["pycodestyle", "E226", 69, 21, "missing whitespace around arithmetic operator", "        ref_decay=0.5*decay,          # refractory decay\n"], ["pycodestyle", "E226", 72, 20, "missing whitespace around arithmetic operator", "        th_scale=0.5*second_order_th, # threshold step\n"], ["pycodestyle", "E226", 86, 24, "missing whitespace around arithmetic operator", "ax[1].plot(time[(voltage-ref)>th], voltage[(voltage-ref)>th], '*', label='spike')\n"], ["pycodestyle", "E226", 86, 51, "missing whitespace around arithmetic operator", "ax[1].plot(time[(voltage-ref)>th], voltage[(voltage-ref)>th], '*', label='spike')\n"], ["pycodestyle", "E226", 93, 12, "missing whitespace around arithmetic operator", "im_input = 2*torch.randn_like(re_input) * (re_input > 0)\n"], ["pycodestyle", "E226", 96, 18, "missing whitespace around arithmetic operator", "sin_decay = (scale-alpha) * np.sin(phi)\n"], ["pycodestyle", "E226", 97, 18, "missing whitespace around arithmetic operator", "cos_decay = (scale-alpha) * np.cos(phi)\n"], ["pycodestyle", "E226", 175, 39, "missing whitespace around arithmetic operator", "    xx = np.array([threshold, threshold+500])\n"], ["pycodestyle", "E226", 183, 35, "missing whitespace around arithmetic operator", "    ax.axhspan(threshold, threshold+50, color='green', alpha=0.1)\n"], ["pycodestyle", "E226", 190, 52, "missing whitespace around arithmetic operator", "plot_phase_region(ax[0], threshold, sin_decay.item()/scale)\n"], ["pycodestyle", "E226", 204, 58, "missing whitespace around arithmetic operator", "plot_phase_region(ax[2], second_order_th, sin_decay.item()/scale)\n"], ["pycodestyle", "E226", 220, 46, "missing whitespace around arithmetic operator", "        ref_state=initial_state, ref_decay=0.5*decay,       # refractory state and decay\n"], ["pycodestyle", "E226", 238, 43, "missing whitespace around arithmetic operator", "        sin_decay, cos_decay, ref_decay=0.5*decay, th_decay=decay,\n"], ["pycodestyle", "E226", 278, 52, "missing whitespace around arithmetic operator", "plot_phase_region(ax[0], threshold, sin_decay.item()/scale)\n"], ["pycodestyle", "E227", 21, 9, "missing whitespace around bitwise or shift operator", "scale = 1<<12 # scale factor for integer simulation\n"], ["pycodestyle", "E231", 46, 3, "missing whitespace after ','", "fig,ax = plt.subplots(3, 1, figsize=(15, 7))\n"], ["pycodestyle", "E231", 78, 3, "missing whitespace after ','", "fig,ax = plt.subplots(2, 1, figsize=(15, 4.5))\n"], ["pycodestyle", "E231", 146, 3, "missing whitespace after ','", "fig,ax = plt.subplots(4, 1, figsize=(15, 9))\n"], ["pycodestyle", "E231", 251, 3, "missing whitespace after ','", "fig,ax = plt.subplots(3, 1, figsize=(15, 6.6))\n"], ["pycodestyle", "E261", 21, 13, "at least two spaces before inline comment", "scale = 1<<12 # scale factor for integer simulation\n"], ["pycodestyle", "E261", 33, 10, "at least two spaces before inline comment", "        1, # tau_rho: gradient relaxation constant \n"], ["pycodestyle", "E261", 34, 10, "at least two spaces before inline comment", "        1, # scale_rho: gradient scale constant\n"], ["pycodestyle", "E261", 35, 14, "at least two spaces before inline comment", "        False, # graded_spike: graded or binary spike \n"], ["pycodestyle", "E261", 36, 10, "at least two spaces before inline comment", "        0, # voltage_last: voltage at t=-1\n"], ["pycodestyle", "E261", 37, 10, "at least two spaces before inline comment", "        1, # scale: graded spike scale \n"], ["pycodestyle", "E261", 70, 49, "at least two spaces before inline comment", "        th_state=initial_state + second_order_th, # previous threshold state\n"], ["pycodestyle", "E261", 72, 37, "at least two spaces before inline comment", "        th_scale=0.5*second_order_th, # threshold step\n"], ["pycodestyle", "E261", 110, 10, "at least two spaces before inline comment", "        1, # tau_rho: gradient relaxation constant \n"], ["pycodestyle", "E261", 111, 10, "at least two spaces before inline comment", "        1, # scale_rho: gradient scale constant\n"], ["pycodestyle", "E261", 112, 14, "at least two spaces before inline comment", "        False, # graded_spike: graded or binary spike \n"], ["pycodestyle", "E261", 113, 10, "at least two spaces before inline comment", "        0, # voltage_last: voltage at t=-1\n"], ["pycodestyle", "E261", 114, 10, "at least two spaces before inline comment", "        1, # scale: graded spike scale \n"], ["pycodestyle", "E261", 219, 31, "at least two spaces before inline comment", "        im_state=initial_state, # only imaginary state is needed to determine first phase crossing\n"], ["pycodestyle", "E261", 221, 59, "at least two spaces before inline comment", "        th_state=initial_state + threshold, th_decay=decay, # threshold state and decay\n"], ["pycodestyle", "E261", 222, 33, "at least two spaces before inline comment", "        th_scale=0.5 * threshold, # threshold step\n"], ["pycodestyle", "E261", 228, 10, "at least two spaces before inline comment", "        1, # tau_rho: gradient relaxation constant \n"], ["pycodestyle", "E261", 229, 10, "at least two spaces before inline comment", "        1, # scale_rho: gradient scale constant\n"], ["pycodestyle", "E261", 230, 14, "at least two spaces before inline comment", "        False, # graded_spike: graded or binary spike \n"], ["pycodestyle", "E261", 231, 10, "at least two spaces before inline comment", "        0, # voltage_last: voltage at t=-1\n"], ["pycodestyle", "E261", 232, 10, "at least two spaces before inline comment", "        1, # scale: graded spike scale \n"], ["pycodestyle", "E261", 243, 33, "at least two spaces before inline comment", "        th_scale=0.5 * threshold, # threshold step\n"], ["pycodestyle", "E302", 172, 0, "expected 2 blank lines, found 1", "def plot_phase_region(ax, threshold, sin_decay):\n"], ["pycodestyle", "E302", 181, 0, "expected 2 blank lines, found 1", "def plot_iz_region(ax, threshold):\n"], ["pycodestyle", "E305", 187, 0, "expected 2 blank lines after class or function definition, found 1", "fig, ax = plt.subplots(1, 3, figsize=(10, 3))\n"], ["pycodestyle", "E402", 273, 0, "module level import not at top of file", "import matplotlib.patches as patches\n"], ["pycodestyle", "E501", 27, 80, "line too long (129 > 80 characters)", "y = slayer.neuron.dynamics.leaky_integrator.dynamics(input, decay=decay, state=initial_state, w_scale=scale, threshold=threshold)\n"], ["pycodestyle", "E501", 42, 80, "line too long (114 > 80 characters)", "current = slayer.neuron.dynamics.leaky_integrator.dynamics(input, decay=decay, state=initial_state, w_scale=scale)\n"], ["pycodestyle", "E501", 43, 80, "line too long (143 > 80 characters)", "voltage = slayer.neuron.dynamics.leaky_integrator.dynamics(current, decay=decay, state=initial_state, w_scale=scale, threshold=second_order_th)\n"], ["pycodestyle", "E501", 57, 80, "line too long (84 > 80 characters)", "ax[2].plot(time, second_order_th * np.ones_like(time), alpha=0.5, label='threshold')\n"], ["pycodestyle", "E501", 58, 80, "line too long (96 > 80 characters)", "ax[2].plot(time[voltage>second_order_th], voltage[voltage>second_order_th].cpu(), label='spike')\n"], ["pycodestyle", "E501", 64, 80, "line too long (114 > 80 characters)", "current = slayer.neuron.dynamics.leaky_integrator.dynamics(input, decay=decay, state=initial_state, w_scale=scale)\n"], ["pycodestyle", "E501", 65, 80, "line too long (116 > 80 characters)", "voltage = slayer.neuron.dynamics.leaky_integrator.dynamics(current, decay=decay, state=initial_state, w_scale=scale)\n"], ["pycodestyle", "E501", 86, 80, "line too long (81 > 80 characters)", "ax[1].plot(time[(voltage-ref)>th], voltage[(voltage-ref)>th], '*', label='spike')\n"], ["pycodestyle", "E501", 143, 80, "line too long (87 > 80 characters)", "sp_1 = slayer.spike.complex.Spike.apply(re_1, im_1, second_order_th, 1, 1, False, 0, 1)\n"], ["pycodestyle", "E501", 160, 80, "line too long (81 > 80 characters)", "ax[2].plot(time[iz_im > threshold], iz_im[iz_im > threshold], '*', label='spike')\n"], ["pycodestyle", "E501", 165, 80, "line too long (84 > 80 characters)", "ax[3].plot(time, second_order_th * np.ones_like(time), alpha=0.5, label='threshold')\n"], ["pycodestyle", "E501", 196, 80, "line too long (82 > 80 characters)", "ax[1].plot(iz_re[iz_im > threshold], iz_im[iz_im > threshold], '*', label='spike')\n"], ["pycodestyle", "E501", 219, 80, "line too long (98 > 80 characters)", "        im_state=initial_state, # only imaginary state is needed to determine first phase crossing\n"], ["pycodestyle", "E501", 220, 80, "line too long (88 > 80 characters)", "        ref_state=initial_state, ref_decay=0.5*decay,       # refractory state and decay\n"], ["pycodestyle", "E501", 221, 80, "line too long (87 > 80 characters)", "        th_state=initial_state + threshold, th_decay=decay, # threshold state and decay\n"], ["pycodestyle", "E501", 236, 80, "line too long (101 > 80 characters)", "adrf_iz_re, adrf_iz_im, adrf_iz_th, adrf_iz_ref = slayer.neuron.dynamics.adaptive_resonator.dynamics(\n"], ["pycodestyle", "W291", 10, 28, "trailing whitespace", "device = torch.device('cpu') \n"], ["pycodestyle", "W291", 31, 10, "trailing whitespace", "        y, \n"], ["pycodestyle", "W291", 32, 18, "trailing whitespace", "        threshold, \n"], ["pycodestyle", "W291", 33, 50, "trailing whitespace", "        1, # tau_rho: gradient relaxation constant \n"], ["pycodestyle", "W291", 35, 53, "trailing whitespace", "        False, # graded_spike: graded or binary spike \n"], ["pycodestyle", "W291", 37, 38, "trailing whitespace", "        1, # scale: graded spike scale \n"], ["pycodestyle", "W291", 99, 27, "trailing whitespace", "        re_input, im_input, \n"], ["pycodestyle", "W291", 100, 29, "trailing whitespace", "        sin_decay, cos_decay, \n"], ["pycodestyle", "W291", 101, 33, "trailing whitespace", "        real_state=initial_state, \n"], ["pycodestyle", "W291", 102, 33, "trailing whitespace", "        imag_state=initial_state, \n"], ["pycodestyle", "W291", 108, 15, "trailing whitespace", "        re, im, \n"], ["pycodestyle", "W291", 110, 50, "trailing whitespace", "        1, # tau_rho: gradient relaxation constant \n"], ["pycodestyle", "W291", 112, 53, "trailing whitespace", "        False, # graded_spike: graded or binary spike \n"], ["pycodestyle", "W291", 114, 38, "trailing whitespace", "        1, # scale: graded spike scale \n"], ["pycodestyle", "W291", 119, 27, "trailing whitespace", "        re_input, im_input, \n"], ["pycodestyle", "W291", 120, 29, "trailing whitespace", "        sin_decay, cos_decay, \n"], ["pycodestyle", "W291", 121, 33, "trailing whitespace", "        real_state=initial_state, \n"], ["pycodestyle", "W291", 122, 33, "trailing whitespace", "        imag_state=initial_state, \n"], ["pycodestyle", "W291", 130, 27, "trailing whitespace", "        re_input, im_input, \n"], ["pycodestyle", "W291", 131, 29, "trailing whitespace", "        sin_decay, cos_decay, \n"], ["pycodestyle", "W291", 132, 33, "trailing whitespace", "        real_state=initial_state, \n"], ["pycodestyle", "W291", 133, 33, "trailing whitespace", "        imag_state=initial_state, \n"], ["pycodestyle", "W291", 137, 19, "trailing whitespace", "        re_0, im_0, \n"], ["pycodestyle", "W291", 138, 29, "trailing whitespace", "        sin_decay, cos_decay, \n"], ["pycodestyle", "W291", 139, 33, "trailing whitespace", "        real_state=initial_state, \n"], ["pycodestyle", "W291", 140, 33, "trailing whitespace", "        imag_state=initial_state, \n"], ["pycodestyle", "W291", 211, 27, "trailing whitespace", "        re_input, im_input, \n"], ["pycodestyle", "W291", 212, 29, "trailing whitespace", "        sin_decay, cos_decay, \n"], ["pycodestyle", "W291", 213, 33, "trailing whitespace", "        real_state=initial_state, \n"], ["pycodestyle", "W291", 214, 33, "trailing whitespace", "        imag_state=initial_state, \n"], ["pycodestyle", "W291", 218, 25, "trailing whitespace", "        adrf_re, adrf_im, \n"], ["pycodestyle", "W291", 228, 50, "trailing whitespace", "        1, # tau_rho: gradient relaxation constant \n"], ["pycodestyle", "W291", 230, 53, "trailing whitespace", "        False, # graded_spike: graded or binary spike \n"], ["pycodestyle", "W291", 232, 38, "trailing whitespace", "        1, # scale: graded spike scale \n"], ["pycodestyle", "W291", 237, 27, "trailing whitespace", "        re_input, im_input, \n"], ["pycodestyle", "W291", 239, 33, "trailing whitespace", "        real_state=initial_state, \n"], ["pycodestyle", "W293", 180, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W605", 191, 19, "invalid escape sequence '\\m'", "ax[0].set_xlabel('$\\mathfrak{Re}(z)$')\n"], ["pycodestyle", "W605", 192, 19, "invalid escape sequence '\\m'", "ax[0].set_ylabel('$\\mathfrak{Im}(z)$')\n"], ["pycodestyle", "W605", 198, 19, "invalid escape sequence '\\m'", "ax[1].set_xlabel('$\\mathfrak{Re}(z)$')\n"], ["pycodestyle", "W605", 205, 19, "invalid escape sequence '\\m'", "ax[2].set_xlabel('$\\mathfrak{Re}(z)$')\n"], ["pycodestyle", "W605", 279, 19, "invalid escape sequence '\\m'", "ax[0].set_xlabel('$\\mathfrak{Re}(z)$')\n"], ["pycodestyle", "W605", 280, 19, "invalid escape sequence '\\m'", "ax[0].set_ylabel('$\\mathfrak{Im}(z)$')\n"], ["pycodestyle", "W605", 287, 19, "invalid escape sequence '\\m'", "ax[1].set_xlabel('$\\mathfrak{Re}(z)$')\n"]], "digest": "47b7d3d585277c0b0f578b7674a3859e"}