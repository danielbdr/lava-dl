{"results": [["pycodestyle", "E127", 355, 48, "continuation line over-indented for visual indent", "                                                dim=1)\n"], ["pycodestyle", "E127", 378, 48, "continuation line over-indented for visual indent", "                                                for c in counts[0]]) + ']']\n"], ["pycodestyle", "E127", 442, 48, "continuation line over-indented for visual indent", "                                                for c in counts[0]]) + ']']\n"], ["pycodestyle", "E128", 230, 40, "continuation line under-indented for visual indent", "                                        batch_size=args.b,\n"], ["pycodestyle", "E128", 231, 40, "continuation line under-indented for visual indent", "                                        shuffle=False,\n"], ["pycodestyle", "E128", 232, 40, "continuation line under-indented for visual indent", "                                        collate_fn=yolo_target.collate_fn,\n"], ["pycodestyle", "E128", 233, 40, "continuation line under-indented for visual indent", "                                        num_workers=args.num_workers,\n"], ["pycodestyle", "E128", 234, 40, "continuation line under-indented for visual indent", "                                        pin_memory=True)\n"], ["pycodestyle", "E128", 237, 36, "continuation line under-indented for visual indent", "                                    batch_size=args.b,\n"], ["pycodestyle", "E128", 238, 36, "continuation line under-indented for visual indent", "                                    shuffle=False,\n"], ["pycodestyle", "E128", 239, 36, "continuation line under-indented for visual indent", "                                    collate_fn=yolo_target.collate_fn,\n"], ["pycodestyle", "E128", 240, 36, "continuation line under-indented for visual indent", "                                    num_workers=args.num_workers,\n"], ["pycodestyle", "E128", 241, 36, "continuation line under-indented for visual indent", "                                    pin_memory=True)\n"], ["pycodestyle", "E128", 246, 40, "continuation line under-indented for visual indent", "                                        batch_size=args.b,\n"], ["pycodestyle", "E128", 247, 40, "continuation line under-indented for visual indent", "                                        shuffle=True,\n"], ["pycodestyle", "E128", 248, 40, "continuation line under-indented for visual indent", "                                        collate_fn=yolo_target.collate_fn,\n"], ["pycodestyle", "E128", 249, 40, "continuation line under-indented for visual indent", "                                        num_workers=args.num_workers,\n"], ["pycodestyle", "E128", 250, 40, "continuation line under-indented for visual indent", "                                        pin_memory=True)\n"], ["pycodestyle", "E128", 253, 36, "continuation line under-indented for visual indent", "                                    batch_size=args.b,\n"], ["pycodestyle", "E128", 254, 36, "continuation line under-indented for visual indent", "                                    shuffle=False,\n"], ["pycodestyle", "E128", 255, 36, "continuation line under-indented for visual indent", "                                    collate_fn=yolo_target.collate_fn,\n"], ["pycodestyle", "E128", 256, 36, "continuation line under-indented for visual indent", "                                    num_workers=args.num_workers,\n"], ["pycodestyle", "E128", 257, 36, "continuation line under-indented for visual indent", "                                    pin_memory=True)\n"], ["pycodestyle", "E128", 262, 36, "continuation line under-indented for visual indent", "                                    batch_size=args.b,\n"], ["pycodestyle", "E128", 263, 36, "continuation line under-indented for visual indent", "                                    shuffle=True,\n"], ["pycodestyle", "E128", 264, 36, "continuation line under-indented for visual indent", "                                    collate_fn=yolo_target.collate_fn,\n"], ["pycodestyle", "E128", 265, 36, "continuation line under-indented for visual indent", "                                    num_workers=args.num_workers,\n"], ["pycodestyle", "E128", 266, 36, "continuation line under-indented for visual indent", "                                    pin_memory=True)\n"], ["pycodestyle", "E128", 269, 32, "continuation line under-indented for visual indent", "                                batch_size=args.b,\n"], ["pycodestyle", "E128", 270, 32, "continuation line under-indented for visual indent", "                                shuffle=False,\n"], ["pycodestyle", "E128", 271, 32, "continuation line under-indented for visual indent", "                                collate_fn=yolo_target.collate_fn,\n"], ["pycodestyle", "E128", 272, 32, "continuation line under-indented for visual indent", "                                num_workers=args.num_workers,\n"], ["pycodestyle", "E128", 273, 32, "continuation line under-indented for visual indent", "                                pin_memory=True)\n"], ["pycodestyle", "E128", 375, 28, "continuation line under-indented for visual indent", "                            f'({100.0 * processed / total:.0f}%)]']\n"], ["pycodestyle", "E128", 392, 44, "continuation line under-indented for visual indent", "                                            loss_distr[loss_idx].item(),\n"], ["pycodestyle", "E128", 393, 44, "continuation line under-indented for visual indent", "                                            len(loss_tracker[loss_key]) - 1)\n"], ["pycodestyle", "E203", 63, 29, "whitespace before ','", "    parser.add_argument('-b'  , type=int, default=32,  help='batch size for dataloader')\n"], ["pycodestyle", "E203", 69, 29, "whitespace before ','", "    parser.add_argument('-lr' , type=float, default=0.001, help='initial learning rate')\n"], ["pycodestyle", "E203", 70, 29, "whitespace before ','", "    parser.add_argument('-wd' , type=float, default=1e-5 , help='optimizer weight decay')\n"], ["pycodestyle", "E203", 70, 56, "whitespace before ','", "    parser.add_argument('-wd' , type=float, default=1e-5 , help='optimizer weight decay')\n"], ["pycodestyle", "E203", 73, 36, "whitespace before ','", "    parser.add_argument('-threshold' , type=float, default=0.1, help='neuron threshold')\n"], ["pycodestyle", "E203", 74, 36, "whitespace before ','", "    parser.add_argument('-tau_grad'  , type=float, default=0.1, help='surrogate gradient time constant')\n"], ["pycodestyle", "E203", 76, 36, "whitespace before ','", "    parser.add_argument('-clip'      , type=float, default=10,  help='gradient clipping limit')\n"], ["pycodestyle", "E203", 78, 36, "whitespace before ','", "    parser.add_argument('-load'      , type=str, default='',  help='pretrained model', nargs='+')\n"], ["pycodestyle", "E203", 82, 41, "whitespace before ','", "    parser.add_argument('-lambda_coord'   , type=float, default= 1.0, help='YOLO coordinate loss lambda')\n"], ["pycodestyle", "E203", 83, 41, "whitespace before ','", "    parser.add_argument('-lambda_noobj'   , type=float, default=10.0, help='YOLO no-object loss lambda')\n"], ["pycodestyle", "E203", 84, 41, "whitespace before ','", "    parser.add_argument('-lambda_obj'     , type=float, default= 5.0, help='YOLO object loss lambda')\n"], ["pycodestyle", "E203", 85, 41, "whitespace before ','", "    parser.add_argument('-lambda_cls'     , type=float, default= 1.0, help='YOLO class loss lambda')\n"], ["pycodestyle", "E203", 86, 41, "whitespace before ','", "    parser.add_argument('-lambda_iou'     , type=float, default= 1.0, help='YOLO iou loss lambda')\n"], ["pycodestyle", "E203", 87, 41, "whitespace before ','", "    parser.add_argument('-alpha_iou'      , type=float, default=0.25, help='YOLO loss object target iou mixture factor')\n"], ["pycodestyle", "E203", 89, 41, "whitespace before ','", "    parser.add_argument('-track_iter'     , type=int,   default=1000, help='YOLO loss tracking interval')\n"], ["pycodestyle", "E203", 90, 41, "whitespace before ','", "    parser.add_argument('-seed'           , type=int,   default=None, help='random seed of the experiment')\n"], ["pycodestyle", "E203", 92, 41, "whitespace before ','", "    parser.add_argument('-epoch'          , type=int,   default=50,   help='number of epochs to run')\n"], ["pycodestyle", "E203", 93, 41, "whitespace before ','", "    parser.add_argument('-warmup'         , type=int,   default=10,   help='number of epochs to warmup')\n"], ["pycodestyle", "E203", 95, 41, "whitespace before ','", "    parser.add_argument('-dataset'        , type=str,   default='COCO',help='dataset to use [COCO, BDD100K, PASCAL]')\n"], ["pycodestyle", "E203", 96, 41, "whitespace before ','", "    parser.add_argument('-path'           , type=str,   default=None,  help='dataset path') #this one will be set to \n"], ["pycodestyle", "E203", 97, 41, "whitespace before ','", "    parser.add_argument('-aug_prob'       , type=float, default=0.2,   help='training augmentation probability')\n"], ["pycodestyle", "E203", 98, 41, "whitespace before ','", "    parser.add_argument('-subset'         , default=False, action='store_true', help='use COCO128 subset')\n"], ["pycodestyle", "E203", 99, 41, "whitespace before ','", "    parser.add_argument('-output_dir'     , type=str,   default=\".\",   help=\"directory in which to put log folders\")\n"], ["pycodestyle", "E203", 100, 41, "whitespace before ','", "    parser.add_argument('-num_workers'    , type=int,   default=12,    help=\"number of dataloader workers\")\n"], ["pycodestyle", "E203", 101, 41, "whitespace before ','", "    parser.add_argument('-clamp_max'      , type=float,   default=5.0, help=\"exponential clamp in height/width calculation\")\n"], ["pycodestyle", "E203", 102, 41, "whitespace before ','", "    parser.add_argument('-verbose'        , default=False, action='store_true', help='lots of debug printouts')\n"], ["pycodestyle", "E203", 103, 41, "whitespace before ','", "    parser.add_argument('-train'          , default=False, action='store_true', help='activate training')\n"], ["pycodestyle", "E203", 104, 41, "whitespace before ','", "    parser.add_argument('-print_summary'  , default=False, action='store_true', help='Print model summary and exit')\n"], ["pycodestyle", "E203", 106, 41, "whitespace before ','", "    parser.add_argument('-DVSlike'        , default=False, action='store_true', help='activate random image jitter subtraction')\n"], ["pycodestyle", "E221", 38, 9, "multiple spaces before operator", "COCO_path    = ['/export/share/datasets/COCO2017', '/data-raid/sshresth/data/coco/']\n"], ["pycodestyle", "E225", 113, 27, "missing whitespace around operator", "    if args.combined_models>1: ### multiple heads loading the combined head model\n"], ["pycodestyle", "E225", 119, 44, "missing whitespace around operator", "    DATASET_path = COCO_path if args.dataset=='COCO' else BDD100K_path\n"], ["pycodestyle", "E225", 157, 31, "missing whitespace around operator", "        if args.combined_models>1:\n"], ["pycodestyle", "E225", 167, 31, "missing whitespace around operator", "        if args.combined_models>1:\n"], ["pycodestyle", "E225", 184, 31, "missing whitespace around operator", "        if args.combined_models>1: ## combined_model\n"], ["pycodestyle", "E225", 400, 23, "missing whitespace around operator", "                H = H +'(Mx: %.3f)'%stats.training.max_accuracy if stats.training.best_accuracy else H\n"], ["pycodestyle", "E226", 462, 38, "missing whitespace around arithmetic operator", "                if epoch == args.epoch-1:\n"], ["pycodestyle", "E226", 464, 30, "missing whitespace around arithmetic operator", "        if epoch == args.epoch-1:\n"], ["pycodestyle", "E226", 465, 59, "missing whitespace around arithmetic operator", "            storeData.save(rate_count_test, args.output_dir+'/'+args.strID+\"_rate_count_test.pkl\")\n"], ["pycodestyle", "E226", 465, 63, "missing whitespace around arithmetic operator", "            storeData.save(rate_count_test, args.output_dir+'/'+args.strID+\"_rate_count_test.pkl\")\n"], ["pycodestyle", "E226", 465, 74, "missing whitespace around arithmetic operator", "            storeData.save(rate_count_test, args.output_dir+'/'+args.strID+\"_rate_count_test.pkl\")\n"], ["pycodestyle", "E228", 116, 66, "missing whitespace around modulo operator", "        exec('from models.sdnn_%s import Network, SparsityMonitor'%args.model[0])\n"], ["pycodestyle", "E228", 294, 31, "missing whitespace around modulo operator", "    m_s = lambda x: '%.2f\u00b1%.2f'%(np.mean(x), np.std(x))\n"], ["pycodestyle", "E228", 399, 31, "missing whitespace around modulo operator", "                H = '|Trn:%.3f'%stats.training.accuracy + ' |Rate:' + m_s([c.item() for c in counts[0]])\n"], ["pycodestyle", "E228", 400, 35, "missing whitespace around modulo operator", "                H = H +'(Mx: %.3f)'%stats.training.max_accuracy if stats.training.best_accuracy else H\n"], ["pycodestyle", "E228", 402, 36, "missing whitespace around modulo operator", "                    H += '|Tst:%.3f'%stats.testing.accuracy \n"], ["pycodestyle", "E228", 403, 38, "missing whitespace around modulo operator", "                    H += '(Max: %.3f)'%stats.testing.max_accuracy\n"], ["pycodestyle", "E228", 451, 35, "missing whitespace around modulo operator", "                    H = '|Trn:%.3f'%stats.training.accuracy\n"], ["pycodestyle", "E228", 452, 37, "missing whitespace around modulo operator", "                    H += '(Mx: %.3f)'%stats.training.max_accuracy\n"], ["pycodestyle", "E228", 455, 31, "missing whitespace around modulo operator", "                H = '|Tst:%.3f'%stats.testing.accuracy + (H if stats.training.accuracy else '') + ' |Rate:' + m_s([c.item() for c in counts[0]])\n"], ["pycodestyle", "E228", 456, 34, "missing whitespace around modulo operator", "                H += '(Max: %.3f)'%stats.testing.max_accuracy if stats.testing.best_accuracy else ''\n"], ["pycodestyle", "E231", 95, 70, "missing whitespace after ','", "    parser.add_argument('-dataset'        , type=str,   default='COCO',help='dataset to use [COCO, BDD100K, PASCAL]')\n"], ["pycodestyle", "E231", 312, 39, "missing whitespace after ','", "    pbar_epoch = tqdm(range(args.epoch),desc=\"epoch\")\n"], ["pycodestyle", "E241", 63, 53, "multiple spaces after ','", "    parser.add_argument('-b'  , type=int, default=32,  help='batch size for dataloader')\n"], ["pycodestyle", "E241", 76, 62, "multiple spaces after ','", "    parser.add_argument('-clip'      , type=float, default=10,  help='gradient clipping limit')\n"], ["pycodestyle", "E241", 78, 60, "multiple spaces after ','", "    parser.add_argument('-load'      , type=str, default='',  help='pretrained model', nargs='+')\n"], ["pycodestyle", "E241", 89, 53, "multiple spaces after ','", "    parser.add_argument('-track_iter'     , type=int,   default=1000, help='YOLO loss tracking interval')\n"], ["pycodestyle", "E241", 90, 53, "multiple spaces after ','", "    parser.add_argument('-seed'           , type=int,   default=None, help='random seed of the experiment')\n"], ["pycodestyle", "E241", 92, 53, "multiple spaces after ','", "    parser.add_argument('-epoch'          , type=int,   default=50,   help='number of epochs to run')\n"], ["pycodestyle", "E241", 92, 67, "multiple spaces after ','", "    parser.add_argument('-epoch'          , type=int,   default=50,   help='number of epochs to run')\n"], ["pycodestyle", "E241", 93, 53, "multiple spaces after ','", "    parser.add_argument('-warmup'         , type=int,   default=10,   help='number of epochs to warmup')\n"], ["pycodestyle", "E241", 93, 67, "multiple spaces after ','", "    parser.add_argument('-warmup'         , type=int,   default=10,   help='number of epochs to warmup')\n"], ["pycodestyle", "E241", 95, 53, "multiple spaces after ','", "    parser.add_argument('-dataset'        , type=str,   default='COCO',help='dataset to use [COCO, BDD100K, PASCAL]')\n"], ["pycodestyle", "E241", 96, 53, "multiple spaces after ','", "    parser.add_argument('-path'           , type=str,   default=None,  help='dataset path') #this one will be set to \n"], ["pycodestyle", "E241", 96, 69, "multiple spaces after ','", "    parser.add_argument('-path'           , type=str,   default=None,  help='dataset path') #this one will be set to \n"], ["pycodestyle", "E241", 97, 68, "multiple spaces after ','", "    parser.add_argument('-aug_prob'       , type=float, default=0.2,   help='training augmentation probability')\n"], ["pycodestyle", "E241", 99, 53, "multiple spaces after ','", "    parser.add_argument('-output_dir'     , type=str,   default=\".\",   help=\"directory in which to put log folders\")\n"], ["pycodestyle", "E241", 99, 68, "multiple spaces after ','", "    parser.add_argument('-output_dir'     , type=str,   default=\".\",   help=\"directory in which to put log folders\")\n"], ["pycodestyle", "E241", 100, 53, "multiple spaces after ','", "    parser.add_argument('-num_workers'    , type=int,   default=12,    help=\"number of dataloader workers\")\n"], ["pycodestyle", "E241", 100, 67, "multiple spaces after ','", "    parser.add_argument('-num_workers'    , type=int,   default=12,    help=\"number of dataloader workers\")\n"], ["pycodestyle", "E241", 101, 55, "multiple spaces after ','", "    parser.add_argument('-clamp_max'      , type=float,   default=5.0, help=\"exponential clamp in height/width calculation\")\n"], ["pycodestyle", "E241", 105, 60, "multiple spaces after ','", "    parser.add_argument('-strID', type=str, default='SDNN_',                    help='str ID to attach to file name')\n"], ["pycodestyle", "E241", 107, 69, "multiple spaces after ','", "    parser.add_argument('-model', type=str, default='single_head_KP',           help='(list of) model(-heads) to load [dual_head, single_head_KP, short_single_head_KP, ...]', nargs='+')\n"], ["pycodestyle", "E241", 108, 57, "multiple spaces after ','", "    parser.add_argument('-Heads', type=int, default=None,                       help=\"[list of] head id\", nargs ='+')\n"], ["pycodestyle", "E251", 82, 64, "unexpected spaces around keyword / parameter equals", "    parser.add_argument('-lambda_coord'   , type=float, default= 1.0, help='YOLO coordinate loss lambda')\n"], ["pycodestyle", "E251", 84, 64, "unexpected spaces around keyword / parameter equals", "    parser.add_argument('-lambda_obj'     , type=float, default= 5.0, help='YOLO object loss lambda')\n"], ["pycodestyle", "E251", 85, 64, "unexpected spaces around keyword / parameter equals", "    parser.add_argument('-lambda_cls'     , type=float, default= 1.0, help='YOLO class loss lambda')\n"], ["pycodestyle", "E251", 86, 64, "unexpected spaces around keyword / parameter equals", "    parser.add_argument('-lambda_iou'     , type=float, default= 1.0, help='YOLO iou loss lambda')\n"], ["pycodestyle", "E251", 108, 111, "unexpected spaces around keyword / parameter equals", "    parser.add_argument('-Heads', type=int, default=None,                       help=\"[list of] head id\", nargs ='+')\n"], ["pycodestyle", "E251", 244, 101, "unexpected spaces around keyword / parameter equals", "                train_set = COCO(root=args.path, train=True, augment_prob=args.aug_prob, image_jitter = args.DVSlike)            \n"], ["pycodestyle", "E251", 244, 103, "unexpected spaces around keyword / parameter equals", "                train_set = COCO(root=args.path, train=True, augment_prob=args.aug_prob, image_jitter = args.DVSlike)            \n"], ["pycodestyle", "E251", 251, 69, "unexpected spaces around keyword / parameter equals", "            test_set = COCO(root=args.path, train=False, image_jitter = args.DVSlike)\n"], ["pycodestyle", "E251", 251, 71, "unexpected spaces around keyword / parameter equals", "            test_set = COCO(root=args.path, train=False, image_jitter = args.DVSlike)\n"], ["pycodestyle", "E251", 260, 133, "unexpected spaces around keyword / parameter equals", "            train_set = BDD(root=args.path, dataset='track', train=True, augment_prob=args.aug_prob, randomize_seq=True, image_jitter = args.DVSlike)                \n"], ["pycodestyle", "E251", 260, 135, "unexpected spaces around keyword / parameter equals", "            train_set = BDD(root=args.path, dataset='track', train=True, augment_prob=args.aug_prob, randomize_seq=True, image_jitter = args.DVSlike)                \n"], ["pycodestyle", "E251", 267, 101, "unexpected spaces around keyword / parameter equals", "        test_set = BDD(root=args.path, dataset='track', train=False, randomize_seq=True, image_jitter = args.DVSlike)\n"], ["pycodestyle", "E251", 267, 103, "unexpected spaces around keyword / parameter equals", "        test_set = BDD(root=args.path, dataset='track', train=False, randomize_seq=True, image_jitter = args.DVSlike)\n"], ["pycodestyle", "E251", 318, 75, "unexpected spaces around keyword / parameter equals", "            pbar = tqdm(train_loader, desc='Train', leave=False, bar_format = \"{desc}: {percentage:.1f}%|{bar}|{n_fmt}/{total_fmt} {postfix}\")          \n"], ["pycodestyle", "E251", 318, 77, "unexpected spaces around keyword / parameter equals", "            pbar = tqdm(train_loader, desc='Train', leave=False, bar_format = \"{desc}: {percentage:.1f}%|{bar}|{n_fmt}/{total_fmt} {postfix}\")          \n"], ["pycodestyle", "E251", 413, 69, "unexpected spaces around keyword / parameter equals", "        pbar = tqdm(test_loader, desc='Test', leave=False, bar_format = \"{desc}: {percentage:.1f}%|{bar}|{n_fmt}/{total_fmt} {postfix}\")\n"], ["pycodestyle", "E251", 413, 71, "unexpected spaces around keyword / parameter equals", "        pbar = tqdm(test_loader, desc='Test', leave=False, bar_format = \"{desc}: {percentage:.1f}%|{bar}|{n_fmt}/{total_fmt} {postfix}\")\n"], ["pycodestyle", "E261", 96, 91, "at least two spaces before inline comment", "    parser.add_argument('-path'           , type=str,   default=None,  help='dataset path') #this one will be set to \n"], ["pycodestyle", "E261", 113, 30, "at least two spaces before inline comment", "    if args.combined_models>1: ### multiple heads loading the combined head model\n"], ["pycodestyle", "E261", 184, 34, "at least two spaces before inline comment", "        if args.combined_models>1: ## combined_model\n"], ["pycodestyle", "E262", 96, 92, "inline comment should start with '# '", "    parser.add_argument('-path'           , type=str,   default=None,  help='dataset path') #this one will be set to \n"], ["pycodestyle", "E262", 113, 31, "inline comment should start with '# '", "    if args.combined_models>1: ### multiple heads loading the combined head model\n"], ["pycodestyle", "E262", 184, 35, "inline comment should start with '# '", "        if args.combined_models>1: ## combined_model\n"], ["pycodestyle", "E265", 408, 8, "block comment should start with '# '", "        #end training loop\n"], ["pycodestyle", "E266", 37, 0, "too many leading '#' for block comment", "### DATASET FOLDER LOCATIONS (on different servers) or set -dataset <path>\n"], ["pycodestyle", "E266", 111, 4, "too many leading '#' for block comment", "    ### import network\n"], ["pycodestyle", "E266", 118, 4, "too many leading '#' for block comment", "    #### selecting path according to its existance - see above for including another server path    \n"], ["pycodestyle", "E266", 293, 4, "too many leading '#' for block comment", "    ## function mean and Std\n"], ["pycodestyle", "E272", 321, 30, "multiple spaces before keyword", "                print(f'{i=}')  if args.verbose else None\n"], ["pycodestyle", "E303", 199, 4, "too many blank lines (2)", "    print('module.init_model') \n"], ["pycodestyle", "E303", 276, 4, "too many blank lines (2)", "    print('yolo_loss') \n"], ["pycodestyle", "E303", 298, 4, "too many blank lines (2)", "    (summary(module, (args.b, 3, 448, 448)), os.exit()) if args.print_summary else None\n"], ["pycodestyle", "E303", 468, 8, "too many blank lines (2)", "        if not args.subset and args.train:\n"], ["pycodestyle", "E305", 59, 0, "expected 2 blank lines after class or function definition, found 1", "if __name__ == '__main__':\n"], ["pycodestyle", "E501", 38, 80, "line too long (84 > 80 characters)", "COCO_path    = ['/export/share/datasets/COCO2017', '/data-raid/sshresth/data/coco/']\n"], ["pycodestyle", "E501", 39, 80, "line too long (117 > 80 characters)", "BDD100K_path = ['/export/share/datasets/BDD100K/MOT2020/bdd100k', '/data-raid/sshresth/data/bdd100k/MOT2020/bdd100k']\n"], ["pycodestyle", "E501", 62, 80, "line too long (93 > 80 characters)", "    parser.add_argument('-gpu', type=int, default=[0], help='which gpu(s) to use', nargs='+')\n"], ["pycodestyle", "E501", 63, 80, "line too long (88 > 80 characters)", "    parser.add_argument('-b'  , type=int, default=32,  help='batch size for dataloader')\n"], ["pycodestyle", "E501", 65, 80, "line too long (101 > 80 characters)", "    parser.add_argument('-sparsity', default=False, action='store_true', help='enable sparsity loss')\n"], ["pycodestyle", "E501", 66, 80, "line too long (96 > 80 characters)", "    parser.add_argument('-sp_lam', type=float, default=0.01, help='sparsity loss mixture ratio')\n"], ["pycodestyle", "E501", 67, 80, "line too long (96 > 80 characters)", "    parser.add_argument('-sp_rate', type=float, default=0.01, help='sparsity penalization rate')\n"], ["pycodestyle", "E501", 69, 80, "line too long (88 > 80 characters)", "    parser.add_argument('-lr' , type=float, default=0.001, help='initial learning rate')\n"], ["pycodestyle", "E501", 70, 80, "line too long (89 > 80 characters)", "    parser.add_argument('-wd' , type=float, default=1e-5 , help='optimizer weight decay')\n"], ["pycodestyle", "E501", 71, 80, "line too long (103 > 80 characters)", "    parser.add_argument('-lrf', type=float, default=0.01, help='learning rate factor for lr scheduler')\n"], ["pycodestyle", "E501", 73, 80, "line too long (88 > 80 characters)", "    parser.add_argument('-threshold' , type=float, default=0.1, help='neuron threshold')\n"], ["pycodestyle", "E501", 74, 80, "line too long (104 > 80 characters)", "    parser.add_argument('-tau_grad'  , type=float, default=0.1, help='surrogate gradient time constant')\n"], ["pycodestyle", "E501", 75, 80, "line too long (96 > 80 characters)", "    parser.add_argument('-scale_grad', type=float, default=0.2, help='surrogate gradient scale')\n"], ["pycodestyle", "E501", 76, 80, "line too long (95 > 80 characters)", "    parser.add_argument('-clip'      , type=float, default=10,  help='gradient clipping limit')\n"], ["pycodestyle", "E501", 78, 80, "line too long (97 > 80 characters)", "    parser.add_argument('-load'      , type=str, default='',  help='pretrained model', nargs='+')\n"], ["pycodestyle", "E501", 80, 80, "line too long (114 > 80 characters)", "    parser.add_argument('-tgt_iou_thr', type=float, default=0.5, help='ignore iou threshold in target generation')\n"], ["pycodestyle", "E501", 82, 80, "line too long (105 > 80 characters)", "    parser.add_argument('-lambda_coord'   , type=float, default= 1.0, help='YOLO coordinate loss lambda')\n"], ["pycodestyle", "E501", 83, 80, "line too long (104 > 80 characters)", "    parser.add_argument('-lambda_noobj'   , type=float, default=10.0, help='YOLO no-object loss lambda')\n"], ["pycodestyle", "E501", 84, 80, "line too long (101 > 80 characters)", "    parser.add_argument('-lambda_obj'     , type=float, default= 5.0, help='YOLO object loss lambda')\n"], ["pycodestyle", "E501", 85, 80, "line too long (100 > 80 characters)", "    parser.add_argument('-lambda_cls'     , type=float, default= 1.0, help='YOLO class loss lambda')\n"], ["pycodestyle", "E501", 86, 80, "line too long (98 > 80 characters)", "    parser.add_argument('-lambda_iou'     , type=float, default= 1.0, help='YOLO iou loss lambda')\n"], ["pycodestyle", "E501", 87, 80, "line too long (120 > 80 characters)", "    parser.add_argument('-alpha_iou'      , type=float, default=0.25, help='YOLO loss object target iou mixture factor')\n"], ["pycodestyle", "E501", 88, 80, "line too long (118 > 80 characters)", "    parser.add_argument('-label_smoothing', type=float, default=0.10, help='YOLO class cross entropy label smoothing')\n"], ["pycodestyle", "E501", 89, 80, "line too long (105 > 80 characters)", "    parser.add_argument('-track_iter'     , type=int,   default=1000, help='YOLO loss tracking interval')\n"], ["pycodestyle", "E501", 90, 80, "line too long (107 > 80 characters)", "    parser.add_argument('-seed'           , type=int,   default=None, help='random seed of the experiment')\n"], ["pycodestyle", "E501", 92, 80, "line too long (101 > 80 characters)", "    parser.add_argument('-epoch'          , type=int,   default=50,   help='number of epochs to run')\n"], ["pycodestyle", "E501", 93, 80, "line too long (104 > 80 characters)", "    parser.add_argument('-warmup'         , type=int,   default=10,   help='number of epochs to warmup')\n"], ["pycodestyle", "E501", 95, 80, "line too long (117 > 80 characters)", "    parser.add_argument('-dataset'        , type=str,   default='COCO',help='dataset to use [COCO, BDD100K, PASCAL]')\n"], ["pycodestyle", "E501", 96, 80, "line too long (116 > 80 characters)", "    parser.add_argument('-path'           , type=str,   default=None,  help='dataset path') #this one will be set to \n"], ["pycodestyle", "E501", 97, 80, "line too long (112 > 80 characters)", "    parser.add_argument('-aug_prob'       , type=float, default=0.2,   help='training augmentation probability')\n"], ["pycodestyle", "E501", 98, 80, "line too long (106 > 80 characters)", "    parser.add_argument('-subset'         , default=False, action='store_true', help='use COCO128 subset')\n"], ["pycodestyle", "E501", 99, 80, "line too long (116 > 80 characters)", "    parser.add_argument('-output_dir'     , type=str,   default=\".\",   help=\"directory in which to put log folders\")\n"], ["pycodestyle", "E501", 100, 80, "line too long (107 > 80 characters)", "    parser.add_argument('-num_workers'    , type=int,   default=12,    help=\"number of dataloader workers\")\n"], ["pycodestyle", "E501", 101, 80, "line too long (124 > 80 characters)", "    parser.add_argument('-clamp_max'      , type=float,   default=5.0, help=\"exponential clamp in height/width calculation\")\n"], ["pycodestyle", "E501", 102, 80, "line too long (111 > 80 characters)", "    parser.add_argument('-verbose'        , default=False, action='store_true', help='lots of debug printouts')\n"], ["pycodestyle", "E501", 103, 80, "line too long (105 > 80 characters)", "    parser.add_argument('-train'          , default=False, action='store_true', help='activate training')\n"], ["pycodestyle", "E501", 104, 80, "line too long (116 > 80 characters)", "    parser.add_argument('-print_summary'  , default=False, action='store_true', help='Print model summary and exit')\n"], ["pycodestyle", "E501", 105, 80, "line too long (117 > 80 characters)", "    parser.add_argument('-strID', type=str, default='SDNN_',                    help='str ID to attach to file name')\n"], ["pycodestyle", "E501", 106, 80, "line too long (128 > 80 characters)", "    parser.add_argument('-DVSlike'        , default=False, action='store_true', help='activate random image jitter subtraction')\n"], ["pycodestyle", "E501", 107, 80, "line too long (185 > 80 characters)", "    parser.add_argument('-model', type=str, default='single_head_KP',           help='(list of) model(-heads) to load [dual_head, single_head_KP, short_single_head_KP, ...]', nargs='+')\n"], ["pycodestyle", "E501", 108, 80, "line too long (117 > 80 characters)", "    parser.add_argument('-Heads', type=int, default=None,                       help=\"[list of] head id\", nargs ='+')\n"], ["pycodestyle", "E501", 113, 80, "line too long (81 > 80 characters)", "    if args.combined_models>1: ### multiple heads loading the combined head model\n"], ["pycodestyle", "E501", 116, 80, "line too long (81 > 80 characters)", "        exec('from models.sdnn_%s import Network, SparsityMonitor'%args.model[0])\n"], ["pycodestyle", "E501", 118, 80, "line too long (96 > 80 characters)", "    #### selecting path according to its existance - see above for including another server path    \n"], ["pycodestyle", "E501", 120, 80, "line too long (97 > 80 characters)", "    args.path = [g for g in DATASET_path if os.path.exists(g)][0] if not args.path else args.path\n"], ["pycodestyle", "E501", 125, 80, "line too long (111 > 80 characters)", "        date_str = str(datetime.now())[:-9].replace(':', '').replace('-', '').replace('.', '').replace(' ', '')\n"], ["pycodestyle", "E501", 131, 80, "line too long (124 > 80 characters)", "        trained_folder = args.output_dir + '/Trained_' + identifier if len(identifier) > 0 else args.output_dir + '/Trained'        \n"], ["pycodestyle", "E501", 136, 80, "line too long (117 > 80 characters)", "        # logs_folder = args.output_dir + '/Logs_' + identifier if len(identifier) > 0 else args.output_dir + '/Logs'\n"], ["pycodestyle", "E501", 151, 80, "line too long (82 > 80 characters)", "        sparsity_monitor = SparsityMonitor(max_rate=args.sp_rate, lam=args.sp_lam)\n"], ["pycodestyle", "E501", 192, 80, "line too long (96 > 80 characters)", "        # need to force the intended heads onto the model if loaded from file given another head\n"], ["pycodestyle", "E501", 215, 80, "line too long (115 > 80 characters)", "    lf = lambda x: min(x / args.warmup, 1) * ((1 + np.cos(x * np.pi / args.epoch)) / 2) * (1 - args.lrf) + args.lrf\n"], ["pycodestyle", "E501", 244, 80, "line too long (117 > 80 characters)", "                train_set = COCO(root=args.path, train=True, augment_prob=args.aug_prob, image_jitter = args.DVSlike)            \n"], ["pycodestyle", "E501", 251, 80, "line too long (85 > 80 characters)", "            test_set = COCO(root=args.path, train=False, image_jitter = args.DVSlike)\n"], ["pycodestyle", "E501", 260, 80, "line too long (149 > 80 characters)", "            train_set = BDD(root=args.path, dataset='track', train=True, augment_prob=args.aug_prob, randomize_seq=True, image_jitter = args.DVSlike)                \n"], ["pycodestyle", "E501", 267, 80, "line too long (117 > 80 characters)", "        test_set = BDD(root=args.path, dataset='track', train=False, randomize_seq=True, image_jitter = args.DVSlike)\n"], ["pycodestyle", "E501", 298, 80, "line too long (87 > 80 characters)", "    (summary(module, (args.b, 3, 448, 448)), os.exit()) if args.print_summary else None\n"], ["pycodestyle", "E501", 318, 80, "line too long (142 > 80 characters)", "            pbar = tqdm(train_loader, desc='Train', leave=False, bar_format = \"{desc}: {percentage:.1f}%|{bar}|{n_fmt}/{total_fmt} {postfix}\")          \n"], ["pycodestyle", "E501", 351, 80, "line too long (91 > 80 characters)", "                    # predictions = torch.concat([net.yolo(predictions[0], net.anchors[0]),\n"], ["pycodestyle", "E501", 352, 80, "line too long (99 > 80 characters)", "                    #                             net.yolo(predictions[1], net.anchors[1])], dim=1)\n"], ["pycodestyle", "E501", 354, 80, "line too long (82 > 80 characters)", "                                                in zip(predictions, net.anchors)],\n"], ["pycodestyle", "E501", 357, 80, "line too long (97 > 80 characters)", "                    print(\"assertion error on MAP predictions calculation train set. continuing\")\n"], ["pycodestyle", "E501", 368, 80, "line too long (89 > 80 characters)", "                stats.training.correct_samples = ap_stats[:] * stats.training.num_samples\n"], ["pycodestyle", "E501", 388, 80, "line too long (82 > 80 characters)", "                        loss_tracker[loss_key].append(loss_distr[loss_idx].item())\n"], ["pycodestyle", "E501", 399, 80, "line too long (104 > 80 characters)", "                H = '|Trn:%.3f'%stats.training.accuracy + ' |Rate:' + m_s([c.item() for c in counts[0]])\n"], ["pycodestyle", "E501", 400, 80, "line too long (102 > 80 characters)", "                H = H +'(Mx: %.3f)'%stats.training.max_accuracy if stats.training.best_accuracy else H\n"], ["pycodestyle", "E501", 413, 80, "line too long (136 > 80 characters)", "        pbar = tqdm(test_loader, desc='Test', leave=False, bar_format = \"{desc}: {percentage:.1f}%|{bar}|{n_fmt}/{total_fmt} {postfix}\")\n"], ["pycodestyle", "E501", 420, 80, "line too long (99 > 80 characters)", "                ###################################################################################\n"], ["pycodestyle", "E501", 422, 80, "line too long (104 > 80 characters)", "                #     storeData.save([predictions, bboxes], args.output_dir+'/'+args.strID+'%03d.pkl'%i)\n"], ["pycodestyle", "E501", 423, 80, "line too long (99 > 80 characters)", "                ###################################################################################\n"], ["pycodestyle", "E501", 432, 80, "line too long (87 > 80 characters)", "                stats.testing.correct_samples = ap_stats[:] * stats.testing.num_samples\n"], ["pycodestyle", "E501", 455, 80, "line too long (144 > 80 characters)", "                H = '|Tst:%.3f'%stats.testing.accuracy + (H if stats.training.accuracy else '') + ' |Rate:' + m_s([c.item() for c in counts[0]])\n"], ["pycodestyle", "E501", 456, 80, "line too long (100 > 80 characters)", "                H += '(Max: %.3f)'%stats.testing.max_accuracy if stats.testing.best_accuracy else ''\n"], ["pycodestyle", "E501", 465, 80, "line too long (98 > 80 characters)", "            storeData.save(rate_count_test, args.output_dir+'/'+args.strID+\"_rate_count_test.pkl\")\n"], ["pycodestyle", "E501", 479, 80, "line too long (83 > 80 characters)", "                inputs[b, :, :, :, 0].cpu().data.numpy().transpose([1, 2, 0]) * 255\n"], ["pycodestyle", "E501", 487, 80, "line too long (89 > 80 characters)", "            # print(type(image), annotation['annotation']['object'], type(BOX_COLOR_MAP))\n"], ["pycodestyle", "E501", 495, 80, "line too long (83 > 80 characters)", "                inputs[b, :, :, :, 0].cpu().data.numpy().transpose([1, 2, 0]) * 255\n"], ["pycodestyle", "E501", 508, 80, "line too long (101 > 80 characters)", "            marked_images = Image.new('RGB', (marked_img.width + marked_gt.width, marked_img.height))\n"], ["pycodestyle", "E501", 512, 80, "line too long (94 > 80 characters)", "                writer.add_image('Prediction', transforms.PILToTensor()(marked_images), epoch)\n"], ["pycodestyle", "E501", 517, 80, "line too long (86 > 80 characters)", "                    marked_images.save(f'{trained_folder}/prediction_{epoch}_{b}.jpg')\n"], ["pycodestyle", "E501", 521, 80, "line too long (91 > 80 characters)", "                    video = cv2.VideoWriter(f'{trained_folder}/prediction_{epoch}_{b}.mp4',\n"], ["pycodestyle", "E501", 524, 80, "line too long (126 > 80 characters)", "                        image = Image.fromarray(np.uint8(inputs[b, :, :, :, t].cpu().data.numpy().transpose([1, 2, 0]) * 255))\n"], ["pycodestyle", "E501", 526, 80, "line too long (84 > 80 characters)", "                                                            {'height': image.height,\n"], ["pycodestyle", "E501", 527, 80, "line too long (83 > 80 characters)", "                                                             'width': image.width},\n"], ["pycodestyle", "E501", 530, 80, "line too long (99 > 80 characters)", "                        marked_img = mark_bounding_boxes(image, annotation['annotation']['object'],\n"], ["pycodestyle", "E501", 531, 80, "line too long (98 > 80 characters)", "                                                         box_color_map=BOX_COLOR_MAP, thickness=5)\n"], ["pycodestyle", "E501", 532, 80, "line too long (126 > 80 characters)", "                        image = Image.fromarray(np.uint8(inputs[b, :, :, :, t].cpu().data.numpy().transpose([1, 2, 0]) * 255))\n"], ["pycodestyle", "E501", 534, 80, "line too long (84 > 80 characters)", "                                                            {'height': image.height,\n"], ["pycodestyle", "E501", 535, 80, "line too long (83 > 80 characters)", "                                                             'width': image.width},\n"], ["pycodestyle", "E501", 538, 80, "line too long (98 > 80 characters)", "                        marked_gt = mark_bounding_boxes(image, annotation['annotation']['object'],\n"], ["pycodestyle", "E501", 539, 80, "line too long (97 > 80 characters)", "                                                        box_color_map=BOX_COLOR_MAP, thickness=5)\n"], ["pycodestyle", "E501", 540, 80, "line too long (113 > 80 characters)", "                        marked_images = Image.new('RGB', (marked_img.width + marked_gt.width, marked_img.height))\n"], ["pycodestyle", "E501", 543, 80, "line too long (93 > 80 characters)", "                        video.write(cv2.cvtColor(np.array(marked_images), cv2.COLOR_RGB2BGR))\n"], ["pycodestyle", "E722", 404, 16, "do not use bare 'except'", "                except:\n"], ["pycodestyle", "E722", 453, 16, "do not use bare 'except'", "                except:\n"], ["pycodestyle", "E731", 215, 4, "do not assign a lambda expression, use a def", "    lf = lambda x: min(x / args.warmup, 1) * ((1 + np.cos(x * np.pi / args.epoch)) / 2) * (1 - args.lrf) + args.lrf\n"], ["pycodestyle", "E731", 294, 4, "do not assign a lambda expression, use a def", "    m_s = lambda x: '%.2f\u00b1%.2f'%(np.mean(x), np.std(x))\n"], ["flake8-bandit", "S102", 116, 0, "Use of exec detected.", "        exec('from models.sdnn_%s import Network, SparsityMonitor'%args.model[0])\n"], ["flake8-bandit", "S102", 187, 0, "Use of exec detected.", "                exec(f'module.Head{k}.load_model(load_model)')\n"], ["flake8-bandit", "S102", 188, 0, "Use of exec detected.", "                exec(f'module.Head{k}.to(device)')\n"], ["flake8-bandit", "S110", 404, 0, "Try, Except, Pass detected.", "                except:\n"], ["flake8-bandit", "S110", 453, 0, "Try, Except, Pass detected.", "                except:\n"], ["pycodestyle", "W291", 96, 116, "trailing whitespace", "    parser.add_argument('-path'           , type=str,   default=None,  help='dataset path') #this one will be set to \n"], ["pycodestyle", "W291", 114, 80, "trailing whitespace", "        from models.sdnn_combine_single_heads_KP import Network, SparsityMonitor        \n"], ["pycodestyle", "W291", 118, 96, "trailing whitespace", "    #### selecting path according to its existance - see above for including another server path    \n"], ["pycodestyle", "W291", 126, 42, "trailing whitespace", "        identifier = args.strID + date_str \n"], ["pycodestyle", "W291", 131, 124, "trailing whitespace", "        trained_folder = args.output_dir + '/Trained_' + identifier if len(identifier) > 0 else args.output_dir + '/Trained'        \n"], ["pycodestyle", "W291", 137, 49, "trailing whitespace", "        # os.makedirs(logs_folder, exist_ok=True)     \n"], ["pycodestyle", "W291", 155, 23, "trailing whitespace", "    print('making net') \n"], ["pycodestyle", "W291", 158, 47, "trailing whitespace", "            net = Network(args=args).to(device)            \n"], ["pycodestyle", "W291", 168, 47, "trailing whitespace", "            net = Network(args=args).to(device)            \n"], ["pycodestyle", "W291", 182, 37, "trailing whitespace", "    print(f'loading net on {device}') \n"], ["pycodestyle", "W291", 199, 30, "trailing whitespace", "    print('module.init_model') \n"], ["pycodestyle", "W291", 206, 22, "trailing whitespace", "    print(\"optimizer\") \n"], ["pycodestyle", "W291", 224, 30, "trailing whitespace", "    if args.dataset == 'COCO':        \n"], ["pycodestyle", "W291", 244, 117, "trailing whitespace", "                train_set = COCO(root=args.path, train=True, augment_prob=args.aug_prob, image_jitter = args.DVSlike)            \n"], ["pycodestyle", "W291", 260, 149, "trailing whitespace", "            train_set = BDD(root=args.path, dataset='track', train=True, augment_prob=args.aug_prob, randomize_seq=True, image_jitter = args.DVSlike)                \n"], ["pycodestyle", "W291", 276, 22, "trailing whitespace", "    print('yolo_loss') \n"], ["pycodestyle", "W291", 286, 18, "trailing whitespace", "    print('stats') \n"], ["pycodestyle", "W291", 289, 25, "trailing whitespace", "    print('loss_tracker') \n"], ["pycodestyle", "W291", 310, 25, "trailing whitespace", "    from tqdm import tqdm \n"], ["pycodestyle", "W291", 316, 49, "trailing whitespace", "            ap_stats = APstats(iou_threshold=0.5)            \n"], ["pycodestyle", "W291", 318, 142, "trailing whitespace", "            pbar = tqdm(train_loader, desc='Train', leave=False, bar_format = \"{desc}: {percentage:.1f}%|{bar}|{n_fmt}/{total_fmt} {postfix}\")          \n"], ["pycodestyle", "W291", 402, 59, "trailing whitespace", "                    H += '|Tst:%.3f'%stats.testing.accuracy \n"], ["pycodestyle", "W291", 449, 72, "trailing whitespace", "                # stats.print(epoch, i, samples_sec, header=header_list)   \n"], ["pycodestyle", "W291", 520, 60, "trailing whitespace", "                    fourcc = cv2.VideoWriter_fourcc(*\"mp4v\")    \n"], ["pycodestyle", "W292", 558, 22, "no newline at end of file", "        writer.close()"], ["pycodestyle", "W293", 61, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 117, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 122, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 130, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 181, 0, "blank line contains whitespace", "            \n"], ["pycodestyle", "W293", 197, 0, "blank line contains whitespace", "            \n"], ["pycodestyle", "W293", 213, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 216, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 299, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 307, 0, "blank line contains whitespace", "       \n"], ["pycodestyle", "W293", 320, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 322, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 326, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 329, 0, "blank line contains whitespace", "                 \n"], ["pycodestyle", "W293", 334, 0, "blank line contains whitespace", "                \n"], ["pycodestyle", "W293", 344, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 347, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 359, 0, "blank line contains whitespace", "                \n"], ["pycodestyle", "W293", 361, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 364, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 369, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 384, 0, "blank line contains whitespace", "                \n"], ["pycodestyle", "W293", 409, 0, "blank line contains whitespace", "                    \n"], ["pycodestyle", "W293", 412, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 466, 0, "blank line contains whitespace", "            \n"], ["pycodestyle", "W293", 474, 0, "blank line contains whitespace", "        \n"], ["pycodestyle", "W293", 488, 0, "blank line contains whitespace", "            \n"], ["pycodestyle", "W293", 493, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 507, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 513, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W293", 545, 0, "blank line contains whitespace", "    \n"], ["pycodestyle", "W503", 377, 32, "line break before binary operator", "                                + ', '.join([f'{c.item():.2f}'\n"], ["pycodestyle", "W503", 441, 32, "line break before binary operator", "                                + ', '.join([f'{c.item():.2f}'\n"]], "digest": "45a1917cc070d24e775ac54c1c3a8614"}